<!-- SCCM Client Actions Tool -->
<!-- Version 1.12 -->
<!-- Last modified by Christjan Schumann: 10.04.2012 -->
<!-- http://blog.itminutes.net/ -->
<!-- http://sccmcat.codeplex.com/ -->
<!-- Changes in this version:
	* Improved WMI date conversion to be aware of timezone differences and DST.
	* Fixed new version check.
-->

<!--
	WOL.EXE is a free DOS utility from Gammadyne Corporation
	http://www.gammadyne.com/cmdline.htm#wol
-->

<html>
	<head>
		<title>SCCM Client Actions Tool v1.12 by Christjan Schumann</title>
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<META HTTP-EQUIV="MSThemeCompatible" CONTENT="Yes">
		<HTA:APPLICATION ID="SCCMCAT" APPLICATIONNAME="SCCM Client Actions Tool"
		    SCROLL="no"
		    SELECTION="no"
		    INNERBORDER="no"
		    BORDER="dialog"
		    SINGLEINSTANCE="yes"
		    SYSMENU="yes"
		    MAXIMIZEBUTTON="yes"
		    MINIMIZEBUTTON="yes"
		    CLOSEBUTTON="yes"
		    />
		    
		<style>
			body {
				background-color: #ffffff;
			}
			label {
				font-size:11px;
			}
			
			button {
				font-size:18px;
			}
			
			#actionsTitle, #actionsContainer, .actionsContent
			{
			  position:relative;
			  width:100%;
			}
			
			#actionsTitle
			{
			  height:30px;
			  overflow:hidden;
			  cursor:pointer;
			  font-family:Arial;
			  font-size:10pt;
			  font-weight:bold;
			  vertical-align:middle;
			  text-align:center;
			  background-repeat:repeat-x;
			  display:table-cell;
			  -moz-user-select:none;
			}	
			
			.actionsContent
			{
			  height:0px;
			  overflow:auto;
			  display:none;
			  border-bottom: solid 1px #000000;
			}

			#actionsContainer
			{
			  border-top: solid 1px #000000;
			  border-bottom: solid 1px #000000;
			  border-left: solid 2px #000000;
			  border-right: solid 2px #000000;
			}

			a.3dbutton{
				float:left;
				font-size:110%;
				font-weight:bold;
				border-top:1px solid #999;
				border-left:1px solid #999;
				border-right:1px solid #333;
				border-bottom:1px solid #333;
				width:100%;
				height:100%;
				color: #333;
				}	
			a.3dbutton:hover{	
				border-top:3px outset #b7e1f6;
				border-left:3px outset #b7e1f6;
				border-right:3px outset #b7e1f6;
				border-bottom:3px outset #b7e1f6;
				background-color: #b7e1f6;
				color: #333;
				}	
			a.3dbutton span{		
				float:left;
				width:100%;
				height:100%;
				padding:0 10px;											
				}		
			a.3dbutton:hover span{
				border:none;
				cursor:pointer;	
				}
			
			a.actionItem span {
				font-weight: normal;
				color: #000000;
				text-decoration: none;
				font-size:14px;
			}
			
			a.actionItem:hover span {
				font-weight: bold;
				color: #000000;
			}
			
			.topRow {
				border-bottom:1px solid #000000;
				text-align:left;			
			}
			
			#credentialManager {
				position:absolute;
				right:2px;
				top:2px;
				width:500px;
				height:200px;
				border: 3Px outset #F63; 
				background-color:#f7f7f7; 
				padding-left:5px; 
				padding-top:10px;
			}
			#credentialContainer {
				position:absolute;
				float:right;
				height:20px;
				right:2px;
				top:2px;
				font-size:10px;
				text-align:right;			
			}

			#clientInstallManager	 {
				position:absolute;
				right:2px;
				top:2px;
				width:550px;
				height:650px;
				border: 3px outset #F63; 
				background-color:#f7f7f7; 
				padding-left:5px; 
				padding-top:10px;
			}
			
			.closeLink {
				position:absolute;
				float:right;
				right:10px;
				top:3px;
				font-size:10px;
				text-align:right;					
			}
			
			.healthcheckCell {
				width: 50%;
				text-align: left;
			}
			
			.leftCell {
				text-align: left;
				font-weight: normal;
				width: 50%;
			}
			
			.listWithScrollbars
			{
			    overflow-y:scroll;
			    width:auto;
			    height:100px;
			    border: 1px inset #abadb3;
			}
			
			input[type=text], input[type=textarea], input[type=password], select {
				padding: 2px;
				border:1px solid #3790c6;
				background: #f4f9fc;
				font: 12px/14px verdana, tahoma, sans-serif;
			}
			input[type=text]:hover, input[type=text]:focus, input[type=textarea]:hover, input[type=textarea]:focus, input[type=password]:hover, input[type=password]:focus, select:hover, select:focus
			{
			  border: 1px solid #000000;
				background:#ffffff;
			}
			
			input[type=button]
			{
				margin-top:1em;
				width:69px;
				height:26px;
				text-indent:-9999px;
				overflow:hidden;
				border:0;
				display:block;
				cursor:pointer !important; cursor:hand;
			}			
		</style>
		
		<script language="javascript">
			
			// Accordion menu in javascript.
			// Fantastic code from: http://www.switchonthecode.com/tutorials/javascript-and-css-tutorial-accordion-menus
			var ContentHeight = 265;
			var TimeToSlide = 250.0;
			
			var openAccordion = '';

			function doAccordion(index, strContainerMain)
			{
			  var nID = strContainerMain + "Content" + index;			
			  if(openAccordion == nID)
			    nID = '';
			    
			  setTimeout("animate(" + new Date().getTime() + "," + TimeToSlide + ",'" 
			      + openAccordion + "','" + nID + "')", 33);
			  
			  openAccordion = nID;
			}
			
			function animate(lastTick, timeLeft, closingId, openingId)
			{  
			  var curTick = new Date().getTime();
			  var elapsedTicks = curTick - lastTick;
			  
			  var opening = (openingId == '') ? null : document.getElementById(openingId);
			  var closing = (closingId == '') ? null : document.getElementById(closingId);
			 
			  if(timeLeft <= elapsedTicks)
			  {
			    if(opening != null)
			      opening.style.height = ContentHeight + 'px';
			    
			    if(closing != null)
			    {
			      closing.style.display = 'none';
			      closing.style.height = '0px';
			    }
			    return;
			  }
			 
			  timeLeft -= elapsedTicks;
			  var newClosedHeight = Math.round((timeLeft/TimeToSlide) * ContentHeight);
			
			  if(opening != null)
			  {
			    if(opening.style.display != 'block')
			      opening.style.display = 'block';
			    opening.style.height = (ContentHeight - newClosedHeight) + 'px';
			  }
			  
			  if(closing != null)
			    closing.style.height = newClosedHeight + 'px';
			
			  setTimeout("animate(" + curTick + "," + timeLeft + ",'" 
			      + closingId + "','" + openingId + "')", 33);
			}			
		</script>
		
	</head>
	
	
	<script language="vbscript">
	'-----------------------------
	Const configFileName = "config.ini"
	Const defaultCCMParameters = "/service SMSSITECODE=AUTO"
	'-----------------------------
	Const CurrentVersion = "1.12"
	Const wbemAuthenticationLevelPkt = 6
	Const ForReading = 1
	Const ForWriting = 2
	Const ForAppending = 8
	Const KEY_QUERY_VALUE = &H0001
	Const HKCR = &H80000000 ' HKEY_CLASSES_ROOT
	Const HKCU = &H80000001 ' HKEY_CURRENT_USER
	Const HKLM = &H80000002 ' HKEY_LOCAL_MACHINE
	Const HKU = &H80000003 ' HKEY_USERS
	Const HKCC = &H80000005 'HKEY_CURRENT_CONFIG
	Const ADS_NAME_INITTYPE_GC = 3
	Const ADS_NAME_TYPE_NT4 = 3
	Const ADS_NAME_TYPE_1779 = 1
	'-----------------------------	
	' Default health check settings. Configuration file will override those...
	Dim checkserviceslist: checkserviceslist = "winmgmt,lanmanserver,rpcss,wuauserv,bits,ccmexec"
	Dim latestClientVersion: latestClientVersion = "4.00.6487.2000"
	Dim autoInstallClientWhenMissing: autoInstallClientWhenMissing = False
	Dim daysFromLastHWScan: daysFromLastHWScan = 5
	Dim daysFromLastSWScan: daysFromLastSWScan = 7
	Dim checkEnableDCOM: checkEnableDCOM = True
	Dim checkEnableRemoteConnect: checkEnableRemoteConnect = False
	Dim checkLegacyImpersonationLevel: checkLegacyImpersonationLevel = False
	Dim checkLegacyAuthenticationLevel: checkLegacyAuthenticationLevel = False
	' Other default settings
	Dim enablePingTest: enablePingTest = True
	Dim saveOfflineComputers: saveOfflineComputers = True
	Dim saveOnlineComputers: saveOnlineComputers = True
	Dim promptUserCheck: promptUserCheck = False
	Dim firstDataRowInExcel: firstDataRowInExcel = 2
	Dim enableTrace32Formatting: enableTrace32Formatting = True
	Dim keepLogHistory: keepLogHistory = True
	Dim enableFullUninstall: enableFullUninstall = True
	Dim updateSourceExcelFile: updateSourceExcelFile = False
	'-----------------------------
	Dim objShell: Set objShell = CreateObject("WScript.Shell")
	Dim objNetwork: Set objNetwork = CreateObject("WScript.Network") 
	Dim objFSO: Set objFSO = CreateObject("Scripting.FileSystemObject")
	Dim objShellApp: Set objShellApp = CreateObject("Shell.Application")
	Dim dicCredentials: Set dicCredentials = CreateObject("Scripting.Dictionary")
	Dim dicSMBSources: Set dicSMBSources = CreateObject("Scripting.Dictionary")
	Dim dicBITSSources: Set dicBITSSources = CreateObject("Scripting.Dictionary")
	Dim objNameTranslate:	Set objNameTranslate = CreateObject("NameTranslate")

	Dim myComputerName: myComputerName = objNetwork.ComputerName
	Dim myUserName: myUserName = objNetwork.UserDomain & "\" & objNetwork.UserName
	Dim localWindirTempPath: localWindirTempPath = objShell.ExpandEnvironmentStrings("%WinDir%") & "\TEMP"
	Dim localTempPath: localTempPath = objShell.ExpandEnvironmentStrings("%TEMP%")
	Dim objLocalWMIRegistry: Set objLocalWMIRegistry = GetObject("winmgmts:{impersonationLevel=Impersonate}!\\.\root\default:StdRegProv")
	Dim logFileName
	Dim start, finish
	Dim sourceFilePath, destinationFilePath, temporaryFilePath
	Dim strLocalScriptFilePath, strLocalBatchFilePath
	Dim objOutputLOG
	Dim lastLogFile
	Dim objConfigFile
	Dim objExcel, objSpread
	Dim IHaveVistaOrAbove
	Dim objWMIService, objWMIProcess, objWMIRegistry
	Dim strWinPath, strOSVersion, strMemberDomain, notXP, arrWinPath, is64bit, strSystem32, freeSpaceOnDisk
	Dim shutdownFlag
	Dim currentTimezoneBias, currentDSTState, currentDaylightBias
	Dim correctClientVersion
	Dim adminGroupMember
	Dim ccmsetupPath
	Dim strCCRFolderPath
	Dim scriptPath
	Dim selectedActionID
	Dim selectedActionText
	Dim sourceFile
	Dim currentComputer
	Dim nextRow
	Dim useExcelSheet: useExcelSheet = False
	Dim configFileIncluded: configFileIncluded = False
	Dim inventoryResync: inventoryResync = False
	Dim integratedAuth: integratedAuth = True
	Dim serviceWasStopped: serviceWasStopped = False
	Dim isFullHealthCheck: isFullHealthCheck = False
	Dim sendCCRToSite: sendCCRToSite = False
	Dim userIsLoggedOn: userIsLoggedOn = False
	Dim checkUser: checkUser = False
	Dim actionFinished: actionFinished = True
	Dim isScheduleID
	Dim isHealthCheck
	Dim lastCheckResult
	Dim statTotal
	Dim statHealthy
	Dim statUnhealthy
	Dim statSuccess
	Dim statFailed
	Dim statWMIerror
	Dim statNoAgent
	Dim statOffline, statOnline
	Dim currentNumber
	Dim strSiteServer
	Dim strSiteCode
	Dim rebootPending
	Dim ccmsetupCustomParameters
	Dim strUsername, strPassword
	Dim assignedSiteCode, newCacheSize, runCommandline, advertisementID, strOldRerunBehavior, KBArticle
	Dim loggedOnUserName, loggedOnUserSID
	Dim localMP
	Dim strFSPServer, strSLPServer
	Dim advAvailable
	Dim arrComputers
	Dim arrUnhealthyComputers()
	Dim arrOfflineComputers()
	Dim arrOnlineComputers()
	Dim processStopped: processStopped = False
	Dim isAuthRequired: isAuthRequired = True
	Dim lastCredentialWorked: lastCredentialWorked = False
	Dim disableDomainCredsEnabled: disableDomainCredsEnabled = False
	Dim WOLExists: WOLExists = False
	Dim clientConfigurationReady: clientConfigurationReady = False
	Dim objSiteServerConnection
	
	Dim processing: processing = False
	Dim actionTimer

'-----------------------------------------------------------
	' ~~~~~~~~~~~~~~
	' Actions done while loading
	Sub Window_Onload()
	
		' Align and resize window...
		alignWindow()
		
		'Get Script Location
		scriptPath = objShell.CurrentDirectory

		' Get current logged on user name
		usernameText.innerText = myUserName
		
		' Get current timezone bias in administrator's computer
		currentTimezoneBias = getTimezoneBias()
		currentDSTState = getDSTState()
		
		' Get OS of administrator's computer
		getMyOS()
		
		' Initialize configuration file
		If objFSO.FileExists(ScriptPath & "\" & configFileName) Then
			configFileIncluded = True
		End If
		
		' Check if wol.exe exists in same folder as HTA
		If objFSO.FileExists(scriptPath & "\wol.exe") Then
			WOLExists = True
		End If
		
		If configFileIncluded Then
			
			' Check ping test setting
			enablePingTest = readConfig("enablePingTest")
			
			' Check offline computers setting
			saveOfflineComputers = readConfig("saveOfflineComputers")
			
			' Check online computers setting
			saveOnlineComputers = readConfig("saveOnlineComputers")			
			
			' Check promptUserCheck setting
			promptUserCheck = readConfig("promptUserCheck")
			
			' Check autoInstallClientWhenMissing setting
			autoInstallClientWhenMissing = readConfig("autoInstallClientWhenMissing")
			
			' Check if alternate credentials have been defined in configuration file...
			fUsername.value = readConfig("username")
			fPassword.value = readConfig("password")
			
			If Len(fUsername.value) > 0 Then
				addCredentials()
				integratedAuth = False
				selectedAuthentication(1).Checked = True
				userinfoContainer.style.display = ""
				Call ChangeAuthentication()
			End If
			
			' Check the first data row setting for Excel files...
			firstDataRowInExcelC = readConfig("firstDataRowInExcel")
			If isNumeric(firstDataRowInExcelC) Then
				firstDataRowInExcel = firstDataRowInExcelC
			End If
			
			' Check log file formatting
			enableTrace32Formatting = readConfig("enableTrace32Formatting")
			' Check log history setting
			keepLogHistory = readConfig("keepLogHistory")
			
		End If
		
		' Initialize log file
		On Error Resume Next
		If keepLogHistory Then
			logFileName = FmtDate(Now) & ".log"
			lastLogFile = ScriptPath & "\" & logFileName
			Set objOutputLOG = objFSO.OpenTextFile(lastLogFile, ForAppending, True)
		Else
			logFileName = "LastLog.log"
			lastLogFile = ScriptPath & "\" & logFileName
			Set objOutputLOG = objFSO.OpenTextFile(lastLogFile, ForWriting, True)
		End If
		If err.number <> 0 Then
			MsgBox "Problem using the log file """ & logFileName & """!" & vbCrLf & "Make sure file is not already in use.", vbCritical
		End If
		err.Clear
		On Error Goto 0

		' Check if local domain credential caching is allowed
		disableDomainCredsValue = getDisableDomainCredsValue()
		If Len(disableDomainCredsValue) > 0 Then
			If disableDomainCredsValue = 1 Then
				disableDomainCredsEnabled = True
				
				t = "Domain credential caching is not currently allowed on this computer. Alternate credentials can not be used." & vbCrLf & vbCrLf & _
						"Possibly a group policy setting ""Network access: Do not allow storage of credentials or .NET Passports for network authentication"" is enabled." & vbCrLf & vbCrLf & _
						"Do you want to force a registry tweak to temporarily bypass this restriction? This will require administrative rights. The default setting is restored on next group policy update."

				result = MsgBox(t,  vbYesNo + vbQuestion)
				If result = vbYes Then
					' Try to work around the restricted local caching of domain credentials
					prepareDisableDomainCredsWorkaround()
					doDisableDomainCredsWorkaround()
					Log """disableDomainCreds"" value set to 0 in Windows Registry.", True, "COMMON", 1
				End If
			End If
		Else
			MsgBox "Failed to determine if domain credential caching is allowed on this computer! Using alternate credentials may not be possible.", vbCritical
		End If
		
		' Check if version updates should be checked on startup
		If readConfig("checkUpdates") Then
			checkReleasesRSS()
		End If
		
		textlist.focus()
		
	End Sub
	
	Sub Window_OnUnload()
		On Error Resume Next
		objOutputLOG.Close
		Set objOutputLOG = Nothing
		
	 	' If log file is 0 KB, delete it		
		Set objLogFile = objFSO.GetFile(lastLogFile)
		If objLogFile.Size = 0 Then
			objLogFile.Delete
		End If
		Set objLogFile = Nothing

		Set objConfigFile = Nothing
		Set objFSO = Nothing
		Set objNetwork = Nothing
		Set objShell = nothing
	End Sub

	' ~~~~~~~~~~~~~~
	' Resize and align the window
	Sub alignWindow()
		window.resizeTo 750,725
		window.moveTo (screen.width - document.body.clientwidth)/2, (screen.height - document.body.clientheight)/2
	End Sub

	' ~~~~~~~~~~~~~~
	' Monitor progress and update the progress text	
	Sub updateStatus(v)
		Select Case v
			Case 0 ' Stop progress
				processing = False
				window.clearInterval(actionTimer)
				actionTimer = ""
				progressText.innerHTML = ""
				startButton.style.display = ""
				stopButton.style.display = "none"
				updateStatus(2)
			Case 1 ' Start progress
				processing = True
				actionTimer = window.setInterval("updateStatus(2)", 500)
				progressText.innerHTML = "Initializing..."
				progressText.style.display = ""
				startButton.style.display = "none"
				stopButton.style.display = ""
				updateStatus(2)
			Case 2 ' Update progress
				If processing Then
					Sleep 0
					If statTotal > 0 Then
						donePercentage = Round(currentNumber / statTotal * 100, 2)
						progressText.innerText = "Processing computer "&UCase(currentComputer)&"... " & currentNumber & " out of " & statTotal & " ("&donePercentage&" %) done."
					End If
				Else
					If processStopped Then
						statTotal = currentNumber
					End If
					
					If statSuccess > 0 Then
						successPercentage = Round(statSuccess / statTotal * 100, 2)
					Else
						successPercentage = statSuccess
					End If
					If processStopped Then
						txt = "Stopped! Processed " & statTotal & " computers. "
					Else
						If actionFinished Then
							txt = "Done! Processed " & statTotal & " computers. "
						Else
							txt = ""
						End If
					End If
					If actionFinished Then
						If successPercentage > 0 Then
							txt = txt & "Success rate: " & successPercentage & " %"
						Else
							txt = txt & "<font color=red>Success rate: " & successPercentage & " %</font>"
						End If
					End If
					progressText.innerHTML = txt
				End If
		End Select
	End Sub

	' ~~~~~~~~~~~~~~
	' Initiate selected action on computer list. Find out the list type (TXT, CSV, XLS, textbox) and then process all rows.
	Sub initiateAction()
		
		' Enforce some important default values
		isAuthRequired = True
		processStopped = False
		actionFinished = False
		
		If Len(selectedActionID) = 0 Then
			MsgBox "Please select a client action that you want to run on computers!", vbExclamation
			Exit Sub
		Else
			If CBool(Instr(selectedActionID,"{")) Then
				isScheduleID = True
			Else
				isScheduleID = False
			End If
		End If
		
		' Check if cmdkey.exe exists in same folder as HTA
		If Not objFSO.FileExists(scriptPath & "\cmdkey.exe") Then
			If Not integratedAuth AND Not IHaveVistaOrAbove Then
				MsgBox "cmdkey.exe not found in HTA folder! This is required for using alternate credentials when running this tool on XP.", vbCritical
				Exit Sub
			End If
		End If		
		
		' Is it a health check action?
		If CBool(Instr(selectedActionID,"check")) OR CBool(Instr(selectedActionID,"fix")) Then
			isHealthCheck = True
			' Initiate array of unhealthy computers
			ReDim Preserve arrUnhealthyComputers(0)
		Else
			isHealthCheck = False
		End If
		' Initiate array of offline computers
		ReDim Preserve arrOfflineComputers(0)
		' Initiate array of online computers
		ReDim Preserve arrOnlineComputers(0)		
		
		' Preliminary checks for some actions...
		Select Case selectedActionID
			Case "installClient"
				If Not clientConfigurationReady Then
					ccmsetupComment.innerHTML = ""
					showClientSetupGUI()					
					Exit Sub
				Else
					' Configuration has been submitted
					'MsgBox "ccmsetupPath: " & ccmsetupPath & vbCrLf & vbCrLf & "ccmsetupCustomParameters: " & ccmsetupCustomParameters
					clientConfigurationReady = False
				End If
			Case "{00000000-0000-0000-0000-000000000001}"
				result = MsgBox("Do you want to initiate FULL hardware inventory resync?", vbYesNoCancel + vbQuestion, "")
				Select Case result
					Case vbYes
						inventoryResync = True
					Case vbCancel
						Exit Sub
				End Select
			Case "{00000000-0000-0000-0000-000000000002}"
				result = MsgBox("Do you want to initiate FULL software inventory resync?", vbYesNoCancel + vbQuestion, "")
				Select Case result
					Case vbYes
						inventoryResync = True
					Case vbCancel
						Exit Sub
				End Select
			Case "reassignSitecode"
				assignedSiteCode = InputBox("Enter the site code where clients will be assigned to:", "Site Code","")
				If isEmpty(assignedSiteCode) Then
					Exit Sub
				End If
				If Len(assignedSiteCode) <> 3 Then
					MsgBox "This is not correct site code!", vbCritical
					Exit Sub
				End If
			Case "changeCache"
				newCacheSize = InputBox("Enter the new cache size in MB:", "Cache Size", newCacheSize)
				If isEmpty(newCacheSize) Then
					Exit Sub
				End If
				If Not isNumeric(newCacheSize) OR newCacheSize = "" Then
					MsgBox "Correct cache size is required for this action!", vbCritical
					Exit Sub
				End If
				If Not prepareChangeCacheSize() Then
					Exit Sub
				End If
			Case "changeFSP"
				strFSPServer = UCase(InputBox("Please enter the name of FSP server:", "Specify FSP server", strFSPserver))
				If isEmpty(strFSPServer) Then
					Exit Sub
				End If				
				If Len(strFSPServer) = 0 Then
					MsgBox "This action requires FSP server name!", vbCritical
					Exit Sub
				End If
			Case "changeSLP"
				strSLPServer = UCase(InputBox("Please enter the name of SLP server:", "Specify SLP server", strSLPServer))
				If isEmpty(strSLPServer) Then
					Exit Sub
				End If				
				If Len(strSLPServer) = 0 Then
					MsgBox "This action requires SLP server name!", vbCritical
					Exit Sub
				End If			
			Case "createCCR"
				If Not prepareCreateCCR() Then
					Exit Sub
				End If
				result = MsgBox("Do you want to send the CCR files to site server as well?", vbYesNo + vbQuestion + DefaultButton1)
				If result = vbYes Then
					sendCCRToSite = True
					getOut = False
					While Not getOut
						strSiteServer = InputBox("Enter the name of the SCCM site server:", "", strSiteServer)
						If isEmpty(strSiteServer) Then
							' User cancelled the input form
							Exit Sub
						End If
						If Len(strSiteServer) > 0 Then
							getOut = True
						End If						
					Wend
					getOut = False
					While Not getOut
						strSiteCode = InputBox("Enter site code:", "", strSiteCode)
						If isEmpty(strSiteCode) Then
							' User cancelled the input form
							Exit Sub
						End If
						If Len(strSiteCode) <> 3 Then
							MsgBox "Site code must be 3 characters!", vbCritical
						Else
							getOut = True
						End If						
					Wend
					
					If Len(strSiteServer) = 0 OR Len(strSiteCode) = 0 Then
						MsgBox "Site server name and site code were not specified!", vbCritical
						Exit Sub
					End If
				Else
					sendCCRToSite = False
				End If
			Case "newGUID"
				If Not prepareChangeGUID() Then
					Exit Sub
				End If
			Case "queryAdvertisement"
				advertisementID = UCase(InputBox("Specify either advertisement ID or part of package name or program name:", "Specify advertisement", advertisementID))
				If isEmpty(advertisementID) Then
					Exit Sub
				End If
				If Len(advertisementID) = 0 Then
					MsgBox "No advertisement ID or keyword was specified!", vbCritical
					Exit Sub
				End If
			Case "rerunAdvertisement"
				advertisementID = UCase(InputBox("Enter the advertisement ID:", "Advertisement ID", advertisementID))
				If isEmpty(advertisementID) Then
					Exit Sub
				End If
				If Len(advertisementID) = 0 Then
					MsgBox "No advertisement ID was specified!", vbCritical
					Exit Sub
				End If
				If Len(advertisementID) <> 8 Then
					MsgBox "Incorrect advertisement ID!", vbCritical
					Exit Sub
				End If
			Case "rerunUserAdvertisement"
				advertisementID = UCase(InputBox("Enter the advertisement ID:", "Advertisement ID", advertisementID))
				If isEmpty(advertisementID) Then
					Exit Sub
				End If				
				If Len(advertisementID) = 0 Then
					MsgBox "No advertisement ID was specified!", vbCritical
					Exit Sub
				End If
				If Len(advertisementID) <> 8 Then
					MsgBox "Incorrect advertisement ID!", vbCritical
					Exit Sub
				End If
			Case "patchStatus"
				KBArticle = InputBox("Enter KB article number"&vbCrLf&"(eg. KBXXXXXX or XXXXXX)", "KB Article", KBArticle)
				If Len(KBArticle) < 5 Then
					MsgBox "KB article was not specified!", vbCritical
					Exit Sub
				End If
				If IsNumeric(KBArticle) Then
					KBArticle = "KB" & KBArticle
				Else
					If Left(UCase(KBArticle), 2) = "KB" Then
						KBArticle = UCase(KBArticle)
					Else
						MsgBox "This is not correct KB article number!"&vbCrLf&"Must be like KBXXXXXX or XXXXXX.", vbCritical
						Exit Sub
					End If
				End If
			Case "runCommand"
				runCommandline = InputBox("Enter the command-line that is executed remotely on computer(s):", "Command line", runCommandline)
				If isEmpty(runCommandline) Then
					Exit Sub
				End If
				If Len(runCommandline) = 0 Then
					MsgBox "No command line was specified!", vbCritical
					Exit Sub
				End If
			Case "wakeOnLAN"
				If WOLExists Then
					If Not isObject(objSiteServerConnection) Then
						result = MsgBox("Wake-Up packet can only be sent to MAC addresses. If you run this action on list that contains computer names not just MAC addresses, you need to connect to SCCM site server to resolve names to MAC addresses." & vbCrLf & vbCrLf & "Do you want to connect to SCCM site server?"&vbCrLf, vbYesNoCancel + vbExclamation, "")
						Select Case result
							Case vbYes
								If Not connectToSCCM() Then
									Exit Sub
								End If
							Case vbCancel
								Exit Sub
						End Select
					End If
				Else
					MsgBox "WOL.EXE was not found! Wake On LAN action requires that!", vbCritical
					Exit Sub
				End If
			Case "resetSecurity"
				result = MsgBox("Are you sure you want to reset security settings on all computers in the list?", vbQuestion + vbYesNo + vbDefaultButton2)
				If result <> vbYes Then
					Exit Sub
				End If
			Case "copyFile"
				Dim okToProceed: okToProceed = False
				Do While Not okToProceed
					sourceFilePath = InputBox("Enter full path to the file being copied:", "Source file", sourceFilePath)
					If Len(sourceFilePath) > 0 Then
						If Not objFSO.FileExists(sourceFilePath) Then
							result = MsgBox("Could not find file: "&vbCrLf&sourceFilePath&"!", vbCritical + vbRetryCancel)
							If result = vbCancel Then
								Exit Sub
							End If
						Else
							okToProceed = True
						End If
					Else
						Exit Sub
					End If
				Loop
				
				okToProceed = False
				Do While Not okToProceed
					destinationFilePath = InputBox("Enter local path on remote computers where "&sourceFilePath&" will be copied:", "Destination path", destinationFilePath)
					If Len(destinationFilePath) > 0 Then
						If Not CBool(Instr(destinationFilePath,":")) OR (Len(destinationFilePath) < 2) Then
							result = MsgBox("This is not a valid path!", vbCritical + vbRetryCancel)
							If result = vbCancel Then
								Exit Sub
							End If
						Else
							okToProceed = True
						End If
					Else
						Exit Sub
					End If
				Loop
				
				' Make sure the destination path is standardized
				If Right(destinationFilePath, 1) <> "\" Then
					destinationFilePath = destinationFilePath & "\"
				End If
				
				If Not prepareCopyFile() Then
					Exit Sub
				End If
			Case "logoffUser"
				result = MsgBox("Are you sure you want to log off users on all computers in the list?", vbYesNo + vbQuestion, "")
				If result <> vbYes Then
					Exit Sub
				End If
				result = MsgBox("Do you want to force the log off?", vbYesNo + vbQuestion, "")
				If result = vbYes Then
					shutdownFlag = 4
				Else
					shutdownFlag = 0
				End If
			Case "restartComputer"
				result = MsgBox("Are you sure you want to restart all computers in the list?", vbYesNo + vbQuestion, "")
				If result <> vbYes Then
					Exit Sub
				End If
				If Not checkUser Then
					result = MsgBox("Do you want to force the restart?", vbYesNo + vbQuestion, "")
					If result = vbYes Then
						shutdownFlag = 6
					Else
						shutdownFlag = 2
					End If
				Else
					shutdownFlag = 6
				End If
			Case "shutdownComputer"
				result = MsgBox("Are you sure you want to shut down all computers in the list?", vbYesNo + vbQuestion, "")
				If result <> vbYes Then
					Exit Sub
				End If
				If Not checkUser Then
					result = MsgBox("Do you want to force the shut down?", vbYesNo + vbQuestion, "")
					If result = vbYes Then
						shutdownFlag = 5
					Else
						shutdownFlag = 1
					End If
				Else
					shutdownFlag = 5
				End If
			Case "poweroffComputer"
				result = MsgBox("Are you sure you want to power off all computers in the list?", vbYesNo + vbQuestion, "")
				If result <> vbYes Then
					Exit Sub
				End If
				If Not checkUser Then
					result = MsgBox("Do you want to force the power off?", vbYesNo + vbQuestion, "")
					If result = vbYes Then
						shutdownFlag = 12
					Else
						shutdownFlag = 8
					End If
				Else
					shutdownFlag = 12
				End If
			Case "checkLocalAdmins"
				adminGroupMember = InputBox("Enter the account name that should be member of local administrators group on workstation(s):", "Account check", adminGroupMember)
				If isEmpty(adminGroupMember) Then
					Exit Sub
				End If
				If adminGroupMember = "" Then
					Exit Sub
				End If
			Case "fixWMI"
				If Not prepareFixWMI() Then
					Exit Sub
				End If
			Case "fixLocalAdmins"
				adminGroupMember = InputBox("Enter the account name that should be member of local administrators group on workstation(s):", "Account check", adminGroupMember)
				If isEmpty(adminGroupMember) Then
					Exit Sub
				End If
				If adminGroupMember <> "" Then
					Exit Sub
				End If
			Case "fixAssignedSite"
				If Not prepareCheckAssignedSite() Then
					Exit Sub
				End If
			Case "checkClientVersion"
				evaluateCorrectClientVersion()
				
				If isEmpty(correctClientVersion) Then
					Exit Sub
				End If
				If correctClientVersion = "" Then
					MsgBox "Client version not specified. Nothing to compare!", vbCritical
					Exit Sub
				End If
			Case "fixClientVersion"
				evaluateCorrectClientVersion()
				
				If isEmpty(correctClientVersion) Then
					Exit Sub
				End If
				If correctClientVersion = "" Then
					MsgBox "Client version not specified. Nothing to compare!", vbCritical
					Exit Sub
				End If
			
				If autoInstallClientWhenMissing Then
					If Not clientConfigurationReady Then
						ccmsetupComment.innerHTML = "autoInstallClientWhenMissing=YES. You need to specify client installation parameters to automatically install newer version of SCCM client when needed."
						showClientSetupGUI()
						Exit Sub
					Else
						clientConfigurationReady = False
					End If
				End If	
			Case "checkHealth"
				evaluateCorrectClientVersion()
				
				If isEmpty(correctClientVersion) Then
					Exit Sub
				End If
				If correctClientVersion = "" Then
					MsgBox "Client version not specified. Can't check client version!", vbCritical
					Exit Sub
				End If
			Case "fixHealth"
				evaluateCorrectClientVersion()
			
				If autoInstallClientWhenMissing Then
					If Not clientConfigurationReady Then
						ccmsetupComment.innerHTML = "autoInstallClientWhenMissing=YES. You need to specify client installation parameters to automatically install missing SCCM clients."
						showClientSetupGUI()
						Exit Sub
					Else
						clientConfigurationReady = False
					End If
				End If
			Case "pingClient"
				isAuthRequired = False
		End Select
		
		' promptUserCheck enabled
		If checkUser Then
			result = MsgBox("Do you want to perform this action only when user is NOT logged on?", vbYesNo + vbQuestion + vbDefaultButton1, "")
			If result = vbNo Then
				checkUser = False
			End If
		End If
		
		' Initialize counters
		statTotal = 0
		statSuccess = 0
		statFailed = 0
		statWMIError = 0
		statNoAgent = 0
		statOffline = 0
		statOnline = 0
		statHealthy = 0
		statUnhealthy = 0
		currentNumber = 0
		
		start = Now()
		updateStatus(1)
		processing = True
		logTextArea.value = ""
		Log "", False, "COMMON", 1
		Log "---- Logging started " & Now() & " ----", True, "COMMON", 1
		Log "Running action """ & selectedActionText & """ on computers...", True, "COMMON", 1
		
		sourceFile = fileloaderform.fileloader.value
		
		If sourceFile <> "" Then
			' Identify list file extension
			strFileExtension = Mid(sourceFile,InstrRev(sourceFile,".")+1,Len(sourceFile))
			Dim arrComputersInFile()
			
			If CBool(Instr(strFileExtension,"xls")) OR CBool(Instr(strFileExtension,"xlsx")) Then
				' Use Excel
				useExcelSheet = True
    		If configFileIncluded Then
    			updateSourceExcelFile = readConfig("updateSourceExcelFile")
    		End If
    		
'				On Error Resume Next
				Set objExcel = CreateObject("Excel.Application")
				Set objSpread = objExcel.Workbooks.Open(sourceFile)
				If Err.Number <> 0 Then
					updateStatus(0)
					Log "---- Error occurred. Logging finished " & Now() & " ----", True, "COMMON", 3
					Log "", True, "", 1
					MsgBox "Failed to open Excel worksheet! Check that you have Microsoft Office Excel installed.", vbCritical
					Exit Sub
				End If
				intRow = firstDataRowInExcel
				' First count the total number of computers in list
				Do Until objExcel.Cells(intRow,1).Value = ""
					ReDim Preserve arrComputersInFile(currentNumber)
					currentComputer = Trim(objExcel.Cells(intRow,1).Value)
					arrComputersInFile(currentNumber) = currentComputer
					currentNumber = currentNumber + 1
					intRow = intRow + 1
				Loop
				currentNumber = 0
				statTotal = intRow - firstDataRowInExcel
				arrComputers = removeEmptyElements(arrComputersInFile)
				
				If statTotal > 0 Then
					' Now process computers one by one
					SetTimeout "enumerateExcelTargets(firstDataRowInExcel)", 10
				Else
					objExcel.Quit
					updateStatus(0)
					Log "---- No computers found " & Now() & "----", True, "COMMON", 1
					MsgBox "No computers were found in Excel file!", vbCritical
					Exit Sub
				End If
				
			ElseIf CBool(Instr(strFileExtension,"csv")) Then
				' Use CSV file
				useExcelSheet = False
				Set objCSVfile = objFSO.OpenTextFile(sourceFile)
				' First count the total number of computers in list
				Do while Not objCSVFile.AtEndOfStream
					currentLine = objCSVfile.ReadLine
					If currentLine <> "" Then
						If CBool(Instr(currentLine,",")) Then
							arrStr = Split(currentLine,",")
							If arrStr(0) <> "" AND LCase(arrStr(0)) <> "name" Then
								ReDim Preserve arrComputersInFile(statTotal)
								currentComputer = Trim(arrStr(0))
								arrComputersInFile(statTotal) = currentComputer
								statTotal = statTotal + 1
							End If
						Else
							updateStatus(0)
							Log "---- Error occurred. Logging finished " & Now() & " ----", True, "COMMON", 3
							Log "", True, "", 1
							MsgBox "Incorrect CSV file!", vbCritical
							objCSVfile.Close
							Exit Sub
						End If
					End If
				Loop
				objCSVfile.Close
				arrComputers = removeEmptyElements(arrComputersInFile)
				
				If statTotal > 0 Then
					' Now process computers one by one
					SetTimeout "enumerateTargets(0)", 10
				Else
					updateStatus(0)
					Log "---- No computers found " & Now() & "----", True, "COMMON", 1
					MsgBox "No computers were found in CSV file!", vbCritical
					Exit Sub			
				End If
			ElseIf CBool(Instr(strFileExtension,"txt")) Then
				' Use text file
				useExcelSheet = False
				Set objTextfile = objFSO.OpenTextFile(sourceFile)
				' First count the total number of computers in list
				Do Until objTextfile.AtEndOfStream
					strNextLine = objTextFile.Readline
					If strNextLine <> "" Then
						ReDim Preserve arrComputersInFile(statTotal)
						arrComputersInFile(statTotal) = UCase(strNextLine)
						statTotal = statTotal + 1
					End If
				Loop
				objTextFile.Close
				arrComputers = removeEmptyElements(arrComputersInFile)
				
				If statTotal > 0 Then
					' Now process computers one by one
					SetTimeout "enumerateTargets(0)", 10
				Else
					objTextfile.Close
					updateStatus(0)
					Log "---- No computers found " & Now() & "----", True, "COMMON", 1
					MsgBox "No computers were found in TXT file!", vbCritical
					Exit Sub
				End If
			Else
				MsgBox "Files with extension " & UCase(strFileExtension) & " are not supported!", vbCritical
				fileloaderform.reset()
				Exit Sub
			End If
		Else
			' Use computer list in textarea
			useExcelSheet = False
			arrComputers = Split(textlist.value, vbCrLf)
			arrComputers = removeEmptyElements(arrComputers)
			
			' First count the total number of computers in list
			For i = 0 To UBound(arrComputers)
				If arrComputers(i) <> "" Then
					statTotal = statTotal + 1
				End If
			Next

			If statTotal > 0 Then				
				' Now process computers one by one
				SetTimeout "enumerateTargets(0)", 10
			Else
				updateStatus(0)
				Log "---- No computers found " & Now() & "----", True, "COMMON", 1
				MsgBox "No computers were found in list!" & vbCrLf & "Select a file containing the list or enter the computer names in the text area on the left.", vbCritical
				Exit Sub
			End If
		End If
				
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Loop through all targets
	Sub enumerateTargets(nr)
		currentNumber = nr
		Sleep 0
		If arrComputers(nr) <> "" Then
			currentComputer = Trim(arrComputers(nr))
			currentNumber = currentNumber + 1
			initiateRemoteConnection()
		End If
		
		If currentNumber < (UBound(arrComputers) + 1) Then
			If processing Then
				' Not done yet. Call the sub again on a timer.
				SetTimeout "enumerateTargets(currentNumber)", 1
			Else
				processStopped = True
				endProcess()
			End If
		Else
			endProcess()
		End If
		
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Loop through all targets in Excel worksheet	
	Sub enumerateExcelTargets(nr)
		currentNumber = nr - firstDataRowInExcel + 1
		nextRow = nr + 1
		Sleep 0
		If objExcel.Cells(nr,1).Value <> "" Then
			currentComputer = Trim(objExcel.Cells(nr,1).Value)
			strResult = initiateRemoteConnection()
			If processing Then
				If updateSourceExcelFile Then
					arrResult = Split(strResult,",")
					returnText = arrResult(0)
					returnCode = arrResult(1)
					objExcel.Cells(nr,2).Value = returnText
					If returnCode = 1 Then
						' Success
						objExcel.Cells(nr, 2).Font.ColorIndex = 1
					Else
						' Failure
						objExcel.Cells(nr, 2).Font.ColorIndex = 3
					End If
				End If
				' Not done yet. Call the sub again on a timer.
				SetTimeout "enumerateExcelTargets(nextRow)", 1
			Else
				processStopped = True
				If updateSourceExcelFile Then
					objExcel.Workbooks(1).Save
					objExcel.Workbooks(1).Close
				End If
				objExcel.Quit
				Set objExcel = Nothing
				endProcess()
			End If			
		Else
			If updateSourceExcelFile Then
				objExcel.Workbooks(1).Save
				objExcel.Workbooks(1).Close
			End If
			objExcel.Quit
			Set objExcel = Nothing
			endProcess()
		End If

	End Sub
	
	' ~~~~~~~~~~~~~~
	' Wrap up the process and calculate results	
	Sub endProcess()
		' Call cleanup tasks
		doFinalize()
		
		If processStopped Then
			statTotal = currentNumber
		End If
		
		' Write offline computers to file
		statOffline = UBound(arrOfflineComputers)
		If saveOfflineComputers Then
			saveOfflineComputersInFile()
		End If
		
		' Write online computer to file
		statOnline = UBound(arrOnlineComputers)
		If saveOnlineComputers Then
			saveOnlineComputersInFile()
		End If
		
		finish = Now()
		If isHealthCheck Then
			If isArray(arrUnhealthyComputers) Then
				statUnhealthy = UBound(arrUnhealthyComputers)
				statHealthy = (statTotal - statOffline) - statUnhealthy
			End If
		End If
		Log "----------------------------------------", True, "COMMON", 1
		If processStopped Then
			Log "Action stopped prematurely after " & timeDifference(start,finish), True, "COMMON", 2
			Log "Total computers processed: " & statTotal, True, "COMMON", 1
		Else
			Log "Action completed in " & timeDifference(start,finish), True, "COMMON", 1
			Log "Total computers in the list: " & statTotal, True, "COMMON", 1
		End If
		Log "Total online/offline: " & (statTotal - statOffline) & " / " & statOffline, True, "COMMON", 1
		If isHealthCheck Then
			Log "Total healthy/not healthy: " & statHealthy & " / " & statUnhealthy, True, "COMMON", 1
		End If
		Log "Total failed: " & statFailed + statOffline + statWMIerror + statNoAgent, True, "COMMON", 1
		If statWMIerror > 0 OR statNoAgent > 0 Then
			Log "Total WMI failures: " & statWMIerror & ", total without SMS Agent Host: " & statNoAgent, True, "COMMON", 1
		End If
		Log "---- Logging finished " & Now() & " ----", True, "COMMON", 1
		Log "", True, "", 1
		
		updateStatus(0)
		
		actionFinished = True
		
		If isHealthCheck AND (statUnhealthy > 0) Then
			initUnhealthyList()
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Show the form to configure SCCM client setup parameters
	Sub showClientSetupGUI()
		If configFileIncluded Then
			ccmsetupPathC = readConfig("ccmsetupPath")
			If Len(ccmsetupCustomParameters) = 0 Then
				ccmsetupCustomParameters = readConfig("ccmsetupParameters")
			End If
		End If
		
		If Len(ccmsetupPathC) > 0 Then
			clientInstallPathForm.ccmsetupPathValue.value = ccmParseCCMSETUPPath(ccmsetupPathC)
		End If

		If Len(ccmsetupCustomParameters) > 0 Then
			ccmParseParameters(ccmsetupCustomParameters)
		End If
		
		ccmSetConfiguration()
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Initiate remote connection to currently active computer
	Function InitiateRemoteConnection()
		updateStatus(2)
		Log "* Processing " & UCase(currentComputer) & "...", True, "InitiateRemoteConnection", 1
		Select Case SelectedActionID
			Case "wakeOnLAN"
			Case "createCCR"
			Case Else
				' Ping computer
				If Not Ping(currentComputer) Then
					addElementToOfflineArray currentComputer
					InitiateRemoteConnection = "Offline,0"
					Log " !! " & UCase(currentComputer) & " not responding to ping.", True, "pingClient", 3
					Exit Function
				Else
					addElementToOnlineArray currentComputer
					InitiateRemoteConnection = "Online,0"
				End If				
		End Select
		
		lastCredentialWorked = False
		
		If Not integratedAuth AND isAuthRequired AND (dicCredentials.Count > 0) Then
			If SelectedActionID <> "wakeOnLAN" AND SelectedActionID <> "pingClient" Then
				For Each element In dicCredentials
					strUsername = element
					strPassword = dicCredentials.Item(element)
					usernameText.innerText = strUsername
					If testCredentials() Then
						InitiateRemoteConnection = processComputer()
					End If
				Next
			Else
				InitiateRemoteConnection = processComputer()
			End If
		Else						
			InitiateRemoteConnection = processComputer()
		End If

	End Function
	
	' ~~~~~~~~~~~~~~
	' Determine correct SCCM client version	to compare the clients to
	Sub evaluateCorrectClientVersion()
		If configFileIncluded Then
			latestClientVersionC = readConfig("latestClientVersion")
			If Len(latestClientVersionC) > 0 Then
				latestClientVersion = latestClientVersionC
			End If
		End If
	
		If correctClientVersion <> "" Then
			defaultVersion = correctClientVersion
		Else
			defaultVersion = latestClientVersion
		End If
		
		If configFileIncluded Then
			correctClientVersion = defaultVersion
		End If
		
		If Len(defaultVersion) = 0 OR Not configFileIncluded Then
			correctClientVersion = InputBox("Enter the correct client version number to check against:", "Client Version", defaultVersion)
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Test the specified credentials on WMI connection
	Function testCredentials()
		updateStatus(2)
		
		On Error Resume Next
		If Not lastCredentialWorked Then
			Set objWbemLocator = CreateObject("WbemScripting.SWbemLocator")
			objWbemLocator.Security_.AuthenticationLevel = wbemAuthenticationLevelPkt
			Set objWMI = objWbemLocator.ConnectServer(currentComputer, NS, strUsername, strPassword)		
	
		  If Err.number = -"2147024891" Then
		    ' Access is denied
		    Log " !! Using username " & strUsername & " failed.", True, "testCredentials", 3
		    testCredentials = False
			Else
				Log " ** Using username " & strUsername & " succeeded.", True, "testCredentials", 1
				lastCredentialWorked = True
				testCredentials = True
		  End If
		  Err.Clear
		  Set objWMI = Nothing
		  Set objWbemLocator = Nothing
		End If
		
	End Function

	' ~~~~~~~~~~~~~~
	' Initiate selected action on a computer (currentComputer)	
	Function processComputer()
		updateStatus(2)
		
'		On Error Resume Next
		Set objWMIService = Nothing
		Set objWMIProcess = Nothing
		Set objWMIRegistry = Nothing
		
		strComputer = currentComputer
    
    ' Handle checkUser condition
    If checkUser Then
			If checkLoggedOnUser(strComputer) Then
				processComputer = "In_Use,0"
				Exit Function
			End If
    End If
    
    ' Initiate specific actions here...
		Select Case selectedActionID
			
			Case "clientLogFolder"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	If openClientFolder(strComputer, 1) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully opened SCCM client logs folder on " & UCase(strComputer) & ".", True, "openClientFolder", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
	    Case "clientSetupFolder"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	If openClientFolder(strComputer, 2) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully opened SCCM client setup folder on " & UCase(strComputer) & ".", True, "openClientFolder", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
	    Case "getMP"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If actionGetMP(strComputer) Then
					statSuccess = statSuccess + 1
					processComputer = localMP & ",1"
				Else
					processComputer = "Failed,0"
				End If
			Case "restartService"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If doServiceAction("ccmexec", "restart", strComputer, false, false, false, true, 30) Then
					statSuccess = statSuccess + 1
					processComputer = "Success,1"
					Log " ** Successfully restarted SMS Agent Host service on " & UCase(strComputer) & "!", True, "restartService", 1
				Else
					processComputer = "Failed,0"
				End If
	    Case "repairClient" ' Added in v0.2
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If 
				If Not verifySMSService(strComputer) Then
					processComputer = "ERR_SERVICE,0"
					Exit Function
				End If	    
	    	If actionRepairClient(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully scheduled SCCM client repair on " & UCase(strComputer) & "!", True, "repairClient", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
	    Case "resetPolicies" ' Added in v0.2
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If Not verifySMSService(strComputer) Then
					processComputer = "ERR_SERVICE,0"
					Exit Function
				End If	    
	    	If actionResetPolicies(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully initiated reset of SCCM client policies on " & UCase(strComputer) & "!", True, "resetPolicies", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
	    Case "uninstallClient"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If Not verifySMSService(strComputer) Then
					processComputer = "ERR_SERVICE,0"
					Exit Function
				End If	    
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	
				' Check configuration file data
				Call parseConfig("uninstall")
	    	
	    	If actionUninstallClient(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully scheduled SCCM client uninstall on " & UCase(strComputer) & "!", True, "uninstallClient", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
	    Case "newGUID"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If Not verifySMSService(strComputer) Then
					processComputer = "ERR_SERVICE,0"
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	If actionNewGUID(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully scheduled GUID change on " & UCase(strComputer) & "!", True, "newGUID", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
			Case "deleteRootKey"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If actionDeleteRootKey(strComputer, True) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully removed trusted root key on " & UCase(strComputer) & "!", True, "deleteRootKey", 1					
	    	Else
	    		processComputer = "Failed,0"
				End If
			Case "deleteCert"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If Not verifySMSService(strComputer) Then
					processComputer = "ERR_SERVICE,0"
					Exit Function
				End If
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If	    	
	    	If actionDeleteCert(strComputer, True) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully removed SCCM certificates from " & UCase(strComputer) & "!", True, "deleteCert", 1
	    	Else
	    		processComputer = "Failed,0" 		
	    	End If
	    Case "installClient"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
	    	If actionInstallClient(strComputer) Then
				  statSuccess = statSuccess + 1
				  processComputer = "Success,1"
				  Log " ** Successfully scheduled SCCM client install on " & UCase(strComputer) & "!", True, "installClient", 1
				Else
					processComputer = "Failed,0"
	    	End If
	    Case "reassignSitecode"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If actionReassignSiteCode(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully assigned " & UCase(strComputer) & " to " & UCase(assignedSiteCode) & "!", True, "reassignSiteCode", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
	    Case "changeFSP"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If				
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	If actionChangeFSP(strComputer) Then
	    		processComputer = "Success,1"
	    		statSuccess = statSuccess + 1
	    		Log " ** Successfully changed FSP server name on " & UCase(strComputer) & "!", True, "changeFSP", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
	    Case "changeSLP"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If				
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	If actionChangeSLP(strComputer) Then
	    		processComputer = "Success,1"
	    		statSuccess = statSuccess + 1
	    		Log " ** Successfully changed SLP server name on " & UCase(strComputer) & "!", True, "changeSLP", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If	    	
	    Case "registerATL"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If				
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If				
				If actionRegisterATL(strComputer) Then
					statSuccess = statSuccess + 1
					processComputer = "Success,1"
					Log " ** Successfully scheduled registration of ATL.DLL on " & UCase(strComputer) & ".", True, "registerATL", 1
				Else
					processComputer = "Failed,0"
				End If
	    Case "changeCache"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	If actionChangeCacheSize(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully scheduled cache size change to " & newCacheSize & " MB on computer " & UCase(strComputer) & "!", True, "changeCache", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
	    Case "createCCR"
	    	If actionCreateCCR(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully created CCR for " & UCase(strComputer) & "!", True, "createCCR", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
	    Case "queryAdvertisement"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If	    
	    	If actionQueryAdvertisement(strComputer, False, False) Then
					statSuccess = statSuccess + 1
					If advAvailable Then
						processComputer = "Advertisement(s) available,1"
					Else
						processComputer = "Advertisement not available,0"
					End If
				Else
					processComputer = "Failed,0"
	    	End If
	    Case "queryAllAdvertisements"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If actionQueryAdvertisement(strComputer, False, True) Then
					statSuccess = statSuccess + 1
					processComputer = "Active advertisements available,1"
				Else
					processComputer = "No active advertisements,0"
				End If
			Case "queryAllUserAdvertisements"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If
				If Not actionLoggedOnUser(strComputer) Then
					processComputer = "ERR_OS,0"
					Exit Function
				End If
				If actionQueryAdvertisement(strComputer, True, True) Then
					statSuccess = statSuccess + 1
					processComputer = "Active advertisements available,1"
				Else
					processComputer = "No active advertisements,0"
				End If					
	    Case "rerunAdvertisement"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If actionRerunAdvertisement(strComputer, False) Then
					statSuccess = statSuccess + 1
					processComputer = "Success,1"
					Log " ** Successfully initiated rerun of advertisement with ID " & advertisementID & "!", True, "rerunAdvertisement", 1
				Else
					processComputer = "Failed,0"
				End If
			Case "rerunUserAdvertisement"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If				
				If Not actionLoggedOnUser(strComputer) Then
					processComputer = "ERR_OS,0"
					Exit Function
				End If
				If actionRerunAdvertisement(strComputer, True) Then
					statSuccess = statSuccess + 1
					processComputer = "Success,1"
					Log " ** Successfully initiated rerun of advertisement with ID " & advertisementID & "!", True, "rerunUserAdvertisement", 1
				Else
					processComputer = "Failed,0"
				End If
	    Case "pingClient"
	    	If Ping(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Online,1"
	    		Log " ** " & UCase(strComputer) & " is ONLINE!", True, "pingClient", 1
	    	End If
	    Case "runCommand"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If		  
	    	If actionRunCommand(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully executed remote command on computer " & UCase(strComputer) & "!", True, "runCommand", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
	    Case "wakeOnLAN"
	    	If actionWOL(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully sent wake-up packet to " & UCase(strComputer) & "!", True, "runCommand", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
	    Case "copyFile"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If	    	
				If actionCopyFile(strComputer) Then
					statSuccess = statSuccess + 1
					processComputer = "Success,1"
					Log " ** Successfully copied a file to computer " & UCase(strComputer) & "!", True, "copyFile", 1
				Else
					processComputer = "Failed,0"
				End If
	    Case "loggedOnUser"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
				If actionLoggedOnUser(strComputer) Then
					statSuccess = statSuccess + 1
					processComputer = loggedOnUserName & ",1"
				Else
					processComputer = "Failed,0"
				End If
			Case "computerOU"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	thisComputerOU = actionComputerOU(strComputer)
				If Len(thisComputerOU) > 0 Then
					statSuccess = statSuccess + 1
					processComputer = thisComputerOU & ",1"
					Log " ** " & UCase(strComputer) & " is in OU: " & thisComputerOU, True, "computerOU", 1
				Else
					statFailed = statFailed + 1
					processComputer = "Failed,0"
				End If
			Case "WSUSServer"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If				
				thisWSUSServer = actionWSUSServer(strComputer)
	    	If Len(thisWSUSServer) > 0 Then
	    		statSuccess = statSuccess + 1
	    		processComputer = thisWSUSServer & ",1"
	    		Log " ** WSUS content location on " &UCase(strComputer)& ": " & thisWSUSServer, True, "WSUSServer", 1
	    	Else
	    		statFailed = statFailed + 1
	    		processComputer = "Failed,0"
	    	End If
			Case "WUAVersion"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	thisWUAVersion = actionWUAVersion(strComputer)
	    	If Len(thisWUAVersion) > 0 Then
	    		statSuccess = statSuccess + 1
	    		processComputer = thisWUAVersion & ",1"
	    		Log " ** WUA version on " &UCase(strComputer)& ": " & thisWUAVersion, True, "WUAVersion", 1
	    	Else
	    		statFailed = statFailed + 1
	    		processComputer = "Failed,0"
	    	End If
	    Case "patchStatus"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				thisPatchStatus = actionPatchStatus(strComputer)
				If Len(thisPatchStatus) > 0 Then
					statSuccess = statSuccess + 1
					processComputer = thisPatchStatus & ",1"
				Else
					statFailed = statFailed + 1
					processComputer = "Failed,0"
				End If
	    Case "getUptime"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				thisUptime = actionGetUptime(strComputer)
				If Len(thisUptime) > 0 Then
					statSuccess = statSuccess + 1
					processComputer = thisUptime & ",1"
					Log " ** System uptime on " &UCase(strComputer)& ": " & thisUptime, True, "getUptime", 1
				Else
					statFailed = statFailed + 1
					processComputer = "Failed,0"
				End If	    	
	    Case "resetSecurity"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	If actionResetSecurity(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully initiated security settings reset on " & UCase(strComputer), True, "resetSecurity", 1
	    	Else
	    		statFailed = statFailed + 1
	    		processComputer = "Failed,0"
	    	End If					
			Case "logoffUser"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If actionRemoteShutdown(strComputer, shutdownFlag) Then
					statSuccess = statSuccess + 1
					processComputer = "Success,1"
					Log " ** Successfully scheduled user logoff on computer " & UCase(strComputer) & "!", True, "logoffUser", 1
				Else
					processComputer = "Failed,0"
				End If
			Case "restartComputer"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If actionRemoteShutdown(strComputer, shutdownFlag) Then
					statSuccess = statSuccess + 1
					processComputer = "Success,1"
					Log " ** Successfully scheduled restart on computer " & UCase(strComputer) & "!", True, "restartComputer", 1
				Else
					processComputer = "Failed,0"
				End If
			Case "shutdownComputer"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If			
				If actionRemoteShutdown(strComputer, shutdownFlag) Then
					statSuccess = statSuccess + 1
					processComputer = "Success,1"
					Log " ** Successfully scheduled shut down of computer " & UCase(strComputer) & "!", True, "shutdownComputer", 1
				Else
					processComputer = "Failed,0"
				End If
			Case "poweroffComputer"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If			
				If actionRemoteShutdown(strComputer, shutdownFlag) Then
					statSuccess = statSuccess + 1
					processComputer = "Success,1"
					Log " ** Successfully scheduled power off of computer " & UCase(strComputer) & "!", True, "poweroffComputer", 1
				Else
					processComputer = "Failed,0"
				End If
			Case "getRebootState"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If
	    	If actionGetRebootState(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		If rebootPending Then
	    			processComputer = "Reboot pending,1"
	    		Else
	    			processComputer = "Reboot not needed,1"
	    		End If
	    	Else
	    		processComputer = "Failed,0"
	    	End If				
			Case "checkWMI"
				Log " Checking WMI on " & UCase(strComputer) & "...", True, "checkWMI", 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					statUnhealthy = statUnhealthy + 1
					Exit Function
				End If
				If actionCheckWMI(strComputer) Then
					statSuccess = statSuccess + 1
					statHealthy = statHealthy + 1
					processComputer = "Healthy,1"
				Else
					addElementToUnhealthyArray strComputer
					statUnhealthy = statUnhealthy + 1
					processComputer = "Not healthy,0"
					Log "   !! WMI is not healthy on " & UCase(strComputer) & "!", True, "checkWMI", 1
				End If			
			Case "fixWMI"
				Log " Fixing WMI on " & UCase(strComputer) & "...", True, "fixWMI", 1
				Log "  >> Fixing WMI...", False, null, 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					statUnhealthy = statUnhealthy + 1
					Log "   ** Failed to connect to root\cimv2 namespace. Can't initiate the fix remotely!", True, "fixWMI", 3
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	If actionFixWMI(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		statHealthy = statHealthy + 1
	    		processComputer = "Fixed and healthy,1"
	    		Log "   ** Successfully scheduled WMI fix on computer " & UCase(strComputer) & "!", True, "fixWMI", 1
	    	Else
	    		statUnhealthy = statUnhealthy + 1
	    		processComputer = "Not healthy,0"
	    	End If
	    Case "checkServices"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
				
				' Check configuration file data
				Call parseConfig("Health_services")
						
				Log " Checking services on " & UCase(strComputer) & "...", True, "checkServices", 1
	    	If actionCheckServices(strComputer, false) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Healthy,1"
	    	Else
	    		addElementToUnhealthyArray strComputer
	    		processComputer = "Not healthy,0"
	    	End If
	    Case "fixServices"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If				
				
				' Check configuration file data
				Call parseConfig("Health_services")
								
				Log " Checking & fixing services on " & UCase(strComputer) & "...", True, "fixServices", 1
	    	If actionCheckServices(strComputer, true) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Fixed and healthy,1"
	    	Else
	    		processComputer = "Not healthy,0"
	    	End If
	    Case "checkAdminShare"
	    	Log " Checking admin$ share on " & UCase(strComputer) & "...", True, "checkAdminShare", 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If actionCheckAdminShare(strComputer, false) Then
					statSuccess = statSuccess + 1
					processComputer = "Healthy,1"
				Else
					addElementToUnhealthyArray strComputer
					processComputer = "Not healthy,0"
				End If
	    Case "fixAdminShare"
	    	Log " Checking & fixing admin$ share on " & UCase(strComputer) & "...", True, "fixAdminShare", 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If				
				If actionCheckAdminShare(strComputer, true) Then
					statSuccess = statSuccess + 1
					processComputer = "Fixed and healthy,1"
				Else
					processComputer = "Not healthy,0"
				End If
			Case "checkAssignedSite"
				Log " Checking assigned site on " & UCase(strComputer) & "...", True, "checkAssignedSite", 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If Not verifySMSService(strComputer) Then
					processComputer = "ERR_SERVICE,0"
					Exit Function
				End If
				If actionCheckAssignedSite(strComputer, false) Then
					statSuccess = statSuccess + 1
					processComputer = "Healthy,1"
				Else
					addElementToUnhealthyArray strComputer
					processComputer = "Not healthy,0"
				End If
			Case "fixAssignedSite"
				Log " Checking & fixing assigned site on " & UCase(strComputer) & "...", True, "fixAssignedSite", 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If Not verifySMSService(strComputer) Then
					processComputer = "ERR_SERVICE,0"
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If				
				If actionCheckAssignedSite(strComputer, true) Then
					statSuccess = statSuccess + 1
					processComputer = "Fixed and healthy,1"
				Else
					processComputer = "Not healthy,0"
				End If
			Case "checkRegistry"
				Log " Checking registry on " & UCase(strComputer) & "...", True, "checkRegistry", 1
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If
	    	
	    	' Check configuration file data
				Call parseConfig("Health_registry")
	    	
	    	If actionCheckRegistry(strComputer, false) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Healthy,1"
	    	Else
	    		addElementToUnhealthyArray strComputer
	    		processComputer = "Not healthy,0"
	    	End If
			Case "fixRegistry"
				Log " Checking & fixing registry on " & UCase(strComputer) & "...", True, "fixRegistry", 1
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If
	    	
	    	' Check configuration file data
				Call parseConfig("Health_registry")
					    	
	    	If actionCheckRegistry(strComputer, true) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Fixed and healthy,1"
	    	Else
	    		processComputer = "Not healthy,0"
	    	End If
	    Case "checkInventory"
	    	Log " Checking inventory on " & UCase(strComputer) & "...", True, "checkInventory", 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If Not verifySMSService(strComputer) Then
					processComputer = "ERR_SERVICE,0"
					Exit Function
				End If
				
				' Check configuration file data
				Call parseConfig("Health_inventory")
								
				If actionCheckInventory(strComputer, false) Then
					statSuccess = statSuccess + 1
					processComputer = "Healthy,1"
				Else
					addElementToUnhealthyArray strComputer
					processComputer = "Not healthy,0"
				End If
	    Case "fixInventory"
	    	Log " Checking & fixing inventory on " & UCase(strComputer) & "...", True, "fixInventory", 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If Not verifySMSService(strComputer) Then
					processComputer = "ERR_SERVICE,0"
					Exit Function
				End If
				
				' Check configuration file data
				Call parseConfig("Health_inventory")
								
				If actionCheckInventory(strComputer, true) Then
					statSuccess = statSuccess + 1
					processComputer = "Fixed and healthy,1"
				Else
					processComputer = "Not healthy,0"
				End If								 	
			Case "checkClientVersion"
				Log " Checking client version on " & UCase(strComputer) & "...", True, "checkClientVersion", 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If Not verifySMSService(strComputer) Then
					processComputer = "ERR_SERVICE,0"
					Exit Function
				End If				
				If actionCheckClientVersion(strComputer, False) Then
					statSuccess = statSuccess + 1
					processComputer = "Healthy,1"
				Else
					addElementToUnhealthyArray strComputer
					processComputer = "Not healthy,0"
				End If
			Case "fixClientVersion"
				Log " Checking & fixing client version on " & UCase(strComputer) & "...", True, "fixClientVersion", 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
				If Not verifySMSService(strComputer) Then
					processComputer = "ERR_SERVICE,0"
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
				If actionCheckClientVersion(strComputer, True) Then
					statSuccess = statSuccess + 1
					processComputer = "Healthy,1"
				Else
					addElementToUnhealthyArray strComputer
					processComputer = "Not healthy,0"
				End If
			Case "checkHealth"
				isFullHealthCheck = True
				Log " Running full health check on " & Ucase(strComputer) & "...", True, "checkHealth", 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					statUnhealthy = statUnhealthy + 1
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If	    	
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	
	    	' Parse configuration file data
	    	Call parseConfig("Health_services")
				Call parseConfig("Health_registry")
				Call parseConfig("Health_inventory")
	    	
	    	If actionFullHealthCheck(strComputer, false) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Healthy,1"
	    		Log "  ** RESULT: Healthy", True, "checkHealth", 1
	    	Else
	    		addElementToUnhealthyArray strComputer
	    		processComputer = "Not healthy,0"
	    		Log "  !! RESULT: Not healthy", True, "checkHealth", 2
	    	End If
			Case "fixHealth"
				isFullHealthCheck = True
				Log " Running full health check with fixes on " & Ucase(strComputer) & "...", True, "fixHealth", 1
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					statUnhealthy = statUnhealthy + 1
					Log "   ** Failed to connect to root\cimv2 namespace. Can't initiate the fix remotely!", True, "fixWMI", 3
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
	    	If Not getWMIRegistryObject(strComputer) Then
	    		processComputer = "ERR_REG,0"
					Exit Function
	    	End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If
	    	
	    	' Parse configuration file data
	    	Call parseConfig("Health_services")
				Call parseConfig("Health_registry")
				Call parseConfig("Health_inventory")
				
	    	If actionFullHealthCheck(strComputer, true) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Fixed and healthy,1"
	    		Log "  ** RESULT: Fixed and healthy", True, "fixHealth", 1
	    	Else
					addElementToUnhealthyArray strComputer
	    		processComputer = "Not healthy,0"
	    		Log "  !! RESULT: Not healthy", True, "fixHealth", 2
	    	End If
	    Case "refreshGPO"
				If Not connectWMI(strComputer) Then
					processComputer = "ERR_WMI,0"
					Exit Function
				End If
	    	If Not getWMIProcessObject(strComputer) Then
	    		processComputer = "ERR_WMI,0"
					Exit Function
	    	End If
	    	If Not getOSInfo(strComputer) Then
	    		processComputer = "ERR_OS,0"
					Exit Function
	    	End If	    	
	    	If actionRefreshGPO(strComputer) Then
	    		statSuccess = statSuccess + 1
	    		processComputer = "Success,1"
	    		Log " ** Successfully refreshed group policies on computer " & UCase(strComputer) & "!", True, "refreshGPO", 1
	    	Else
	    		processComputer = "Failed,0"
	    	End If
		End Select
    
    ' If schedule ID is specified, trigger the action on SCCM client...
    If isScheduleID Then

			If Not connectWMI(strComputer) Then
				Exit Function
			End If
			
			If Not verifySMSService(strComputer) Then
				Exit Function
			End If
			
			' Do full inventory resync if needed
	    If inventoryResync Then
				If Not actionInventoryResync(strComputer, selectedActionID, false) Then
					Log " !! Failed to do full inventory resync on " & UCase(remoteComputer) & "!", True, "inventoryResync", 3
					processComputer = "Failed,0"
					Exit Function
				End If
		  End If
	    
	  	' Invoke TriggerSchedule method
			If actionTriggerSchedule(strComputer, selectedActionID, false) Then
				statSuccess = statSuccess + 1
				processComputer = "Success,1"
			Else
				statFailed = statFailed + 1
				processComputer = "Failed,0"
			End If
			
		End If
		
	End Function
	
	Sub updateXLS(strResult)
		' Update source Excel sheet
		If useExcelSheet Then
			
		End If
	End Sub

	' ~~~~~~~~~~~~~~
	' Identifies OS version in local computer	
	Sub getMyOS()
		Set objLocalWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2")
		Set colOS = objLocalWMIService.ExecQuery ("Select * from Win32_OperatingSystem")
		For Each objOS in colOS
			strOSVersion = objOS.Version
		Next
		If strOSVersion <> "" Then
			If Cint(Left(strOSVersion, Instr(strOSVersion, ".")-1)) > 5 Then
				IHaveVistaOrAbove = True
			Else
				IHaveVistaOrAbove = False
			End If
		End If
		Set objLocalWMIService = Nothing		
	End Sub

	' ~~~~~~~~~~~~~~
	' Function to trigger full inventory resync
	Function actionInventoryResync(remoteComputer, scheduleID, isInternalCall)
		' Delete existing full inventory if resync requested
		Err.Clear
		Set objInv = GetWMIObject(remoteComputer, "root\ccm\invagt")
		If Err.number <> 0 Then
			If Not isInternalCall Then
				statWMIerror = statWMIerror + 1
				Log " !! Failed to connect to WMI on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "inventoryResync", 3
			End If
		  Exit Function
		End If
		Err.Clear
		objInv.Delete "InventoryActionStatus.InventoryActionID=" & Chr(34) & scheduleID & Chr(34)
		If Err.Number <> 0 Then
			If Not isInternalCall Then
				statFailed = statFailed + 1
				Log " !! Failed to execute Delete() method on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "inventoryResync", 3
			End If
			Exit Function
		End If
		
		actionInventoryResync = True
	End Function

	' ~~~~~~~~~~~~~~
	' Function to trigger a SCCM client schedule action
	Function actionTriggerSchedule(remoteComputer, scheduleID, isInternalCall)
		On error resume next
		' Connect to CCM namespace
    Err.Clear
    Set objCCM = GetWMIObject(remoteComputer, "root\ccm")
    If (Err.number <> 0) then
    	If Not isInternalCall Then
    		statWMIerror = statWMIerror + 1
    	End If
    	Exit Function
    End If	

  	Err.Clear
  	Set objInstance = objCCM.Get("SMS_Client")
  	Set objParams = objInstance.Methods_("TriggerSchedule").inParameters.SpawnInstance_()
  	objParams.sScheduleID = scheduleID
  	objCCM.ExecMethod "SMS_Client", "TriggerSchedule", objParams
  	If err.Number <> 0 Then
  		If Not isInternalCall Then
  			Log " !! Failed to trigger action on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "triggerAction", 3
  		End If
  		Exit Function
  	Else
  		If Not isInternalCall Then
  			Log " ** Successfully triggered action on " & UCase(remoteComputer) & "!", True, "triggerAction", 1
  		End If
  	End If
	  
	  actionTriggerSchedule = True
	End Function

	' ~~~~~~~~~~~~~~
	' Function to check if WMI "root\CIMV2" namespace object is accessible
	Function connectWMI(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False
		Err.Clear
		Set objWMIService = getWMIobject(remoteComputer, "root\CIMV2")
	  If (Err.number <> 0) Then
	    Exit Function
	  End If
	  
	  retVal = True
	  connectWMI = retVal
	End Function

	' ~~~~~~~~~~~~~~
	' Function to check if WMI "root\CIMV2" and "root\CIMV2\sms" namespaces are accessible
	Function actionCheckWMI(remoteComputer)
	
		Dim checkStatus: checkStatus = True
		Log "  >> Checking WMI...", True, "checkWMI", 1
		
		On Error Resume Next
		Dim retVal: retVal = False
		Err.Clear
		Set objTestWMIObject = getWMIobject(remoteComputer, "root\CIMV2")
	  If (Err.number <> 0) Then
	    checkStatus = False
	  End If
	  Set objTestWMIObject = Nothing
		
		Set objTestWMIObject = getWMIobject(remoteComputer, "root\CIMV2\sms")
	  If (Err.number <> 0) Then
	    checkStatus = False
	  End If
	  Set objTestWMIObject = Nothing
		
		If Not checkStatus Then
			lastCheckResult = "Unhealthy"
			If Not isFullHealthCheck Then
				statUnhealthy = statUnhealthy + 1
			End If
		Else
			lastCheckResult = "Healthy"
			If Not isFullHealthCheck Then
				statHealthy = statHealthy + 1
			End If
			Log "   ** WMI is healthy.", True, "checkWMI", 1
		End If
		
		actionCheckWMI = checkStatus
	
	End Function	

	' ~~~~~~~~~~~~~~
	' Function to return specified WMI namespace object
	Function getWMIobject(remoteComputer, NS)
  	On Error Resume Next
  	Err.Clear
  	Dim returnObject
		If integratedAuth OR remoteComputer = "." Then
			Set objWMI = GetObject("winmgmts:{impersonationLevel=Impersonate,authenticationLevel=pktPrivacy}\\" & remoteComputer & "\" & NS)
		Else
			Set objWbemLocator = CreateObject("WbemScripting.SWbemLocator")
			objWbemLocator.Security_.AuthenticationLevel = wbemAuthenticationLevelPkt
			Set objWMI = objWbemLocator.ConnectServer(remoteComputer, NS, strUsername, strPassword)
		End If
	  If (Err.number <> 0) Then
	  	statWMIerror = statWMIerror + 1
	    Log " !! Failed to connect to WMI namespace """&NS&""" on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "getWMIObject", 3
			Set getWMIobject = Nothing
		Else
			Set getWMIobject = objWMI
	  End If
	End Function
	
	' ~~~~~~~~~~~~~~
	' Function to WMI object for Win32_Process class
	Function getWMIProcessObject(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False
    Err.Clear
    Set objWMIProcess = objWMIService.Get("Win32_Process")
    If (Err.number <> 0) Then
    	statWMIerror = statWMIerror + 1
			Log " !! Failed to connect to ""Win32_Process"" WMI class on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "getWMIProcessObject", 3
      Exit Function
    Else
    	retVal = True
    End If
    getWMIProcessObject = retVal
	End Function

	' ~~~~~~~~~~~~~~
	' Function to WMI object for \root\default:StdRegProv class	
	Function getWMIRegistryObject(remoteComputer)
  	On Error Resume Next
  	Err.Clear
  	Dim returnObject
		If integratedAuth OR remoteComputer = "." Then
			Set objWMIRegistry = GetObject("winmgmts:{impersonationLevel=Impersonate}!\\" & remoteComputer & "\root\default:StdRegProv")
		Else
			Set objWbemLocator = CreateObject("WbemScripting.SWbemLocator")
			objWbemLocator.Security_.AuthenticationLevel = wbemAuthenticationLevelPkt
			Set objWbemServices = objWbemLocator.ConnectServer(remoteComputer, "root\default", strUsername, strPassword)
			Set objWMIRegistry = objWbemServices.Get("StdRegProv")
		End If
	  If (Err.number <> 0) Then
	  	statWMIerror = statWMIerror + 1
	    Log " !! Failed to connect to registry via WMI on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "getWMIRegistryObject", 3
			Exit Function
	  End If
	  
	  getWMIRegistryObject = True
	End Function

	' ~~~~~~~~~~~~~~
	' Function to get Windows directory and OS architecture
	Function getOSInfo(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False
		err.Clear
		' Query OS version and path
    Set colItems = objWMIService.ExecQuery("SELECT * FROM Win32_OperatingSystem")
    If err <> 0 Then
    	statWMIerror = statWMIerror + 1
    	Log " !! Failed to connect to ""Win32_OperatingSystem"" WMI class on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "getOSInfo", 3
    	Exit Function
    End If    
    For Each objItem in colItems
	    strWinPath = objItem.WindowsDirectory
	    strOSVersion = objItem.Version
    Next
    arrWinPath = Split(strWinPath, "\")
    strSystemDrive = arrWinPath(0)
        
    If Cint(Left(strOSVersion, Instr(strOSVersion, "."))) > 5 Then
    	notXP = True
    Else
    	notXP = False
    End If
    
    ' Query free disk space on system drive
		Set colDisks = objWMIService.ExecQuery("Select * from Win32_LogicalDisk WHERE DeviceID = '" & strSystemDrive & "'")
		For Each objDisk in colDisks
			freeSpaceOnDisk = objDisk.FreeSpace
		Next
    
    err.Clear
    ' Query OS architecture...
    Set colItems = objWMIService.ExecQuery("SELECT * FROM Win32_ComputerSystem")
    If err <> 0 Then
    	statWMIerror = statWMIerror + 1
    	Log " !! Failed to connect to ""Win32_ComputerSystem"" WMI class on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "getOSInfo", 3
    	Exit Function
    End If
    For Each objItem in colItems
    	strMemberDomain = objItem.Domain
	    strOSArchitecture = objItem.SystemType
    Next
    
'    err.Clear
'    ' Query domain information...
'    Set colItems = objWMIService.ExecQuery("SELECT * FROM Win32_NTDomain")
'    If err <> 0 Then
'    	statWMIerror = statWMIerror + 1
'    	Log " !! Failed to connect to ""Win32_NTDomain"" WMI class on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "getOSInfo", 3
'    	Exit Function
'    End If
'    For Each objItem in colItems
'    	strMemberDomain = objItem.Domain
'	    strOSArchitecture = objItem.SystemType
'    Next
    
    If CBool(Instr(strOSArchitecture,"x64")) Then
    	is64bit = True
    	strSystem32 = "SysWOW64"
    Else
    	strSystem32 = "System32"
    End If
  	
  	retVal = True
  	getOSInfo = retVal
	End Function

	' ~~~~~~~~~~~~~~
	' Function to initiate uninstall of SCCM client
	' Requires getWMIProcessObject() and getOSInfo() methods to be run before
	Function actionUninstallClient(remoteComputer)
		On Error Resume Next

		Err.Clear
    ' Verify that CCMSetup.exe exists
    If is64bit Then
    	ccmsetupFolderWMI = arrWinPath(0) & "\\" & arrWinPath(1) & "\\ccmsetup\\ccmsetup.exe"
    	ccmsetupFolder = strWinPath & "\ccmsetup\ccmsetup.exe"
    Else
    	ccmsetupFolderWMI = arrWinPath(0) & "\\" & arrWinPath(1) & "\\"&strSystem32&"\\ccmsetup\\ccmsetup.exe"
    	ccmsetupFolder = strWinPath & "\"&strSystem32&"\ccmsetup\ccmsetup.exe"
    End If
    Set colFiles = objWMIService.ExecQuery("SELECT * FROM CIM_Datafile WHERE Name='" & ccmsetupFolderWMI & "'")
    If err.number <> 0 Then
    	statWMIerror = statWMIerror + 1
    	Log " !! Failed to connect to ""CIM_Datafile"" WMI class on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "uninstallClient", 3
    	Exit Function
    End If
    If colFiles.Count < 1 Then
    	statFailed = statFailed + 1
      Log " !! " & ccmsetupFolder & " does not exist on " & UCase(remoteComputer) & "!", True, "uninstallClient", 3
      Exit Function
    End If
    
    If enableFullUninstall Then
	    ' Delete SMSCFG.ini from Windows directory
	    If Not deleteSMSCFG(remoteComputer) Then
	    	'Exit Function
	    End If
	    
	    ' Clean up SCCM certificates
			If Not actionDeleteCert(remoteComputer, False) Then
				'Exit Function
			End If
		End If
	  
    ' Run uninstall command
		If notXP Then
			' Get elevation string for UAC bypass
			strElevate = getElevationString(remoteComputer, true)
		Else
			' For XP we can use empty string here
			strElevate = ""
		End If    
    
    strUninstall = ccmsetupfolder & " /uninstall"
    errReturn = objWMIProcess.Create(strElevate & strUninstall,null,null,intProcessID)
    If errReturn <> 0 Then
    	statFailed = statFailed + 1
      Log " !! Failed to run " & strUninstall & " on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "uninstallClient", 3
      Exit Function
    End If
    
    retVal = True
    actionUninstallClient = retVal
	End Function

	' ~~~~~~~~~~~~~~
	' Function to initiate installation of SCCM client
	Function actionInstallClient(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False
		strCCMSetupPath = Left(ccmsetupPath,InstrRev(ccmsetupPath,"\")-1)
		
		' Get elevation string to run as SYSTEM
		strElevate = getElevationString(remoteComputer, true)
		
		strRunCommand = """" & strCCMSetupPath & "\ccmsetup.exe"""
    If ccmsetupCustomParameters <> "" Then
    	strRunCommand = strRunCommand & " " & ccmsetupCustomParameters
    End If
		
		' Schedule the install on remote client
    errReturn = objWMIProcess.Create(strElevate & strRunCommand,null,null,intProcessID)
    If errReturn <> 0 Then
    	statFailed = statFailed + 1
      Log " !! Failed to start " & strCommandline & " on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "installClient", 3
      Exit Function
    End If
	  
		actionInstallClient = True
	End Function

	' ~~~~~~~~~~~~~~
	' Function to dynamically create a VBS script for changing client cache size remotely
	Function prepareChangeCacheSize()
	
		strLocalScriptFilePath = localTempPath & "\changecache.vbs"
		strLocalBatchFilePath = localTempPath & "\changecache.bat"
		
		err.clear
		' Write VBScript contents
		Set objScriptfile = objFSO.OpenTextFile(strLocalScriptFilePath, ForWriting, True)
		If err.Number <> 0 Then
			MsgBox "Failed to create "&strLocalScriptFilePath&"! Error "&err.Number&".", vbCritical
			Exit Function
		End If		
		objScriptfile.WriteLine "On Error Resume Next"
		objScriptfile.WriteLine "Set oUIResource = CreateObject(""UIResource.UIResourceMgr"")"
		objScriptfile.WriteLine "Set objCacheInfo = oUIResource.GetCacheInfo"
		objScriptfile.WriteLine "objCacheInfo.TotalSize = " & newCacheSize
		objScriptfile.WriteLine "WScript.Quit(Err.Number)"
		objScriptfile.Close
		Set objScriptfile = Nothing
		
		' Write Batch contents
		Set objBatchfile = objFSO.OpenTextFile(strLocalBatchFilePath, ForWriting, True)
		If err.Number <> 0 Then
			MsgBox "Failed to create "&strLocalBatchFilePath&"! Error "&err.Number&".", vbCritical
			Exit Function
		End If
		objBatchfile.WriteLine "cscript.exe %~dp0changecache.vbs"
		objBatchfile.WriteLine "Result code: %ERRORLEVEL%"
		objBatchfile.WriteLine "DEL /F /S %~dp0changecache.*"
		objBatchfile.Close
		Set objBatchfile = Nothing
		
		prepareChangeCacheSize = True
		
	End Function
	
	' ~~~~~~~~~~~~~~
	' Prepare for "Create CCR" action by creating a folder %temp%\SCCM_CCR
	Function prepareCreateCCR()
		strCCRFolderPath = localTempPath & "\SCCM_CCR"
		If Not objFSO.FolderExists(strCCRFolderPath) Then
			objFSO.CreateFolder(strCCRFolderPath)
			If err.Number <> 0 Then
				MsgBox "Failed to create folder """&strCCRFolderPath&"""! Error "&err.Number&".", vbCritical
				Exit Function
			End If
		End If
		
		prepareCreateCCR = True
	End Function
	
	' ~~~~~~~~~~~~~~
	' Create CCR file for specified computer
	' Based on this sample: http://myitforum.com/cs2/blogs/dhite/archive/2006/09/10/Vbs-Script-To-Create-and-Copy-CCR_1920_s-Based-On-A-Machine-List.aspx	
	Function actionCreateCCR(remoteComputer)
		On Error Resume Next
		strLocalCCRFilePath = strCCRFolderPath & "\" & UCase(remoteComputer) & ".ccr"
		
		' Write CCR file contents
		Set objCCRfile = objFSO.OpenTextFile(strLocalCCRFilePath, ForWriting, True)
		If err.Number <> 0 Then
			MsgBox "Failed to create "&strLocalCCRFilePath&"! Error "&err.Number&".", vbCritical
			Exit Function
		End If
		objCCRfile.WriteLine("[NT Client Configuration Request]")
		objCCRfile.WriteLine("   Client Type=1")
		objCCRfile.WriteLine("   Forced CCR=TRUE")
		objCCRfile.WriteLine("   Machine Name=" & UCase(remoteComputer))
		objCCRfile.Close
		Set objCCRfile = Nothing
		
		If sendCCRToSite Then
			' Copy CCR to site server if needed
			strCCRDestinationPath = "\\" & strSiteServer & "\SMS_" & UCase(strSiteCode) & "\inboxes\ccr.box"
			
			objFSO.CopyFile strLocalCCRFilePath, strCCRDestinationPath & "\", True
			If err.number <> 0 Then
				Log "  !! Failed to copy CCR to "&strCCRDestinationPath&"!"&vbCrLf&"Error " & err.number & " (" & err.description & ")!", True, "createCCR", 3
				Exit Function
			End If
			
			' Delete local temporary CCR
			objFSO.DeleteFile strLocalCCRFilePath, True
		End If
		
		actionCreateCCR = True
	End Function
	
	' ~~~~~~~~~~~~~~
	' Function to create SCCM site server connection	
	Function connectToSCCM()
		On Error Resume Next
		strSiteServer = getSiteServerName()
		
		If Len(strSiteServer) = 0 Then
			Exit Function
		End If
		
		' Check site server connectivity
		Log "Connecting to site server """ & UCase(strSiteServer) & """...", True, "connectToSCCM", 1
		Set objSiteServerConnection = ConnectSiteServer(strSiteServer, null, null)
		If Err.Number<>0 Then
	    Exit Function
		End If
		
		connectToSCCM = True
	End Function
	
	' ~~~~~~~~~~~~~~
	' Function to send Wake On LAN magic packet to remote computer based on either computer name or MAC address
	Function actionWOL(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False

		If Not isMACAddress(remoteComputer) Then
			' WOL target is not MAC address. Assuming it's computer name
			
			If Not isObject(objSiteServerConnection) Then
				Log "  !! No active site server connection! Can't determine MAC address of "&UCase(remoteComputer)&"!", True, "actionWOL", 3
				Exit Function
			End If
			
			' Try to wake up possible MAC addresses queried from SCCM
			Set objMACAddresses = objSiteServerConnection.ExecQuery("SELECT MACAddress FROM SMS_G_System_NETWORK_ADAPTER_CONFIGURATION WHERE IPEnabled = 1 AND IPAddress <> '0.0.0.0' AND DNSHostName = '"&remoteComputer&"'")
			If err.number <> 0 Then
				Log "  !! Failed to query MAC addresses for " & UCase(remoteComputer) & "! Error " & err.number & " ("&err.description&")", True, "actionWOL", 3
				Exit Function
			End If
			If objMACAddresses.Count > 0 Then
				For Each objMAC in objMACAddresses
					strMACaddress = objMAC.MACAddress
					strCommand = "cmd.exe /C """ & scriptPath & "\wol.exe"" " & convertMACforWOL(strMACaddress)
					errReturn = objShell.run(strCommand, 0, True)
					Log "  ** Sent wake-up packet to " & strMACaddress & ".", True, "actionWOL", 1
				Next
			Else
				Log "  !! Could not find any MAC addresses from SCCM for " & UCase(remoteComputer) & "!", True, "actionWOL", 3
				Exit Function
			End If
		Else
			' WOL target is MAC address
			strCommand = "cmd.exe /C """ & scriptPath & "\wol.exe"" " & convertMACforWOL(remoteComputer)
			errReturn = objShell.run(strCommand, 0, True)
			Log "  ** Sent wake-up packet to " & remoteComputer & ".", True, "actionWOL", 1
		End If
		
		retVal = True
		
		actionWOL = retVal
	End Function

	' ~~~~~~~~~~~~~~
	' Function to copy the source file to local path for copy process	
	Function prepareCopyFile()
		On Error Resume Next
		Dim retVal: retVal = False
		
		temporaryFilePath = localTempPath & "\" & Mid(sourceFilePath, InStrRev(sourceFilePath, "\") + 1, Len(sourceFilePath))
		MsgBox(temporaryFilePath)
		
		' Copy file to %temp%\
		objFSO.CopyFile sourceFilePath, localTempPath & "\"
		If err.number <> 0 Then
			MsgBox "Failed to copy the source file to %temp%! This is needed before copying it to remote computers."&vbCrLf&"Error " & err.number & " (" & err.description & ")!", vbCritical
			Exit Function
		End If
		
		retVal = True
		
		prepareCopyFile = retVal
		
	End Function
	
	' ~~~~~~~~~~~~~~
	' Function to copy a file to remote computer
	Function actionCopyFile(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False
		
  	strRemoteTempPath = "\\" & remoteComputer & "\admin$\temp"
  	strTempFilePath = strWinPath & "\TEMP\" & Mid(sourceFilePath, InStrRev(sourceFilePath, "\") + 1, Len(sourceFilePath))
  	
  	' First copy a file to remote %windir%\temp\
		If Not doRemoteCopy(temporaryFilePath, strRemoteTempPath, remoteComputer) Then
			statFailed = statFailed + 1
			Exit Function
		End If
		
		' Now initiate local copy to specified path if not %windir%\temp
		If Instr(LCase(destinationFilePath), LCase(strTempFilePath)) = 0 Then
			
			If notXP Then
				' Get elevation string for UAC bypass
				strElevate = getElevationString(remoteComputer, true)
			Else
				' For XP we can use empty string here
				strElevate = ""
			End If

			errReturn = objWMIProcess.Create(strElevate & "CMD.EXE /C MOVE /Y """&strTempFilePath&""" """&destinationFilePath&"""",null,null,intProcessID)
	    If errReturn <> 0 Then
	    	statFailed = statFailed + 1
	      Log " !! File was copied to %windir%\temp, but not moved to "&destinationFilePath&" on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "actionCopyFile", 3
	      Exit Function
	    End If
	    
	  End If
					
		retVal = True
		
		actionCopyFile = retVal
	End Function

	' ~~~~~~~~~~~~~~
	' Function to re-register ATL.dll	
	Function actionRegisterATL(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False
		
		strSystemPath = strWinPath & "\" & strSystem32

		' Start the script in remote computer
		If notXP Then
			' Get elevation string for UAC bypass
			strElevate = getElevationString(remoteComputer, true)
		Else
			' For XP we can use empty string here
			strElevate = ""
		End If

		errReturn = objWMIProcess.Create(strElevate & "REGSVR32.EXE /S """&strSystemPath&"\atl.dll""",null,null,intProcessID)
    If errReturn <> 0 Then
    	statFailed = statFailed + 1
      Log " !! Failed to schedule DLL registration on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "actionRegisterATL", 3
      Exit Function
    End If		
		
		retVal = True
		actionRegisterATL = retVal
	End Function

	' ~~~~~~~~~~~~~~
	' Function to change client cache size
	Function actionChangeCacheSize(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False
		
		strLocalTempPath = strWinPath & "\temp\"
		strRemoteTempPath = "\\" & remoteComputer & "\admin$\temp"
		
		freeMBlimit = Round((Round((freeSpaceOnDisk / 1024 / 1024),0)) / 100,0)*100
		If CDbl(newCacheSize) > CDbl(freeMBlimit) Then
			statFailed = statFailed + 1
			Log " !! Failed to change cache size to "&newCacheSize&" MB. Not enough disk space! Available: ~" & freeMBlimit & " MB", True, "changeCache", 3
			Exit Function
		End If
		
		' Copy VBS and BAT to remote computer
		If Not doRemoteCopy(localTempPath & "\changecache.*", strRemoteTempPath, remoteComputer) Then
			statFailed = statFailed + 1
			Log " !! Failed to copy changecache.* files to " & UCase(remoteComputer) & "!", True, "changeCache", 3
			Exit Function
		End If
		
		' Start the script in remote computer
		If notXP Then
			' Get elevation string for UAC bypass
			strElevate = getElevationString(remoteComputer, true)
		Else
			' For XP we can use empty string here
			strElevate = ""
		End If
    errReturn = objWMIProcess.Create(strElevate & strLocalTempPath & "changecache.bat >" & strLocalTempPath & "changecache.log",null,null,intProcessID)
    If errReturn <> 0 Then
    	statFailed = statFailed + 1
      Log " !! Failed to start " & strLocalTempPath & "changecache.bat on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "changeCache", 3
      Exit Function
    End If
    
		retVal = True
		
		actionChangeCacheSize = retVal
	End Function
	
	' ~~~~~~~~~~~~~~
	' Function to dynamically create VBS and BAT files for changing SMS GUID on client
	Function prepareChangeGUID()
	
		strLocalScriptFilePath = localTempPath & "\changeguid.vbs"
		strLocalBatchFilePath = localTempPath & "\changeguid.bat"
		
		err.clear
		' Write VBScript contents
		Set objScriptfile = objFSO.OpenTextFile(strLocalScriptFilePath, ForWriting, True)
		If err.Number <> 0 Then
			MsgBox "Failed to create "&strLocalScriptFilePath&"! Error "&err.Number&".", vbCritical
			Exit Function
		End If
		objScriptfile.WriteLine "On Error Resume Next"
		objScriptfile.WriteLine "Dim objFSO: Set objFSO = CreateObject(""Scripting.FileSystemObject"")"
		objScriptfile.WriteLine "Dim objShell: Set objShell = CreateObject(""WScript.Shell"")"
		objScriptfile.WriteLine "Dim TypeLib: Set TypeLib = CreateObject(""Scriptlet.TypeLib"")"
		objScriptfile.WriteLine "strWinDir = objShell.ExpandEnvironmentStrings(""%WinDir%"")"
		objScriptfile.WriteLine "strSMSCFGPath = strWinDir & ""\SMSCFG.ini"""
		
		objScriptfile.WriteLine "strGUID = Left(Trim(TypeLib.guid),38)"
		objScriptfile.WriteLine "strGUID = Replace(strGUID,""{"","""")"
		objScriptfile.WriteLine "strGUID = Replace(strGUID,""}"","""")"
		
		objScriptfile.WriteLine "If objFSO.FileExists(strWinDir & ""\SMSCFG.ini.old"") Then"
		objScriptfile.WriteLine "result = objFSO.DeleteFile(strWinDir & ""\SMSCFG.ini.old"", True)"
		objScriptfile.WriteLine "End If"
		
		objScriptfile.WriteLine "If objFSO.FileExists(strSMSCFGPath) Then"
		objScriptfile.WriteLine "Set objFile = objFSO.GetFile(strSMSCFGPath)"
		objScriptfile.WriteLine "objFile.Name = ""SMSCFG.ini.old"""
		objScriptfile.WriteLine "Set objFile = Nothing"
		objScriptfile.WriteLine "End If"
		
		objScriptfile.WriteLine "Set objSMSCFG = objFSO.OpenTextFile(strSMSCFGPath, 2, True)"
		objScriptfile.WriteLine "objSMSCFG.WriteLine ""[Configuration - Client Properties]"""
		objScriptfile.WriteLine "objSMSCFG.WriteLine ""SMS Unique Identifier=GUID:"" & UCase(strGUID)"
		objScriptfile.WriteLine "objSMSCFG.Close"
		objScriptfile.WriteLine "Set objSMSCFG = Nothing"
		objScriptfile.WriteLine "Set objFSO = Nothing"
		objScriptfile.WriteLine "Set TypeLib = Nothing"
		
		objScriptfile.WriteLine "WScript.Quit(Err.Number)"
		
		' Write Batch contents
		Set objBatchfile = objFSO.OpenTextFile(strLocalBatchFilePath, ForWriting, True)
		If err.Number <> 0 Then
			MsgBox "Failed to create "&strLocalBatchFilePath&"! Error "&err.Number&".", vbCritical
			Exit Function
		End If
		objBatchfile.WriteLine "NET STOP ccmexec"
		objBatchfile.WriteLine "TASKKILL /F /IM ccmexec.exe" ' This is just in case service has hung for some reason
		objBatchfile.WriteLine "cscript.exe %~dp0changeguid.vbs"
		objBatchfile.WriteLine "Result code: %ERRORLEVEL%"
		objBatchfile.WriteLine "NET START ccmexec"
		objBatchfile.WriteLine "DEL /F /S %~dp0changeguid.*"
		objBatchfile.Close
		Set objBatchfile = Nothing		
		
		objScriptfile.Close
		Set objScriptfile = Nothing
		
		prepareChangeGUID = True
		
	End Function
	
	' ~~~~~~~~~~~~~~
	' Function to change SMS Client GUID
	Function actionNewGUID(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False
		
		strLocalTempPath = strWinPath & "\temp\"
		strRemoteTempPath = "\\" & remoteComputer & "\admin$\temp"
		
		' Copy VBS to remote computer
		If Not doRemoteCopy(localTempPath & "\changeguid.*", strRemoteTempPath, remoteComputer) Then
			statFailed = statFailed + 1
			Log " !! Failed to copy changeguid.* files to " & UCase(remoteComputer) & "!", True, "changeGUID", 3
			Exit Function
		End If
		
		' Start the script in remote computer
		If notXP Then
			' Get elevation string for UAC bypass
			strElevate = getElevationString(remoteComputer, true)
		Else
			' For XP we can use empty string here
			strElevate = ""
		End If
    errReturn = objWMIProcess.Create(strElevate & strLocalTempPath & "changeguid.bat >" & strLocalTempPath & "changeguid.log",null,null,intProcessID)
    If errReturn <> 0 Then
    	statFailed = statFailed + 1
      Log " !! Failed to start " & strLocalTempPath & "changeguid.bat on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "changeGUID", 3
      Exit Function
    End If
    
		retVal = True
		
		actionNewGUID = retVal		
		
	End Function
	
	' ~~~~~~~~~~~~~~
	' Function to initiate security settings reset on remote computer
	Function actionResetSecurity(remoteComputer)
		' Logs will be in %windir%\security\logs\
		
		If notXP Then
			' Get elevation string for UAC bypass
			strElevate = getElevationString(remoteComputer, true)
			strCommand = "cmd.exe /C secedit.exe /configure /cfg %windir%\inf\defltbase.inf /db defltbase.sdb"
		Else
			' For XP we can use empty string here
			strElevate = ""
			strCommand = "cmd.exe /C secedit.exe /configure /cfg %windir%\repair\secsetup.inf /db secsetup.sdb"
		End If

		errReturn = objWMIProcess.Create(strElevate & strCommand,null,null,intProcessID)
    If errReturn <> 0 Then
    	statFailed = statFailed + 1
      Log " !! Failed to initiate secedit.exe command on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "resetSecurity", 3
      Exit Function
    End If
    
    actionResetSecurity = True
    		
	End Function

	' ~~~~~~~~~~~~~~
	' Function to return a scheduling command that uses remote client	time + 65 seconds to execute command
	Function getElevationString(remoteComputer, isInteractive)
		
		' First get the current time on a computer
		Set colLocalTime = objWMIService.ExecQuery("Select * from Win32_LocalTime")
		For Each objLocalTime In colLocalTime
			strH = objLocalTime.Hour
			strM = objLocalTime.Minute
			strS = objLocalTime.Second
		Next
		
		currentTime = CDate(strH & ":" & strM & ":" & strS)
		execTime = DateAdd("s", 65, currentTime)
		execTime = FormatDateTime(DateAdd("s", 65, currentTime), 4)
		strElevation = "at "&CStr(execTime)&" "
		If isInteractive Then
			strElevation = strElevation & "/interactive "
		End If
		getElevationString = strElevation
	End Function

	' ~~~~~~~~~~~~~~
	' Function to reassign a site code to a client
	Function actionReassignSiteCode(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False

		' Connect to CCM namespace
    Err.Clear
  	Set objCCM = getWMIobject(remoteComputer, "root\ccm")
	  If (Err.number <> 0) Then
	  	Log " !! Failed to connect to root\ccm WMI namespace! Error " & Err.Number & " (" & err.Description & ").", True, "reassignSiteCode", 3
	  	statWMIerror = statWMIerror + 1
	    Exit Function
	  End If
		
		' Execute SetAsssignedSite() method
		Set objSCCMClient = objCCM.Get("SMS_Client")
		Set oParams = objSCCMClient.Methods_("SetAssignedSite").inParameters.SpawnInstance_()
		oParams.sSiteCode = UCase(assignedSiteCode)
		objCCM.ExecMethod "SMS_Client", "SetAssignedSite", oParams
		If (Err.number <> 0) Then
			If Err.number = -"2147467259" Then
				statFailed = statFailed + 1
				Log " !! Failed to execute SetAssignedSite() WMI method on " & UCase(remoteComputer) & "! Error "&Err.Number&" (wrong site code?)", True, "reassignSiteCode", 3
			Else
				statWMIerror = statWMIerror + 1
				Log " !! Failed to execute SetAssignedSite() WMI method on " & UCase(remoteComputer) & "! Error "&Err.Number&" ("&Err.Description&")", True, "reassignSiteCode", 3
			End If
			Exit Function
		Else
			retVal = True
		End If
		actionReassignSiteCode = retVal
	End Function
	
	' ~~~~~~~~~~~~~~
	' Write new FSP server name value in remote computer registry
	Function actionChangeFSP(remoteComputer)
		Dim regPath
		regPath = "SOFTWARE\"
		If is64bit Then
			regPath = regPath & "Wow6432Node\"
		End If
		regPath = regPath & "Microsoft\CCM\FSP"
	
		MsgBox(regPath)
		objWMIRegistry.SetStringValue HKLM, regPath, "HostName", strFSPServer
		If err.number <> 0 Then
			statFailed = statFailed + 1
			Log " !! Failed to write FSP server value in " & UCase(remoteComputer) & " registry!", True, "actionChangeFSP", 3
			Exit Function
		End If
		
		actionChangeFSP = True
		
	End Function
	
	' ~~~~~~~~~~~~~~
	' Write new SLP server name value in remote computer registry
	Function actionChangeSLP(remoteComputer)
		Dim regPath
		regPath = "SOFTWARE\"
		If is64bit Then
			regPath = regPath & "Wow6432Node\"
		End If
		regPath = regPath & "Microsoft\CCM"
	
		objWMIRegistry.SetStringValue HKLM, regPath, "SMSSlp", strSLPServer
		If err.number <> 0 Then
			statFailed = statFailed + 1
			Log " !! Failed to write SLP server value in " & UCase(remoteComputer) & " registry!", True, "actionChangeSLP", 3
			Exit Function
		End If
		
		actionChangeSLP = True
		
	End Function	

	' ~~~~~~~~~~~~~~
	' Function to delete trusted root key on a client	
	Function actionDeleteRootKey(remoteComputer, restartService)
		On Error Resume Next
		Dim retVal: retVal = False

		' Connect to CCM\LocationServices namespace
    Err.Clear
  	Set objCCM = getWMIobject(remoteComputer, "root\ccm\locationservices")
	  If (Err.number <> 0) Then
	  	Log " !! Failed to connect to root\ccm\locationservices WMI namespace! Error " & Err.Number & " (" & err.Description & ").", True, "deleteRootKey", 3
	  	statWMIerror = statWMIerror + 1
	    Exit Function
	  End If
	  
	  ' Delete TrustedRootKey
		Set objTrustedRootKeys = objCCM.ExecQuery ("Select * from TrustedRootKey")
		For Each RootKey in objTrustedRootKeys
			RootKey.Delete_
		Next
		If (Err.number <> 0) Then
			Log " !! Failed to delete TrustedRootKey! Error " & Err.number & " (" & Err.Description & ").", True, "deleteRootKey", 3
			statFailed = statFailed + 1
			Exit Function
		End If
		
		If restartService Then
			If Not doServiceAction("ccmexec", "restart", remoteComputer, false, false, false, true, 30) Then
				Exit Function
			End If
		End If
	  
	  actionDeleteRootKey = True
	  
	End Function
	
	' ~~~~~~~~~~~~~~
	' Function to remove SCCM certificates from a client
	Function actionDeleteCert(remoteComputer, restartService)
		On Error Resume Next
		Dim retVal: retVal = False
		
		If restartService Then
			If Not doServiceAction("ccmexec", "stop", remoteComputer, false, false, false, true, 30) Then
				Exit Function
			End If
		End If
		
		If is64bit Then
			strCertificatesKey = "SOFTWARE\Wow6432Node\Microsoft\SystemCertificates\SMS\Certificates"
		Else
			strCertificatesKey = "SOFTWARE\Microsoft\SystemCertificates\SMS\Certificates"
		End If
		result = objWMIRegistry.EnumKey(HKLM, strCertificatesKey, subKeys)
		If (result <> 0) Then
			Log " !! Failed to enumerate SCCM certificate keys in registry on " & UCase(remoteComputer) & "! Error " & result & ".", True, "deleteCert", 3
			statFailed = statFailed + 1
			Exit Function
		End If
		
		For Each subKey In subKeys
			result = objWMIRegistry.DeleteKey(HKLM, strCertificatesKey&"\"&subKey)
			If (result <> 0) Then
				Log " !! Failed to delete SCCM certificates from registry on " & UCase(remoteComputer) & "! Error " & result & ".", True, "deleteCert", 3
				statFailed = statFailed + 1
				Exit Function
			End If
		Next
		
		If restartService Then
			If Not doServiceAction("ccmexec", "start", remoteComputer, false, false, false, true, 30) Then
				Exit Function
			End If
		End If

		actionDeleteCert = True

	End Function
	
	' ~~~~~~~~~~~~~~
	' Initiate log off, restart and shut down operations on remote computer
	Function actionRemoteShutdown(remoteComputer, intFlag)
		' intFlag values:
		' 0 - Log off
		' 4 - Forced log off
		' 1 - Shut down
		' 5 - Forced shut down
		' 2 - Reboot
		' 6 - Forced reboot
		' 8 - Power off
		' 12 - Forced power off
		On error resume next
		err.Clear
		
		Set colOperatingSystem = objWMIService.ExecQuery("Select * from Win32_OperatingSystem where Primary=true")
		If err.Number <> 0 Then
			statWMIerror = statWMIerror + 1
			Log " !! Failed to query Win32_OperatingSystem WMI class on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "remoteShutdown", 3
			Exit Function
		End If
		For Each objOS in colOperatingSystem
			objOS.Win32Shutdown(intFlag)
		Next
		If err.Number <> 0 Then
			statFailed = statFailed + 1
			Log " !! Failed to initiate remote action on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "remoteShutdown", 3
			Exit Function
		End If
		
		actionRemoteShutdown = True
	End Function

	' ~~~~~~~~~~~~~~
	' Get the name of the current management point on remote SCCM client
	Function actionGetMP(remoteComputer)
  	Err.Clear
  	Set objCCM = getWMIobject(remoteComputer, "root\ccm")
	  If (Err.number <> 0) Then
	  	Log " !! Failed to connect to WMI namespace root\ccm on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "getMP", 3
	  	statWMIerror = statWMIerror + 1
	    Exit Function
	  End If
	  
	  ' Determine assigned site server
	  Set colProperties = objCCM.ExecQuery("SELECT * FROM SMS_Authority")
	  For Each objItem in colProperties
	  	strCurrentMP = objItem.CurrentManagementPoint
		Next
		localMP = strCurrentMP
		
		' Determine proxy management point server
		Set colProperties = objCCM.ExecQuery("SELECT * FROM SMS_LocalMP")
		For Each objItem in colProperties
			strLocalMP = objItem.Name
		Next
		
		t = "Current MP is " & UCase(strCurrentMP)
		If Len(strLocalMP) > 0 Then
			localMP = strLocalMP
			t = t & " (proxy MP: " & UCase(strLocalMP) & ")"
		End If
		Log " ** " & t, True, "getMP", 1
		
		actionGetMP = True
		
	End Function

	' ~~~~~~~~~~~~~~
	' Function to verify SMS Agent Host service state
	Function verifySMSService(remoteComputer)
		On Error Resume Next

    Err.Clear
    Set colServices = objWMIService.ExecQuery("SELECT * FROM Win32_Service WHERE Name='CcmExec'")
    If err.number <> 0 Then
    	statWMIerror = statWMIerror + 1
    	Log " !! Failed to connect to ""Win32_Service"" WMI class on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "verifySMSService", 3
    	Exit Function
    End If
    If colServices.count < 1 Then
    	statNoAgent = statNoAgent + 1
    	Log " !! SMS Agent Host service not found on " & UCase(remoteComputer) & "!", True, "verifySMSService", 3
    	Exit Function
    Else
    	For Each objItem In colServices
    		If objItem.State <> "Running" Then ' Start the service if it's stopped for some reason
    			serviceWasStopped = True
    			Log " !! SMS Agent Host service is stopped on " & UCase(remoteComputer) & ". Trying to start...", True, "verifySMSService", 2
					If Not doServiceAction("ccmexec", "start", remoteComputer, false, false, false, true, 30) Then
    				statFailed = statFailed + 1
    				Log " !! Failed to start SMS Agent Host service! Error " & errReturn & ".", True, "verifySMSService", 3
    				Exit Function
    			End If
    		End If
    	Next
    End If

    Set colServices = Nothing
    verifySMSService = True    
	End Function

	' ~~~~~~~~~~~~~~
	' Function to delete SMSCFG.ini file on remote computer.
	' Requires getOSInfo() method to be run before
	Function deleteSMSCFG(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False
		Err.Clear
    Set colFiles = objWMIService.ExecQuery("SELECT * FROM CIM_Datafile WHERE Name='" & arrWinPath(0) & "\\" & arrWinPath(1) & "\\SMSCFG.ini'")
    If err.number <> 0 Then
    	statWMIerror = statWMIerror + 1
    	Log " !! Failed to connect to ""CIM_Datafile"" WMI class on " & UCase(remoteComputer) & "! Error "&err.number&" ("&err.description&")", True, "deleteSMSCFG", 3
    	Exit Function
    End If
    If colFiles.Count > 0 Then
			Set objFile = objWMIService.Get("CIM_Datafile.Name='" & strWinPath & "\SMSCFG.ini'")
      objFile.Delete
      If Err.Number <> 0 Then
      	statFailed = statFailed + 1
      	Log " !! Failed to delete %WINDIR%\SMSCFG.ini from " & UCase(remoteComputer) & "! Error " & Err.Number & " ("&Err.Description&")", True, "deleteSMSCFG", 3
      	Exit Function
      Else
      	retVal = True
      End If
    End If
    Set colFiles = Nothing
		
		retVal = True
    deleteSMSCFG = retVal
	End Function

	' ~~~~~~~~~~~~~~
	' Function to initiate action on a service and optionally on its dependencies
  Function doServiceAction(strService, strAction, remoteComputer, withDependencies, onlyDependencies, withErrorControl, waitForService, waitTimeout)
		On Error Resume Next
		
		Select Case strAction
			Case "stop"
				Log "  stopping service """ & strService & """ on " & UCase(remoteComputer) & "...", True, "doServiceAction", 1
			Case "start"
				Log "  starting service """ & strService & """ on " & UCase(remoteComputer) & "...", True, "doServiceAction", 1
			Case "restart"
				Log "  restarting service """ & strService & """ on " & UCase(remoteComputer) & "...", True, "doServiceAction", 1
		End Select

		If withDependencies Then
			Set colServiceDependencies = objWMIService.ExecQuery("Associators of " _
			   & "{Win32_Service.Name='"&strService&"'} Where " _
			        & "AssocClass=Win32_DependentService " & "Role=Antecedent" )
			If withErrorControl Then
				If err.Number <> 0 Then
		    	statWMIerror = statWMIerror + 1
		    	Log " !! Failed to query "&strService&" service dependencies on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "doServiceAction", 3
		    	Exit Function
				End If
			End If
			err.Clear
		End If

		Set colService = objWMIService.ExecQuery _
		        ("Select * from Win32_Service where Name='"&strService&"'")
		If withErrorControl Then
			If err.Number <> 0 Then
	    	statWMIerror = statWMIerror + 1
	    	Log " !! Failed to query "&strService&" from ""Win32_Service"" WMI class on " & UCase(remoteComputer) & ". Error "&Err.Number&" ("&Err.Description&")", True, "doServiceAction", 3
	    	Exit Function
			End If
		End If
		err.Clear
		
		If ((strAction = "stop" OR strAction = "restart") AND withDependencies) Then
			' Stop service dependencies...
			For Each objService in colServiceDependencies
				If objService.InterrogateService <> 6 Then
					errReturn = objService.StopService()
					If withErrorControl Then
			      If errReturn <> 0 Then
			      	statFailed = statFailed + 1
			        Log " !! Unable to stop "&objService.Name&" service on " & UCase(remoteComputer) & "! Error "&errReturn, True, "doServiceAction", 3
			        Exit Function
			      End If
			    End If
			    err.Clear
		      
		      If waitForService Then
						' Wait for service to stop.
						i = 0
				    Do While objService.InterrogateService <> 6    
				    	If err.Number <> 0 Then
				    		Exit Do
				    	End If
				    					    		
							i = i + 1
							Sleep 1
							If i > Cint(waitTimeout) Then
								' Timed out
								Exit Do
							End If
				    Loop
				  End If
			  End If
			Next
		End If
		
		If (strAction = "stop" OR strAction = "restart") AND Not onlyDependencies Then
			' Stop service itself...
			For each objService in colService
				If objService.InterrogateService <> 6 Then
			    errReturn = objService.StopService()
			    If withErrorControl Then
			      If errReturn <> 0 Then
			      	statFailed = statFailed + 1
			        Log " !! Unable to stop "&objService.Name&" service on " & UCase(remoteComputer) & "! Error "&errReturn, True, "doServiceAction", 3
			        Exit Function
			      End If
			    End If
			    err.Clear
		      
		      If waitForService Then
						' Wait for service to stop. Default timeout 20 sec
						i = 0
				    Do While isObject(objService) AND objService.InterrogateService <> 6
				    	If err.Number <> 0 Then
				    		Exit Do
				    	End If
				    	
							i = i + 1
							Sleep 1
							If i > Cint(waitTimeout) Then
								' Timed out
								Exit Do
							End If						
				    Loop
				  End If   
			  End If
			Next
		End If
		
		If (strAction = "start" OR strAction = "restart") AND Not onlyDependencies Then
	    ' Start the service...
			For Each objService in colService
				If objService.InterrogateService <> 0 Then
			    errReturn = objService.StartService()
			    If withErrorControl Then
			      If errReturn <> 0 Then
			      	statFailed = statFailed + 1
			        Log " !! Unable to start "&objService.Name&" service on " & UCase(remoteComputer) & "! Error "&errReturn, True, "doServiceAction", 3
			        Exit Function
			      End If
		    	End If
		    	err.Clear
		      
		      If waitForService Then
						' Wait for service to start. Default timeout 10 sec
						i = 0
				    Do While objService.InterrogateService <> 0
				    	If err.Number <> 0 Then
				    		Exit Do
				    	End If
				    					    	
				    	i = i + 1
							Sleep 1
							If i > Cint(waitTimeout) Then
								' Timed out
								Exit Do
							End If						
				    Loop
				  End If
			  End If
			Next
		End If
    
    If ((strAction = "start" OR strAction = "restart") AND withDependencies) Then
	    ' Now start service dependencies...
	    For Each objService In colServiceDependencies
		    errReturn = objService.StartService()
		    If withErrorControl Then
			    If errReturn <> 0 Then
			    	statFailed = statFailed + 1
		        Log " !! Failed to start "&objService.Name&" service on " & UCase(strComputer) & "! Error "&errReturn, True, "doServiceAction", 3
		        Exit Function
			    End If
			  End If
			  err.Clear
		    
		    If waitForService Then
					' Wait for service to start. Default timeout 10 sec
					i = 0
			    Do While objService.InterrogateService <> 0
			    	If err.Number <> 0 Then
			    		Exit Do
			    	End If
				    				    	
			    	i = i + 1
						Sleep 1
						If i > Cint(waitTimeout) Then
							' Timed out
							Exit Do
						End If
			    Loop
			  End If
		  Next
		End If
	  
	  doServiceAction = True
	  
	End Function

	' ~~~~~~~~~~~~~~
	' Function to initiate repair of SCCM client
  Function actionRepairClient(remoteComputer)
  	On Error Resume Next
  	Dim retVal: retVal = False
  	Err.Clear
  	Set objCCM = getWMIobject(remoteComputer, "root\ccm")
	  If (Err.number <> 0) Then
	  	statWMIerror = statWMIerror + 1
	    Exit Function
	  End If
	  Set objSCCMClient = objCCM.Get("SMS_Client")
	  If (Err.number <> 0) Then
	  	statWMIerror = statWMIerror + 1
	    Exit Function
	  End If

	  objSCCMClient.RepairClient
	  
		If err.number <> 0 Then
			statFailed = statFailed + 1
			Log " !! Failed to initiate SCCM client repair on " & UCase(remoteComputer) & "! Error "&err.number&" ("&err.description&")", True, "repairClient", 3
		Else
			retVal = True
		End If
		Set objSCCMClient = Nothing
		actionRepairClient = retVal
	End Function

	' ~~~~~~~~~~~~~~
	' Function to initiate reset of SCCM client policies
	Function actionResetPolicies(remoteComputer)
		On Error Resume Next
		Dim retVal: retVal = False
  	Err.Clear
		Set objCCM = getWMIobject(remoteComputer, "root\ccm")
	  If (Err.number <> 0) Then
	  	statWMIerror = statWMIerror + 1
	    Exit Function
	  End If
    Set objSCCMClient = objCCM.Get("SMS_Client")
	  If (Err.number <> 0) Then
	  	statWMIerror = statWMIerror + 1
	    Exit Function
	  End If
	  
	  objSCCMClient.ResetPolicy
	  
		If err.number <> 0 Then
			statFailed = statFailed + 1
			Log " !! Failed to reset SMS client policies on " & UCase(remoteComputer) & "! Error "&err.number&" ("&err.description&")", True, "resetPolicies", 3
		Else
			retVal = True
		End If
		Set objSCCMClient = Nothing
		actionResetPolicies = retVal
	End Function

	' ~~~~~~~~~~~~~~
	' Query available user and machine based advertisements on remote computer.
	Function actionQueryAdvertisement(remoteComputer, isUserBased, showAll)
		On Error Resume Next
		Err.Clear
		Dim objActualConfig
		If isUserBased Then
			If Not isNull(loggedOnUserSID) AND Len(loggedOnUserSID) > 0 Then
				Set objActualConfig = GetWMIObject(remoteComputer, "root/ccm/policy/"&Replace(loggedOnUserSID,"-","_")&"/actualconfig")
				If err.Number <> 0 Then
					Log " !! Failed to query user based advertisements!", True, "queryAdvertisement", 3
					Exit Function
				End If
			Else
				statFailed = statFailed + 1
				Log " !! SID of the logged on user is not available!", True, "queryAdvertisement", 3
				Exit Function
			End If
		Else
			Set objActualConfig = GetWMIObject(remoteComputer, "root/ccm/policy/machine/actualconfig")
			If err.Number <> 0 Then
				Log " !! Failed to query user based advertisements!", True, "queryAdvertisement", 3
				Exit Function
			End If
		End If
		
		If showAll Then
			Set objAdvertisements = objActualConfig.ExecQuery("select * from CCM_SoftwareDistribution WHERE PRG_ProgramName <> '*'")
		Else
			Set objAdvertisements = objActualConfig.ExecQuery("select * from CCM_SoftwareDistribution WHERE ADV_AdvertisementID = '" & advertisementID & "' OR (PKG_Name LIKE '%" & advertisementID & "%' OR PRG_ProgramName LIKE '%" & advertisementID & "%')" )
		End If
		If objAdvertisements.Count > 0 Then
			If showAll Then
				Log " ** Available advertisements on " & UCase(remoteComputer) & ":", True, "queryAdvertisement", 1
			Else
				Log " ** Available advertisements matching keyword """ & advertisementID & """ on " & UCase(remoteComputer) & ":", True, "queryAdvertisement", 1
			End If
			For Each objAdv In objAdvertisements				
				t = "  >> "
				If objAdv.ADV_MandatoryAssignments Then
					t = t & "Mandatory "
				Else
					t = t & "Optional "
				End If
				t = t & "advertisement " & objAdv.ADV_AdvertisementID & "."
				Log t, True, "queryAdvertisement", 1
				
				t = "    Package: " & objAdv.PKG_Manufacturer & " " & objAdv.PKG_Name
				If objAdv.PKG_Version <> "" Then
					t = t & " " & objAdv.PKG_Version
				End If
				t = t & " (" & objAdv.PKG_PackageID & ")"
				Log t, True, "queryAdvertisement", 1
				
				t = "    Program: " & objAdv.PRG_ProgramName & "."
				Log t, True, "queryAdvertisement", 1
				
				t = "    Package size: " & objAdv.PKG_ContentSize & " KB"
				Log t, True, "queryAdvertisement", 1
				
				t = "    Active since: " & convertWMIDate(objAdv.ADV_ActiveTime)
				Log t, True, "queryAdvertisement", 1

			Next
		Else
			If showAll Then
				Log " !! There are no active advertisements on " & UCase(remoteComputer) & ".", True, "queryAdvertisement", 3
			Else
				Log " !! There are no advertisements matching keyword """ & advertisementID & """ available on " & UCase(remoteComputer) & ".", True, "queryAdvertisement", 3
				advAvailable = False
			End If
		End If
		
		Set objActualConfig = Nothing
		Set objAdvertisements = Nothing
		
		actionQueryAdvertisement = True
	End Function
	
	' ~~~~~~~~~~~~~~
	' Rerun specified advertisement
	Function actionRerunAdvertisement(remoteComputer, isUserBased)
		On Error Resume Next
		Dim strScheduleMsgID
	
		Err.Clear
		If isUserBased Then
			If Not isNull(loggedOnUserSID) AND Len(loggedOnUserSID) > 0 Then
				Set objActualConfig = GetWMIObject(remoteComputer, "root/ccm/policy/"&Replace(loggedOnUserSID,"-","_")&"/actualconfig")
			Else
				statFailed = statFailed + 1
				Log " !! SID of the logged on user is not available!", True, "rerunAdvertisement", 3
				Exit Function
			End If
		Else
			Set objActualConfig = GetWMIObject(remoteComputer, "root/ccm/policy/machine/actualconfig")
		End If
		If err.number <> 0 Then
			statWMIerror = statWMIerror + 1
			Exit Function
		End If
		Set objScheduleMessages = objActualConfig.ExecQuery("select * from CCM_Scheduler_ScheduledMessage")
		If err.number <> 0 Then
			statWMIerror = statWMIerror + 1
			Log " !! Failed to query CCM_Scheduler_ScheduledMessage! Error "&err.number&" ("&err.description&")", True, "rerunAdvertisement", 3
			Exit Function
		End If
		For Each objMsg In objScheduleMessages
			If CBool(Instr(UCase(objMsg.ScheduledMessageID), UCase(advertisementID))) Then
				strScheduleMsgID = objMsg.ScheduledMessageID
			End If
		Next
		
		If isEmpty(strScheduleMsgID) Then
			statFailed = statFailed + 1
			Log " !! Advertisement " & advertisementID & " was not found on " & UCase(remoteComputer) & "!", True, "rerunAdvertisement", 3
			Exit Function			
		End if
		
		' Set rerun behavior temporarily to RerunAlways
		If Not actionSetRerunBehavior(remoteComputer, "RerunAlways") Then
			Exit Function
		End If
		
		' Trigger rerun schedule
		Set objCCM = GetWMIObject(remoteComputer, "root/ccm")
		If err.number <> 0 Then
			statWMIerror = statWMIerror + 1
			Exit Function
		End If
		Set objSCCMClient = objCCM.Get("SMS_Client")
		objSCCMClient.TriggerSchedule strScheduleMsgID
		If err.number <> 0 Then
			statWMIerror = statWMIerror + 1
			Log " !! Failed to execute TriggerSchedule! Error "&err.number&" ("&err.description&")", True, "rerunAdvertisement", 3
			Exit Function
		End If
		
		Sleep 5
		
		' Restore previous rerun behavior
		If Not actionSetRerunBehavior(remoteComputer, strOldRerunBehavior) Then
			Exit Function
		End If
		
		actionRerunAdvertisement = True
	End Function
	
	Function actionSetRerunBehavior(remoteComputer, strBehavior)	
		Err.Clear
		Set objActualConfig = GetWMIObject(remoteComputer, "root/ccm/policy/machine/actualconfig")
		If err.number <> 0 Then
			statWMIerror = statWMIerror + 1
			Exit Function
		End If
		Set objSchedules = objActualConfig.ExecQuery("select * from CCM_SoftwareDistribution where ADV_AdvertisementID = '" & advertisementID & "'" )
		If err.number <> 0 Then
			statWMIerror = statWMIerror + 1
			Log " !! Failed to query CCM_SoftwareDistribution! Error "&err.number&" ("&err.description&")", True, "setRerunBehavior", 3
			Exit Function
		End If
		
		For Each objSchedule In objSchedules
			strOldRerunBehavior = objSchedule.ADV_RepeatRunBehavior
			objSchedule.ADV_RepeatRunBehavior = strBehavior
			objSchedule.Put_ 0
			If err.number <> 0 Then
				statFailed = statFailed + 1
				Log " !! Failed to set rerun behavior to "&strBehavior&" for advertisement " & advertisementID & "! Error "&err.number&" ("&err.description&")", True, "setRerunBehavior", 3
				Exit Function
			End If
		Next
		
		actionSetRerunBehavior = True
	End Function

	' ~~~~~~~~~~~~~~
	' Refresh group policies	
	Function actionRefreshGPO(remoteComputer)
	
		' Get elevation string
		If notXP Then
			strElevate = getElevationString(remoteComputer, true)
		Else
			strElevate = getElevationString(remoteComputer, false)
		End If
	
		' Hide command window
		Set objWMIStartup = objWMIService.Get("Win32_ProcessStartup")
		Set objConfig = objWMIStartup.SpawnInstance_
		objConfig.ShowWindow = 0
	
		' Refresh machine policies
    strCommand = "cmd.exe /C echo n | gpupdate.exe /force /target:computer"
    errReturn = objWMIProcess.Create(strElevate & strCommand,null,objConfig,intProcessID)
    If errReturn <> 0 Then
    	statFailed = statFailed + 1
      Log " !! Failed to initiate policy refresh on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "refreshGPO", 3
      Exit Function
    End If
    
		' Refresh user policies
    strCommand = "cmd.exe /C echo n | gpupdate.exe /force /target:user"
    errReturn = objWMIProcess.Create(strElevate & strCommand,null,objConfig,intProcessID)
    If errReturn <> 0 Then
    	statFailed = statFailed + 1
      Log " !! Failed to initiate policy refresh on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "refreshGPO", 3
      Exit Function
    End If
    
    actionRefreshGPO = True
    
	End Function

	' ~~~~~~~~~~~~~~
	' Determine reboot pending state on remote computer	
	Function actionGetRebootState(remoteComputer)

		objWMIRegistry.GetMultiStringValue HKLM, "SYSTEM\CurrentControlSet\Control\Session Manager", "PendingFileRenameOperations", arrRenameOps
		If err.number <> 0 Then
			statFailed = statFailed + 1
			Log " !! Failed to query registry to determine reboot pending state on " & UCase(remoteComputer) & "! Error "&err.Number&".", True, "actionGetRebootState", 3
			Exit Function
		Else
			If isArray(arrRenameOps) Then
				rebootPending = True
				Log " ** Computer " & UCase(remoteComputer) & " needs to be rebooted.", True, "actionGetRebootState", 1
			Else
				rebootPending = False
				Log " ** Computer " & UCase(remoteComputer) & " does not need reboot.", True, "actionGetRebootState", 1
			End If
		End If
		
		actionGetRebootState = True
		
	End Function

	' ~~~~~~~~~~~~~~
	' Get the current logged on user name on remote computer		
	Function actionLoggedOnUser(remoteComputer)
		Set colComputerSystem = objWMIService.ExecQuery("SELECT * FROM Win32_ComputerSystem")
		If err.number <> 0 Then
			statWMIerror = statWMIerror + 1
			Log " !! Failed to query Win32_ComputerSystem! Error "&err.number&" ("&err.description&")", True, "loggedOnUser", 3
			Exit Function			
		End If
		
		loggedOnUserName = ""
		
		For Each objComputer In colComputerSystem	
	  	loggedOnUserName = objComputer.UserName
	  	If Not IsNull(objComputer.UserName) Then
	  		strUserNameSplit = Split(objComputer.UserName, "\", -1, 1)
	  	End If
		Next
		
		If IsNull(loggedOnUserName) OR Len(loggedOnUserName) = 0 Then
			Dim strLastUser
			If notXP Then
				objWMIRegistry.GetStringValue HKLM, "SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI", "LastLoggedOnUser", strLastUser
			Else
				objWMIRegistry.GetStringValue HKLM, "SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon", "DefaultUserName", strDefaultUserName
				objWMIRegistry.GetStringValue HKLM, "SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon", "DefaultDomainName", strDefaultDomainName
				strLastUser = strDefaultDomainName & "\" & strDefaultUserName
			End If

			If strLastUser <> "" Then
				Log " ** No one is logged on " & UCase(remoteComputer) & ". Last user was " & strLastUser & ".", True, "loggedOnUser", 1
			Else
				Log " ** There are no logged on users in " & UCase(remoteComputer) & "!", True, "loggedOnUser", 1
			End If
			loggedOnUserName = "-"
		Else
			' Get user SID
			Set objLocalWMIService = GetWMIObject(".", "root/cimv2")
			Set colWMIUser = objLocalWMIService.ExecQuery("SELECT * FROM Win32_UserAccount WHERE Domain='" & strUserNameSplit(0) & "' AND Name='" & strUserNameSplit(1) & "'")
			For Each objUser In colWMIUser
				loggedOnUserSID = objUser.SID
			Next

			Log " ** User " & loggedOnUserName & " is logged on " & UCase(remoteComputer) & ".", True, "loggedOnUser", 1
		End If
		
		actionLoggedOnUser = True
	End Function
	
	' ~~~~~~~~~~~~~~
	' Check if user is logged on remote computer	
	Function checkLoggedOnUser(remoteComputer)
		If Not connectWMI(remoteComputer) Then
			Exit Function
		End If
	  If Not getWMIRegistryObject(remoteComputer) Then
			Exit Function
	  End If
		If Not actionLoggedOnUser(remoteComputer) Then
			Exit Function
		End If
		Set objWMIService = Nothing
		Set objWMIRegistry = Nothing

		If LoggedOnUsername <> "-" Then
			checkLoggedOnUser = True
			Log " !! This action will not be run.", True, "processComputer", 2
		End If

	End Function
	
	' ~~~~~~~~~~~~~~
	' Get the remote computer OU path
	Function actionComputerOU(remoteComputer)
		
		If CBool(Instr(strMemberDomain, ".")) Then
			' Probably member of a domain. Extract short name
			strShortDomain = UCase(Left(strMemberDomain,Instr(strMemberDomain,".")-1))
		End If
		
		objNameTranslate.Init ADS_NAME_INITTYPE_GC, ""
		objNameTranslate.Set ADS_NAME_TYPE_NT4, strShortDomain & "\" & remoteComputer & "$"
		strOU = objNameTranslate.Get(ADS_NAME_TYPE_1779)
		strOUCanonical = convertDNtoCanonicalPath(strOU, remoteComputer)
		If Len(strOU) > 0 Then
			actionComputerOU = strOUCanonical
		Else
			Exit Function
		End If
		
	End Function

	' ~~~~~~~~~~~~~~
	' Get WSUS content location on remote computer
	Function actionWSUSServer(remoteComputer)
		objWMIRegistry.GetStringValue HKLM, "SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate", "WUServer", strWUServer
		If err.number <> 0 Then
			statFailed = statFailed + 1
			Log " !! Failed to query registry to determine WSUS content location on " & UCase(remoteComputer) & "! Error "&err.Number&".", True, "WSUSServer", 3
			Exit Function
		End If
		
		If Len(strWUServer) > 0 Then
			actionWSUSServer = strWUServer
		Else
			Log " ** WSUS content location not specified on " & UCase(remoteComputer) & ".", True, "WSUSServer", 1
			Exit Function
		End If
		
	End Function

	' ~~~~~~~~~~~~~~
	' Get Windows Update Agent version on remote computer
	Function actionWUAVersion(remoteComputer)
		
		strFilePath = Replace(strWinPath & "\" & strSystem32 & "\wuapi.dll","\","\\")

		Set colFiles = objWMIService.ExecQuery("SELECT * FROM CIM_DataFile WHERE Name = '"&strFilePath&"'")
		If err.number <> 0 Then
			statWMIerror = statWMIerror + 1
			Log " !! Failed to query CIM_DataFile! Error "&err.number&" ("&err.description&")", True, "WUAVersion", 3
			Exit Function			
		End If
		
		If colFiles.count = 0 Then
			Log " !! Could not find wuapi.dll in " & strWinPath & "\" & strSystem32 & "!", True, "WUAVersion", 3
			Exit Function
		End If
		
		For Each objFile in colFiles
			strWUAVersion = objFile.Version
		Next
		
		If CBool(Instr(strWUAVersion," ")) Then
			arrWUAVersion = Split(strWUAVersion, " ")
			strWUAVersion = arrWUAVersion(0)
		End If
		
		actionWUAVersion = strWUAVersion

	End Function
	
	' ~~~~~~~~~~~~~~
	' Get status of specified Windows update	
	Function actionPatchStatus(remoteComputer)
	
		Dim patchFound: patchFound = False
		
		' Check Windows updates
		Set colPatches = objWMIService.ExecQuery("SELECT * FROM Win32_QuickFixEngineering WHERE HotFixID = '" & KBArticle & "'")
		If err.number <> 0 Then
			statWMIerror = statWMIerror + 1
			Log " !! Failed to query Win32_QuickFixEngineering! Error "&err.number&" ("&err.description&")", True, "patchStatus", 3
			Exit Function
		End If

		If colPatches.count > 0 Then
			For Each patch in colPatches
				patchFound = True
				Log " ** "&patch.Description&" "&KBArticle&" is installed on " & UCase(remoteComputer) & " (since "&patch.InstalledOn&").", True, "patchStatus", 1
			Next
		End If
		
		If Not patchFound Then
			' Check other updates
			Set colUpdates = objWMIService.ExecQuery("SELECT * FROM Win32Reg_AddRemovePrograms WHERE DisplayName LIKE '%(" & KBArticle & ")%'")
			If err.number <> 0 Then
				statWMIerror = statWMIerror + 1
				Log " !! Failed to query Win32Reg_AddRemovePrograms! Error "&err.number&" ("&err.description&")", True, "patchStatus", 3
				Exit Function
			End If
			
			If colUpdates.count > 0 Then
				For Each update in colUpdates
					patchFound = True
					Log " ** "&update.DisplayName&" is installed on " & UCase(remoteComputer) & ".", True, "patchStatus", 1
					' No need to match multiple records
					Exit For
				Next
			End If
		End If
		
		If patchFound Then
			actionPatchStatus = "installed"
		Else
			Log " !! "&KBArticle&" is not installed on " & UCase(remoteComputer) & "! ", True, "patchStatus", 1
			actionPatchStatus = "not installed"
		End If

	End Function
	
	' ~~~~~~~~~~~~~~
	' Get remote computer uptime	
	Function actionGetUptime(remoteComputer)
	
		Set colOS = objWMIService.ExecQuery("SELECT LastBootUpTime FROM Win32_OperatingSystem")
		If err.number <> 0 Then
			statWMIerror = statWMIerror + 1
			Log " !! Failed to query Win32_OperatingSystem WMI class! Error "&err.number&" ("&err.description&")", True, "getUptime", 3
			Exit Function
		End If
		
		For Each objItem in colOS
			LastBootUp = convertWMIDate(objItem.LastBootUpTime)
		Next
		Log " ** Last boot: " & LastBootUp, True, "getUptime", 1

		actionGetUptime = datediffToWords(LastBootUp, Now())
		
	End Function
	
	' ~~~~~~~~~~~~~~
	' Run all SCCM client health checks
	Function actionFullHealthCheck(remoteComputer, doFix)
		
		Dim oneFailed: oneFailed = False
		Dim checkStatus: checkStatus = True
		lastCheckResult = ""
		
		' WMI is not automatically fixed in full health check. Fixing action must be run separately.
		If not doFix Then
			If Not actionCheckWMI(remoteComputer) Then
				checkStatus = False
			End If
			If lastCheckResult <> "Healthy" Then
				oneFailed = True
			End If
		End If
		
		' Install SCCM client when needed and allowed
		If autoInstallClientWhenMissing AND doFix Then
			If Not checkSCCMClient(remoteComputer) Then
				Log "   !! SCCM agent needs to be installed on " & UCase(remoteComputer) & "!", True, "actionFullHealthCheck", 3
				If Len(ccmsetupPath) > 0 Then
			  	If actionInstallClient(remoteComputer) Then
					  Log "   ** Successfully scheduled SCCM client install!", True, "actionFullHealthCheck", 1
					Else
						Log "   !! Failed to schedule SCCM client install! Try to initiate it separately.", True, "actionFullHealthCheck", 3
			  	End If
			  Else
			  	Log "   !! Can't install client automatically. CCMSETUP path not defined!", True, "actionFullHealthCheck", 3
			  End If
		  	lastCheckResult = ""
		  	actionFullHealthCheck = True
		  	statUnhealthy = statUnhealthy + 1
		  	Exit Function
		  End If
	  End If
		
		If Not actionCheckServices(remoteComputer, doFix) Then
			checkStatus = False
		End If
		If lastCheckResult <> "Healthy" Then
			oneFailed = True
		End If
		
		If Not actionCheckAdminShare(remoteComputer, doFix) Then
			checkStatus = False
		End If
		If lastCheckResult <> "Healthy" Then
			oneFailed = True
		End If
		
		If Not actionCheckAssignedSite(remoteComputer, doFix) Then
			checkStatus = False
		End If
		If lastCheckResult <> "Healthy" Then
			oneFailed = True
		End If
		
		If Not actionCheckRegistry(remoteComputer, doFix) Then
			checkStatus = False
		End If
		If lastCheckResult <> "Healthy" Then
			oneFailed = True
		End If
		
		If Not actionCheckInventory(remoteComputer, doFix) Then
			checkStatus = False
		End If
		If lastCheckResult <> "Healthy" Then
			oneFailed = True
		End If
		
		If Not actionCheckClientVersion(remoteComputer, doFix)	Then
			checkStatus = False
		End If
		If lastCheckResult <> "Healthy" Then
			oneFailed = True
		End If
		
		If Not oneFailed Then
			statHealthy = statHealthy + 1
		Else
			statUnhealthy = statUnhealthy + 1
		End If
		
		lastCheckResult = ""
		
		actionFullHealthCheck = checkStatus
		
	End Function

	' ~~~~~~~~~~~~~~
	' Generate a REG file to set "disabledomaincreds" registry value to 0
	Function prepareDisableDomainCredsWorkaround()
		strRegFileName = "disableDomainCreds.reg"
		strLocalRegFilePath = localTempPath & "\" & strRegFileName
		err.Clear
		' Write batch file contents
		Set objRegfile = objFSO.OpenTextFile(strLocalRegFilePath, ForWriting, True)
		objRegfile.WriteLine "Windows Registry Editor Version 5.00"
		objRegfile.WriteLine "[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa]"
		objRegfile.WriteLine """disabledomaincreds""=dword:00000000"
		objRegfile.WriteLine ""
		objRegfile.Close
		Set objRegfile = Nothing	
		
		prepareDisableDomainCredsWorkaround = True		
	End Function

	' ~~~~~~~~~~~~~~
	' Function to dynamically create a batch file for fixing remote WMI	
	Function prepareFixWMI()
		
		strBatchFileName = "fixwmi.bat"
		strLocalBatchFilePath = localTempPath & "\" & strBatchFileName
		
		strXPExecutables = array("mofcomp.exe","scrcons.exe","unsecapp.exe","winmgmt.exe","wmiadap.exe","wmiapsrv.exe","wmiprvse.exe")
		str7Executables = array("scrcons.exe","unsecapp.exe","wmiadap.exe","wmiapsrv.exe","wmiprvse.exe")
		strExecutables = array("mofcomp.exe","scrcons.exe","unsecapp.exe","winmgmt.exe","wmiadap.exe","wmiapsrv.exe","wmiprvse.exe")
		
		err.Clear
		' Write batch file contents
		Set objBatchfile = objFSO.OpenTextFile(strLocalBatchFilePath, ForWriting, True)
		If err.Number <> 0 Then
			MsgBox "Failed to create "&strLocalBatchFilePath&"! Error "&err.Number&".", vbCritical
			Exit Function
		End If
		objBatchfile.WriteLine "net stop winmgmt"
		
		objBatchfile.WriteLine "PUSHD ""%windir%\system32\wbem"""
		objBatchfile.WriteLine "for %%i in (*.dll) do regsvr32 -s %%i"
		For i = 0 To UBound(strExecutables)
			objBatchfile.WriteLine strExecutables(i) & " /RegServer"
		Next
		
		objBatchfile.WriteLine "IF EXIST ""%windir%\SysWOW64\wbem"" ("
		objBatchfile.WriteLine "GOTO OS_64"
		objBatchfile.WriteLine ") ELSE ("
		objBatchfile.WriteLine "GOTO Gate1"
		objBatchfile.WriteLine ")"
		
		objBatchfile.WriteLine ":OS_64"
		objBatchfile.WriteLine "PUSHD ""%windir%\SysWOW64\wbem"""
		objBatchfile.WriteLine "for %%i in (*.dll) do regsvr32 -s %%i"
		For i = 0 To UBound(strExecutables)
			objBatchfile.WriteLine strExecutables(i) & " /RegServer"
		Next
		objBatchfile.WriteLine "POPD"
		
		objBatchfile.WriteLine ":Gate1"
		objBatchfile.WriteLine "ver | find ""XP"" > nul" 
		objBatchfile.WriteLine "IF NOT %ERRORLEVEL% == 1 ("
		objBatchfile.WriteLine "GOTO ver_xp"
		objBatchfile.WriteLine ") ELSE ("
		objBatchfile.WriteLine "GOTO ver_7"
		objBatchfile.WriteLine ")"

		objBatchfile.WriteLine ":ver_xp"
		objBatchfile.WriteLine "for %%i in (*.mof) do mofcomp %%i"
		objBatchfile.WriteLine "for %%i in (*.mfl) do mofcomp %%i"
		objBatchfile.WriteLine "GOTO End"
		
		objBatchfile.WriteLine ":ver_7"
		objBatchfile.WriteLine """%windir%\system32\wbem\winmgmt.exe"" /resetrepository"
		objBatchfile.WriteLine "GOTO End"
		
		objBatchfile.WriteLine ":End"
		objBatchfile.WriteLine "net start ccmexec"
		objBatchfile.WriteLine "net start winmgmt"
		objBatchfile.WriteLine "POPD"
		objBatchfile.WriteLine "DEL /F /Q ""%windir%\temp\fixwmi.bat"""
		objBatchfile.WriteLine "EXIT"
		objBatchfile.Close
		Set objBatchfile = Nothing
		
		prepareFixWMI = True
	End Function
	
	' ~~~~~~~~~~~~~~
	' Execute WMI fix script on remote computer
	Function actionFixWMI(remoteComputer)

		strBatchFileName = "fixwmi.bat"
		strLocalBatchFilePath = localTempPath & "\" & strBatchFileName
		strLocalTempPath = strWinPath & "\temp\"
		strRemoteTempPath = "\\" & remoteComputer & "\admin$\temp"

		' Copy batch file to remote computer and run
		If Not doRemoteCopy(strLocalBatchFilePath, strRemoteTempPath, remoteComputer) Then
			statFailed = statFailed + 1
			Log "   !! Failed to copy "&strBatchFileName&" to " & UCase(remoteComputer) & "!", True, "fixWMI", 3
			Exit Function
		End If
		
    ' Stop WMI service along with dependencies
    If Not doServiceAction("winmgmt", "stop", remoteComputer, true, true, false, true, 45) Then
        statFailed = statFailed + 1
        Log "   !! Failed to stop WMI service before running the fix!", True, "fixWMI", 3
        Exit Function
    End If
		
		If notXP Then
			' Get elevation string for UAC bypass
			strElevate = getElevationString(remoteComputer, true)
		Else
			' For XP we can use empty string here
			strElevate = ""
		End If
		
		' Start wmifix.bat on remote computer
		Set objWMIStartup = objWMIService.Get("Win32_ProcessStartup")
		Set objConfig = objWMIStartup.SpawnInstance_
		objConfig.ShowWindow = 0
		
    errReturn = objWMIProcess.Create(strElevate & strLocalTempPath & strBatchFileName & " >" & strLocalTempPath & "fixwmi.log",null,objConfig,intFixProcessID)
    If errReturn <> 0 Then
    	statFailed = statFailed + 1
      Log "   !! Failed to start " & strLocalTempPath & strBatchFileName & " on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "fixWMI", 3
      Exit Function
    End If
				
		actionFixWMI = True	
	End Function

	' ~~~~~~~~~~~~~~
	' Copy a file or files to strDestPath on remote computer
	Function doRemoteCopy(strFilePath, strDestPath, remoteComputer)

		If remoteComputer = "localhost" Then
			doRemoteCopy = True
			Exit Function
		End If
		
		If IHaveVistaOrAbove Then
			strCmdKey = "cmdkey.exe"
		Else
			strCmdKey = scriptPath & "\cmdkey.exe"
		End If
		
		If Not integratedAuth Then			
			' Caches alternate credentials temporarily for remote computer
			strCmdKeyCmd = Chr(34) & strCmdKey & Chr(34) & " /add:"&remoteComputer&" /user:"&strUsername&" /pass:"&strPassword
			errReturn = objShell.run(strCmdKeyCmd, 0, True)
			If errReturn <> 0 Then
				Log " !! Failed to store alternate credentials for " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "doRemoteCopy", 3
				Exit Function
			End If
		End If
		
		' Execute copy command
		copyFailed = False
		strCopyCommand = "cmd.exe /C XCOPY """ & strFilePath & """ "&strDestPath&"\ /Y"
		errReturn = objShell.run(strCopyCommand, 0, True)
		If errReturn <> 0 Then
			Log " !! Failed to execute remote copy command (path """&strFilePath&""") on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "doRemoteCopy", 3
			copyFailed = True
		End If
		
		If Not integratedAuth Then
			' Deletes cached credentials
			strCmdKeyCmd = Chr(34) & strCmdKey & Chr(34) & " /delete:"&remoteComputer
			errReturn = objShell.run(strCmdKeyCmd, 0, True)
			If errReturn <> 0 Then
				Log " !! Warning! Failed to delete the stored alternate credentials for " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "doRemoteCopy", 2
			End If
		End If
		
		If copyFailed Then
			Exit Function
		End If		
		
		doRemoteCopy = True
		
	End Function
	
	' ~~~~~~~~~~~~~~
	' Query registry for current "disabledomaincreds" value
	Function getDisableDomainCredsValue()
		On Error Resume Next
		strKeyPath = "SYSTEM\CurrentControlSet\Control\Lsa"
		objLocalWMIRegistry.GetDWORDValue HKLM, strKeyPath, "disabledomaincreds", dwValue
		If Err.Number <> 0 Then
			Exit Function
		End If
		getDisableDomainCredsValue = dwValue
	End Function

	' ~~~~~~~~~~~~~~
	' Check services required for SCCM agent
	Function actionCheckServices(remoteComputer, doFix)
		
		Dim checkStatus: checkStatus = True
		Log "  >> Checking services...", True, "checkServices", 1
		
		arrServicesToCheck = Split(checkserviceslist,",")
		For i = 0 To UBound(arrServicesToCheck)
			If Not checkService(arrServicesToCheck(i), remoteComputer, doFix) Then
				checkStatus = False
			End If
		Next
		
		If Not checkStatus Then
			lastCheckResult = "Unhealthy"
			If Not isFullHealthCheck Then
				statUnhealthy = statUnhealthy + 1
			End If
		Else
			lastCheckResult = "Healthy"
			If Not isFullHealthCheck Then
				statHealthy = statHealthy + 1
			End If
			Log "   ** Required services are running.", True, "checkServices", 1
		End If
		
		actionCheckServices = checkStatus
	End Function
	
	' ~~~~~~~~~~~~~~
	' Check the status of a specified service on remote computer	
	Function checkService(strService, remoteComputer, doFix)
		On Error Resume Next
		Dim notHealthy: notHealthy = False
		Dim mustBeRunning: mustBeRunning = True
		Set objService = objWMIService.Get("Win32_Service.Name='" & strService & "'")

		If isObject(objService) Then

			' Handle services that are fine with Manual startup
			Select Case strService
				Case "bits"
					mustBeRunning = False
					If objService.StartMode = "Disabled" Then
						notHealthy = True
					End If
				Case "wuauserv"
					If notXP Then
						If objService.StartMode = "Disabled" Then
							notHealthy = True
						End If
					Else
						If objService.StartMode <> "Auto" Then
							notHealthy = True				
						End If
					End If
				Case Else
					If objService.StartMode <> "Auto" Then
						notHealthy = True				
					End If
			End Select

			If notHealthy Then
				If doFix Then
					errReturn = objService.ChangeStartMode("Automatic")	
					If errReturn <> 0 Then
						Log "   !! Failed to set service """ & strService & """ to start automatically! (Error "&errReturn&")", True, "checkServices", 3
						statFailed = statFailed + 1
						Exit Function
					Else
						Log "   ** Service """ & strService & """ wasn't set to start automatically! Fixed.", True, "checkServices", 2
					End If	
				Else
					Log "   !! Service """ & strService & """ isn't set to start automatically!", True, "checkServices", 2
					Exit Function
				End If
			End If
			
			If objService.State <> "Running" Then
				If mustBeRunning Then
					If doFix Then
						If Not doServiceAction(strService, "start", remoteComputer, true, false, false, true, 30) Then
							Log "   !! Failed to start service """ & strService & """!", True, "checkServices", 3
							statFailed = statFailed + 1
							Exit Function
						Else
							Log "   ** Service """ & strService & """ wasn't running. Fixed.", True, "checkServices", 2
						End If
					Else
						Log "   !! Service """ & strService & """ isn't running!", True, "checkServices", 2
						Exit Function
					End If
				End If
			End If

		Else
			Log "   !! Did not find service """ & strService & """!", True, "checkServices", 2
			Exit Function			
		End If

		checkService = True
	End Function

	' ~~~~~~~~~~~~~~
	' Check admin$ share availability on remote computer and apply fixes if needed
	Function actionCheckAdminShare(remoteComputer, doFix)
		On Error Resume Next
		Log "  >> Checking admin$ share...", True, "checkAdminShare", 1
		
		Set objAdminShare = objWMIService.Get("Win32_Share.Name='ADMIN$'")
		If Not isObject(objAdminShare) Then
			If Not isFullHealthCheck Then
				statUnhealthy = statUnhealthy + 1
			End If
			lastCheckResult = "Unhealthy"
			If doFix Then
				Dim AutoShareWksValue
				objWMIRegistry.GetDWORDValue HKLM, "SYSTEM\CurrentControlSet\Services\LanManServer\Parameters", "AutoShareWks", AutoShareWksValue
	
				If AutoShareWksValue <> 1 OR AutoShareWksValue Is Nothing Then
					err.Clear
					' Try to create administrative shares if they're disabled...
					objWMIRegistry.SetDWORDValue HKLM, "SYSTEM\CurrentControlSet\Services\LanManServer\Parameters", "AutoShareWks", 1
					If err.Number <> 0 Then
						statFailed = statFailed + 1
						Log "   !! Failed to fix admin$ share on " & UCase(remoteComputer) & "! Error " & err.Number & " ("&err.Description&")", True, "checkAdminShare", 3
						Exit Function
					End If
				End If
	
				' Restart LanmanServer service...
				If Not doServiceAction("LanmanServer", "restart", remoteComputer, true, false, false, true, 20) Then
					statFailed = statFailed + 1
					Log "   !! Failed to restart LanmanServer service on " & UCase(remoteComputer) & "! Admin$ shares will start working after restart.", True, "checkAdminShare", 3
					Exit Function
				End If
				
				If Not isFullHealthCheck Then
					statUnhealthy = statUnhealthy - 1
					statHealthy = statHealthy + 1
				End If
				lastCheckResult = "Healthy"
				Log "   ** Admin$ share has been fixed on " & UCase(remoteComputer) & "!", True, "checkAdminShare", 2
			Else
				Log "   !! Admin$ share unavailable on " & UCase(remoteComputer) & "!", True, "checkAdminShare", 2
				Exit Function
			End If
		Else
			If Not isFullHealthCheck Then
				statHealthy = statHealthy + 1
			End If
			lastCheckResult = "Healthy"
			Log "   ** Admin$ share is healthy on " & UCase(remoteComputer) & "!", True, "checkAdminShare", 1
		End If
		
		actionCheckAdminShare = True
	End Function

	' ~~~~~~~~~~~~~~
	' Check if client version matches the defined version. Optionally runs the fix by initiated client install (upgrade)
	Function actionCheckClientVersion(remoteComputer, doFix)
		
		On Error Resume Next
		Dim thisClientVersion
		Log "  >> Checking version...", True, "checkClientVersion", 1

		thisClientVersion = getClientVersion(remoteComputer)
		
		If Len(thisClientVersion) > 0 Then

			If Not checkClientVersion(thisClientVersion) Then
				Log "   !! Client version ("""&thisClientVersion&""") is older than expected on " & UCase(remoteComputer) & "!", True, "checkClientVersion", 2
				If Not isFullHealthCheck Then
					statUnhealthy = statUnhealthy + 1
				End If
				lastCheckResult = "Unhealthy"

				' Install SCCM client when needed and allowed
				If autoInstallClientWhenMissing AND doFix Then
						Log "   !! SCCM client needs to be upgraded to "&correctClientVersion&" on " & UCase(remoteComputer) & "!", True, "checkClientVersion", 3
						If Len(ccmsetupPath) > 0 Then
					  	If actionInstallClient(remoteComputer) Then
							  Log "   ** Successfully scheduled SCCM client install!", True, "checkClientVersion", 1
							  If Not isFullHealthCheck Then
							  	statUnhealthy = statUnhealthy - 1
							  	statHealthy = statHealthy + 1
							  End If
							  lastCheckResult = "Healthy"
							  actionCheckClientVersion = True
							Else
								Log "   !! Failed to schedule SCCM client install! Try to initiate it separately.", True, "checkClientVersion", 3
					  	End If
					  Else
					  	Log "   !! Can't install client automatically. CCMSETUP path not defined!", True, "checkClientVersion", 3
					  End If
					Exit Function
				Else
					Exit Function
			  End If

				Exit Function
			End If
			
			If Not isFullHealthCheck Then
				statHealthy = statHealthy + 1
			End If
			lastCheckResult = "Healthy"
			Log "   ** Client version is OK. " & thisClientVersion & " is installed.", True, "checkClientVersion", 1
			
			actionCheckClientVersion = True
			
		Else
			Log "   !! Failed to determine client version on " & UCase(remoteComputer) & "!", True, "checkClientVersion", 1
			actionCheckClientVersion = False
		End If

	End Function
	
	' ~~~~~~~~~~~~~~
	' Check whether or not SCCM client exists and is up to date	
	Function checkSCCMClient(remoteComputer)
		
		' Check ccmexec service	
		If Not verifySMSService(remoteComputer) Then
			Exit Function
		End If
		
		' Check SCCM client version
		thisClientVersion = getClientVersion(remoteComputer)
		If Not checkClientVersion(thisClientVersion) Then
			Exit Function
		End If
		
		checkSCCMClient = True
		
	End Function
	
	' ~~~~~~~~~~~~~~
	' Compare given SCCM agent version number to the expected "latestClientVersion" value defined in config.ini.	
	Function checkClientVersion(installedVersion)

	  If CBool(Instr(installedVersion, ".")) Then
		  arrThisClientVersion = Split(installedVersion,".")
		  arrCorrectClientVersion = Split(correctClientVersion,".")

		  If UBound(arrThisClientVersion) > 0 Then
			  For i = 0 To UBound(arrThisClientVersion)
			  	If arrThisClientVersion(i) < arrCorrectClientVersion(i) Then
						Exit Function
			  	End If
				Next
			Else
				Exit Function
			End If
			
			checkClientVersion = True
		Else
			checkClientVersion = False
		End If
	  
	End Function
	
	' ~~~~~~~~~~~~~~
	' Query WMI to determine SCCM agent version on remote computer.	
	Function getClientVersion(remoteComputer)
		' Connect to CCM namespace
    Err.Clear
  	Set objCCM = getWMIobject(remoteComputer, "root\ccm")
	  If (Err.number <> 0) Then
	    Exit Function
	  End If
		
		Set colProperties = objCCM.ExecQuery("Select * from SMS_Client")
		For Each objProperty In colProperties
			thisClientVersion = objProperty.ClientVersion
		Next
	  If (err.number <> 0) Then
	  	Log "   !! Failed to query SMS_Client WMI class on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "getClientVersion", 3
	    Exit Function
	  End If
	  
	  getClientVersion = thisClientVersion
	  
	End Function

	' ~~~~~~~~~~~~~~
	' Prepare the scripts for site discovery in local computer. It will be copied to remote computers for execution.
	Function prepareCheckAssignedSite()
	  ' Create site discovery scripts
		strLocalScriptFilePath = localTempPath & "\discoversite.vbs"
		strLocalBatchFilePath = localTempPath & "\discoversite.bat"
		
		err.Clear
		' Write VBScript contents
		Set objScriptfile = objFSO.OpenTextFile(strLocalScriptFilePath, ForWriting, True)
		If err.Number <> 0 Then
			MsgBox "Failed to create "&strLocalScriptFilePath&"! Error "&err.Number&".", vbCritical
			Exit Function
		End If
		objScriptfile.WriteLine "On Error Resume Next"
		objScriptfile.WriteLine "Set oClient = CreateObject(""Microsoft.SMS.Client"")"
		objScriptfile.WriteLine "AssignedSite = oClient.GetAssignedSite"
		objScriptfile.WriteLine "oClient.EnableAutoAssignment 1"
		objScriptfile.WriteLine "DiscoveredSite = oClient.AutoDiscoverSite"
		objScriptfile.WriteLine "oClient.SetAssignedSite DiscoveredSite, 0"
		objScriptfile.WriteLine "WScript.Quit(Err.Number)"
		objScriptfile.Close
		Set objScriptfile = Nothing
		
		' Write Batch contents
		Set objBatchfile = objFSO.OpenTextFile(strLocalBatchFilePath, ForWriting, True)
		If err.Number <> 0 Then
			MsgBox "Failed to create "&strLocalBatchFilePath&"! Error "&err.Number&".", vbCritical
			Exit Function
		End If
		objBatchfile.WriteLine "cscript.exe %~dp0discoversite.vbs"
		objBatchfile.WriteLine "RESULT: %ERRORLEVEL%"
		objBatchfile.WriteLine "DEL /F /S %~dp0discoversite.*"
		objBatchfile.Close
		Set objBatchfile = Nothing
		
		prepareCheckAssignedSite = True
	End Function
	
	' ~~~~~~~~~~~~~~
	' Check if client is assigned to a site
	Function actionCheckAssignedSite(remoteComputer, doFix)
	
		On Error Resume Next
		Log "  >> Checking assigned site...", True, "checkAssignedSite", 1
		
		strLocalTempPath = strWinPath & "\temp\"
		strRemoteTempPath = "\\" & remoteComputer & "\admin$\temp"
		
  	Err.Clear
  	Set objCCM = getWMIobject(remoteComputer, "root\ccm")
	  If (Err.number <> 0) Then
	  	statWMIerror = statWMIerror + 1
	    Exit Function
	  End If
	  
	  Set objSCCMClient = objCCM.Get("SMS_Client")
	  Set result = objSCCMClient.ExecMethod_("GetAssignedSite")
	  If (Err.number <> 0) Then
	  	statWMIerror = statWMIerror + 1
	  	Log "   !! Failed to open SMS_Client WMI class on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "checkAssignedSite", 3
	    Exit Function
	  End If
	  
	  thisSitecode = result.sSiteCode
	  
	  If thisSitecode <> "" Then
	  	If Not isFullHealthCheck Then
	  		statHealthy = statHealthy + 1
	  	End If
	  	lastCheckResult = "Healthy"
	  	Log "   ** " & UCase(remoteComputer) & " is assigned to " & thisSitecode & ".", True, "checkAssignedSite", 1
	  Else
	  	' Client is not assigned
	  	If Not isFullHealthCheck Then
	  		statUnhealthy = statUnhealthy + 1
	  	End If
	  	lastCheckResult = "Unhealthy"

			If doFix Then
			  ' Enable autodiscovery
			  Set colProperties = objCCM.ExecQuery("Select * from SMS_Client")
			  For Each objProperty in colProperties
			  	objProperty.EnableAutoAssignment = True
					objProperty.Put_ 0
				Next
			  If (Err.number <> 0) Then
			  	statWMIerror = statWMIerror + 1
			  	Log "   !! Failed to enable autodiscovery on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "checkAssignedSite", 3
			    Exit Function
			  End If
				
				' Copy script files to remote computer
				If Not doRemoteCopy(localTempPath & "\discoversite.*", strRemoteTempPath, remoteComputer) Then
					statFailed = statFailed + 1
					Log "   !! Failed to copy discoversite.* to " & UCase(remoteComputer) & "!", True, "checkAssignedSite", 3
					Exit Function
				End If
				
				' Start the script in remote computer
				If notXP Then
					' Get elevation string for UAC bypass
					strElevate = getElevationString(remoteComputer, true)
				Else
					' For XP we can use empty string here
					strElevate = ""
				End If
				
				Set objWMIStartup = objWMIService.Get("Win32_ProcessStartup")
				Set objConfig = objWMIStartup.SpawnInstance_
				objConfig.ShowWindow = 0
		    errReturn = objWMIProcess.Create(strElevate & strLocalTempPath & "discoversite.bat >" & strLocalTempPath & "\discoversite.log",null,objConfig,intProcessID)
		    If errReturn <> 0 Then
		    	statFailed = statFailed + 1
		      Log "   !! Failed to start " & strLocalTempPath & "discoversite.bat on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "checkAssignedSite", 3
		      Exit Function
		    End If
		    
		    If Not isFullHealthCheck Then
		  		statUnhealthy = statUnhealthy - 1
		  		statHealthy = statHealthy + 1
		  	End If
		  	lastCheckResult = "Healthy"
		  	Log "   !! " & UCase(remoteComputer) & " was not assigned to any site. Autodiscovery was scheduled successfully.", True, "checkAssignedSite", 2
		  Else
		  	Log "   !! " & UCase(remoteComputer) & " is not assigned to any site!", True, "checkAssignedSite", 2
		  	Exit Function
		  End If
	  	
	  End If

		actionCheckAssignedSite = True

	End Function	

	' ~~~~~~~~~~~~~~
	' Check most common registry settings for healthy SCCM client
	Function actionCheckRegistry(remoteComputer, doFix)
		On Error Resume Next
		Dim checkStatus: checkStatus = True
		Dim oneFailed: oneFailed = False
		Log "  >> Checking registry...", True, "checkRegistry", 1
		
		If checkEnableDCOM Then
			' Check DCOM
			objWMIRegistry.GetStringValue HKLM, "SOFTWARE\Microsoft\Ole", "EnableDCOM", strEnableDCOM
			If strEnableDCOM = "Y" Then
				Log "   ** DCOM is enabled.", True, "checkRegistry", 1
			Else
				oneFailed = True
				If doFix Then
					objWMIRegistry.SetStringValue HKLM, "SOFTWARE\Microsoft\Ole", "EnableDCOM", "Y"
				  If err.Number <> 0 Then
					  statFailed = statFailed + 1
						Log "   !! Failed to modify registry on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "checkRegistry", 3
						Exit Function
					End If
					oneFailed = False
					Log "   !! DCOM was not enabled! Fixed.", True, "checkRegistry", 2
				Else
					Log "   !! DCOM is not enabled!", True, "checkRegistry", 2
					checkStatus = False
				End If
			End If
		End If

		' Check distributed COM functionality:
		If checkEnableRemoteConnect Then
			' Check EnableRemoteConnect
			objWMIRegistry.GetStringValue HKLM, "SOFTWARE\Microsoft\Ole", "EnableRemoteConnect", strEnableRemoteConnect
			If strEnableRemoteConnect = "Y" Then
				Log "   ** EnableRemoteConnect is enabled.", True, "checkRegistry", 1
			Else
				oneFailed = True
				If doFix Then
					objWMIRegistry.SetStringValue HKLM, "SOFTWARE\Microsoft\Ole", "EnableRemoteConnect", "Y"
				  If err.Number <> 0 Then
					  statFailed = statFailed + 1
						Log "   !! Failed to modify registry on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "checkRegistry", 3
						Exit Function
					End If
					oneFailed = False
					Log "   !! EnableRemoteConnect was not enabled! Fixed.", True, "checkRegistry", 2
				Else			
					Log "   !! EnableRemoteConnect is not enabled!", True, "checkRegistry", 2
					checkStatus = False
				End If
			End If
		End If
		
		If checkLegacyAuthenticationLevel Then
			' Check LegacyAuthenticationLevel
			objWMIRegistry.GetDWORDValue HKLM, "SOFTWARE\Microsoft\Ole", "LegacyAuthenticationLevel", LegacyAuthenticationLevel
			If LegacyAuthenticationLevel = 2 Then
				Log "   ** LegacyAuthenticationLevel is 2.", True, "checkRegistry", 1
			Else
				oneFailed = True
				If doFix Then
					objWMIRegistry.SetDWORDValue HKLM, "SOFTWARE\Microsoft\Ole", "LegacyAuthenticationLevel", 2
				  If err.Number <> 0 Then
					  statFailed = statFailed + 1
						Log "   !! Failed to modify registry on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "checkRegistry", 3
						Exit Function
					End If
					oneFailed = False
					Log "   !! LegacyAuthenticationLevel is not 2! Fixed.", True, "checkRegistry", 2
				Else
					Log "   !! LegacyAuthenticationLevel is not 2!", True, "checkRegistry", 2
					checkStatus = False
				End If
			End If
		End If
		
		If checkLegacyImpersonationLevel Then
			' Check LegacyImpersonationLevel
			objWMIRegistry.GetDWORDValue HKLM, "SOFTWARE\Microsoft\Ole", "LegacyImpersonationLevel", LegacyImpersonationLevel
			If LegacyImpersonationLevel = 2 Then
				Log "   ** LegacyImpersonationLevel is 2.", True, "checkRegistry", 1
			Else
				oneFailed = True
				If doFix Then
					objWMIRegistry.SetDWORDValue HKLM, "SOFTWARE\Microsoft\Ole", "LegacyImpersonationLevel", 2
				  If err.Number <> 0 Then
					  statFailed = statFailed + 1
						Log "   !! Failed to modify registry on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "checkRegistry", 3
						Exit Function
					End If
					oneFailed = False
					Log "   !! LegacyImpersonationLevel is not 2! Fixed.", True, "checkRegistry", 2
				Else			
					Log "   !! LegacyImpersonationLevel is not 2!", True, "checkRegistry", 2
					checkStatus = False
				End If
			End If
		End If
		
		If oneFailed Then
			If Not isFullHealthCheck Then
				statUnhealthy = statUnhealthy + 1
			End If
			lastCheckResult = "Unhealthy"
		Else
			If Not isFullHealthCheck Then
				statHealthy = statHealthy + 1
			End If
			lastCheckResult = "Healthy"
		End If
		
		If Not doFix Then
			If Not checkStatus Then
				Exit Function
			End If
		End If
		
		actionCheckRegistry = True
		
	End Function
	
	' ~~~~~~~~~~~~~~
	' Check hardware inventory dates and initiate full resync if needed
	Function actionCheckInventory(remoteComputer, doFix)
		On Error Resume Next
		Dim oneFailed: oneFailed = False
		Dim checkStatus: checkStatus = True
		Log "  >> Checking inventory...", True, "checkInventory", 1
		
		' Check hardware inventory
    Err.Clear
    Set objCCMInv = GetWMIObject(remoteComputer, "root\ccm\invagt")
    If (Err.number <> 0) then
    	statWMIerror = statWMIerror + 1
    	Log "   !! Failed to connect to root\ccm\invagt WMI namespace on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "checkInventory", 3
    	Exit Function
    End If
    
    Set colInventory = objCCMInv.ExecQuery ("Select * From InventoryActionStatus where InventoryActionID = '{00000000-0000-0000-0000-000000000001}'")
    For Each objInventory In colInventory
    	lastHW = objInventory.LastCycleStartedDate
  	Next
    If (Err.number <> 0) then
    	statWMIerror = statWMIerror + 1
    	Log "   !! Failed to query WMI class InventoryActionStatus on " & UCase(remoteComputer) & "! Error "&err.Number&" ("&err.Description&")", True, "checkInventory", 3
    	Exit Function
    End If
		
		If lastHW <> "" Then
			strLastHWScan = convertWMIDate(lastHW)
			strHWScanDifference = DateDiff("d", strLastHWScan, CDate(Date() & " " & Time()))
			If Cint(daysFromLastHWScan) > Cint(strHWScanDifference) Then
				Log "   ** Last hardware scan was " & strHWScanDifference & " days ago on " & strLastHWScan & ". Healthy.", True, "checkInventory", 1
			Else
				oneFailed = True
				If doFix Then
					' Call full HW inventory
					If Not actionInventoryResync(remoteComputer, "{00000000-0000-0000-0000-000000000001}", true) Then
						Log "   !! Failed to do full HW inventory resync on " & UCase(remoteComputer) & "!", True, "checkInventory", 3
					Else
				  	' Invoke TriggerSchedule method
						If Not actionTriggerSchedule(remoteComputer, "{00000000-0000-0000-0000-000000000001}", true) Then
							Log "   !! Failed to trigger HW inventory cycle on " & UCase(remoteComputer) & "!", True, "checkInventory", 3
						Else
							oneFailed = False
							Log "   !! Last hardware scan was " & strHWScanDifference & " days ago. Successfully triggered full resync.", True, "checkInventory", 2
						End If	
					End If
				Else
					Log "   !! Last hardware scan was " & strHWScanDifference & " days ago on " & strLastHWScan & "! Not healthy!", True, "checkInventory", 2
					checkStatus = False
				End If
			End If
		Else
			Log "   !! Failed to get last HW scan date! Inventory may be running on client.", True, "checkInventory", 3
			checkStatus = False
		End If
  	
  	' Check software inventory
    Set colInventory = objCCMInv.ExecQuery ("Select * From InventoryActionStatus where InventoryActionID = '{00000000-0000-0000-0000-000000000002}'")
    For Each objInventory In colInventory
    	lastSW = objInventory.LastCycleStartedDate
  	Next
  	
  	If lastSW <> "" Then
			strLastSWScan = convertWMIDate(lastSW)
			strSWScanDifference = DateDiff("d", strLastSWScan, Date())
			If Cint(daysFromLastSWScan) > Cint(strSWScanDifference) Then
				Log "   ** Last software scan was " & strSWScanDifference & " days ago on " & strLastSWScan & ". Healthy.", True, "checkInventory", 1
			Else
				oneFailed = True
				If doFix Then
					' Call full SW inventory
					If Not actionInventoryResync(remoteComputer, "{00000000-0000-0000-0000-000000000002}", true) Then
						Log "   !! Failed to do full SW inventory resync on " & UCase(remoteComputer) & "!", True, "checkInventory", 3
					Else
				  	' Invoke TriggerSchedule method
						If Not actionTriggerSchedule(remoteComputer, "{00000000-0000-0000-0000-000000000002}", true) Then
							Log "   !! Failed to trigger SW inventory cycle on " & UCase(remoteComputer) & "!", True, "checkInventory", 3
						Else
							oneFailed = False
							Log "   !! Last software scan was " & strSWScanDifference & " days ago. Successfully triggered full resync.", True, "checkInventory", 2
						End If
					End If
	
				
				Else
					Log "   !! Last software scan was " & strSWScanDifference & " days ago on " & strLastSWScan & "! Not healthy!", True, "checkInventory", 2
					checkStatus = False
				End If
			End If
		Else
			Log "   !! Failed to get last SW scan date! Inventory may be running on client.", True, "checkInventory", 3
			checkStatus = False
		End If
		
		If oneFailed Then
			If Not isFullHealthCheck Then
				statUnhealthy = statUnhealthy + 1
			End If
			lastCheckResult = "Unhealthy"
		Else
			If Not isFullHealthCheck Then
				statHealthy = statHealthy + 1
			End If
			lastCheckResult = "Healthy"
		End If	
  	
  	If Not checkStatus Then
  		Exit Function
  	End If
  	
  	actionCheckInventory = True  	

	End Function
	
	
	' ~~~~~~~~~~~~~~
	' Run command-line remotely
	Function actionRunCommand(remoteComputer)
		On Error Resume Next

		' Get scheduling string
		strElevate = getElevationString(remoteComputer, true)
		
		' Start command on remote computer
		Set objWMIStartup = objWMIService.Get("Win32_ProcessStartup")
		Set objConfig = objWMIStartup.SpawnInstance_
		objConfig.ShowWindow = 0
		
    errReturn = objWMIProcess.Create(strElevate & runCommandline,null,objConfig,intRunProcessID)
    If errReturn <> 0 Then
    	statFailed = statFailed + 1
      Log "   !! Failed to execute """&runCommandline&""" on " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "runCommand", 3
      Exit Function
    End If
		
		actionRunCommand = True
	End Function
	
	' ~~~~~~~~~~~~~~
	' Open client log folder(s)
	Function openClientFolder(remoteComputer, intIndex)
		
		If is64bit Then
			If intIndex = "2" Then
				strRemoteTempPath = "\\" & remoteComputer & "\admin$\"
			Else
				strRemoteTempPath = "\\" & remoteComputer & "\admin$\SysWOW64\"
			End If
		Else
			strRemoteTempPath = "\\" & remoteComputer & "\admin$\system32\"
		End If
		
		Select Case intIndex
			Case "1"
				strRemoteTempPath = strRemoteTempPath & "ccm\logs"
			Case "2"
				strRemoteTempPath = strRemoteTempPath & "ccmsetup"
		End Select
		
		If IHaveVistaOrAbove Then
			strCmdKey = "cmdkey.exe"
		Else
			strCmdKey = scriptPath & "\cmdkey.exe"
		End If
		
		If Not integratedAuth Then
			' Caches alternate credentials temporarily for remote computer
			strCmdKeyCmd = Chr(34) & strCmdKey & Chr(34) & " /add:"&remoteComputer&" /user:"&strUsername&" /pass:"&strPassword
			errReturn = objShell.run(strCmdKeyCmd, 0, True)
			If errReturn <> 0 Then
				statFailed = statFailed + 1
				Log " !! Failed to store alternate credentials for " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "doRemoteCopy", 3
				Exit Function
			End If
		End If
		
		objShellApp.Open(strRemoteTempPath)
		
		If Not integratedAuth Then
			' Deletes cached credentials
			strCmdKeyCmd = Chr(34) & strCmdKey & Chr(34) & " /delete:"&remoteComputer
			errReturn = objShell.run(strCmdKeyCmd, 0, True)
			If errReturn <> 0 Then
				Log " !! Warning! Failed to delete the stored alternate credentials for " & UCase(remoteComputer) & "! Error "&errReturn&".", True, "doRemoteCopy", 2
			End If
			If copyFailed Then
				Exit Function
			End If
		End If
		
		openClientFolder = True
		
	End Function	

	' ~~~~~~~~~~~~~~
	' Populate computer list from SCCM collection
	Sub loadFromCollection()
		On Error Resume Next
		strCollectionID = UCase(loadFromCollectionID.value)
		If Len(strCollectionID) > 7 Then
			
			strSiteServer = getSiteServerName()
			
			If Len(strSiteServer) = 0 Then
				Exit Sub
			End If
			
			' Check site server connectivity
			Set connection = ConnectSiteServer(strSiteServer, null, null)
			If Err.Number<>0 Then
		    Exit Sub
			End If
			
			' Query collection members and add to the list
			Set objResources = connection.ExecQuery("SELECT * FROM SMS_CollectionMember_a WHERE CollectionID = '" & strCollectionID & "'")
			If err.Number <> 0 Then
				MsgBox "Failed to load collection members! Error "&err.Number&" ("&err.Description&")", vbCritical
				Exit Sub
			End If
			If objResources.Count > 0 Then
				textlist.value = ""
				For Each objResource in objResources
					If textlist.value <> "" Then
						textlist.value = textlist.value & vbcrlf & objResource.Name
					Else
						textlist.value = objResource.Name
					End If
					textlist.doScroll("scrollbarPageDown")				
				Next
				MsgBox "Successfully loaded "&objResources.Count&" computers into the list!", vbInformation
			Else
				MsgBox "Collection "&strCollectionID&" doesn't exist or does not contain any resources!", vbExclamation
			End If
			
			Set objResources = Nothing
			Set connection = Nothing

		Else
			MsgBox "Please enter correct SCCM collection ID!", vbCritical
			loadFromCollectionID.select()
			loadFromCollectionID.focus()
		End If
		
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Connect to SCCM site server
	Function ConnectSiteServer(server, userName, userPassword)
    On Error Resume Next
    Dim automaticAuthentication
    Dim localConnection
    Dim providerLoc
    Dim location
    If userName <> "" Then
    	automaticAuthentication = True
    End If
    
    Set swbemLocator = CreateObject("WbemScripting.SWbemLocator")
    swbemLocator.Security_.AuthenticationLevel = wbemAuthenticationLevelPkt
    
    ' If  the server is local, don't supply credentials.
    If UCase(objNetwork.ComputerName) = UCase(server) Then
      localConnection = true
      userName = ""
      userPassword = ""
      server = "."
    End If
    
    ' Connect to the server.
    If automaticAuthentication Then
			Set objWMI = GetObject("winmgmts:{impersonationLevel=Impersonate}!\\"&server&"\root\sms")
    Else
	    Set objWMI = swbemLocator.ConnectServer(server, "root\sms",userName,userPassword)
		End If
    If Err.Number<>0 Then
      MsgBox "Unable to connect to site server "&UCase(strSiteServer)&"!"&vbCrLf&"Error "&err.Number&" ("&err.Description&")", vbCritical
      Set ConnectSiteServer = null
      Exit Function
    End If

    ' Determine where the provider is and connect.
    Set providerLoc = objWMI.InstancesOf("SMS_ProviderLocation")
    For Each location In providerLoc
	    If location.ProviderForLocalSite = True Then
	    	If automaticAuthentication Then
					Set objWMI = GetObject("winmgmts:{impersonationLevel=Impersonate}!\\"&server&"\root\sms\site_" + location.SiteCode)            		
	    	Else
	        Set objWMI = swbemLocator.ConnectServer(location.Machine, "root\sms\site_" + location.SiteCode,userName,userPassword)
	      End If
	        If Err.Number<>0 Then
            'WriteLog "Error! Couldn't connect:" + Err.Description
            MsgBox "Unable to connect to site server "&UCase(strSiteServer)&"!"&vbCrLf&"Error "&err.Number&" ("&err.Description&")", vbCritical
            ConnectSiteServer = Null
            Exit Function
	        End If
	        Set ConnectSiteServer = objWMI
	        Exit Function
	    End If
    Next
    Set ConnectSiteServer = null ' Failed to connect.
	End Function
	
	' ~~~~~~~~~~~~~~
	' Convert WMI date to normal date format
	Function convertWMIDate(wmiDate)
		On Error Resume Next
		Dim dBias
		dTimeSerial = TimeSerial(Mid (wmiDate, 9, 2), Mid(wmiDate, 11, 2), Mid(wmiDate, 13, 2))
		dDateSerial = DateSerial(Left(wmiDate, 4), Mid(wmiDate, 5, 2), Mid(wmiDate, 7, 2))

		' Match timezone in string
		Set re = New RegExp
		re.IgnoreCase = True
		re.Pattern = "[+|-]\d*"
		Set objMatch = re.Execute(wmiDate)
		If objMatch.count > 0 Then
			dTimeZone = Cint(objMatch.Item(0).value)
		End If
		Set rs = Nothing
		
		dTimeZone = Replace(dTimeZone,"+","")
		If dTimeZone <> 0 Then
			dBias = dTimezone - currentTimezoneBias
			If currentDSTState Then
				dBias = dBias + currentDaylightBias
			Else
				dBias = dBias
			End If
			dBias = (-1) * dBias
		Else
			dBias = currentTimezoneBias
			If currentDSTState Then
				dBias = dBias - currentDaylightBias
			Else
				dBias = dBias
			End If			
		End If

		'MsgBox(dTimeZone & " - " & currentTimezoneBias & " = " & dBias)
		
		convertWMIDate = CDate(dDateSerial & " " & dTimeSerial)

    convertWMIDate = DateAdd("N", dBias, convertWMIDate)
	End Function
	
	' ~~~~~~~~~~~~~~
	' WScript.Sleep is not supported in HTA. Using Ping trick instead
	Sub Sleep(msec)
		cmd = "%COMSPEC% /c ping -n " & 1 + msec & " 127.0.0.1>nul"
		objShell.Run cmd,0,1
		'Log " !! Sleeping! Current processing value: " & processing, True, "Sleep", 3
	End Sub

	' ~~~~~~~~~~~~~~
	' Switch between textlist and fileload list. Only one can be used
	Sub updateSourceFields(id)
		updateHiddenActions()
		
		Select Case id
			Case 0
				textlist.value = ""
				sourceFile = fileloaderform.fileloader.value
				strFileExtension = Mid(sourceFile,InstrRev(sourceFile,".")+1,Len(sourceFile))
				
				If Not CBool(Instr(strFileExtension,"xls")) AND Not CBool(Instr(strFileExtension,"xlsx")) AND Not CBool(Instr(strFileExtension,"csv")) AND Not CBool(Instr(strFileExtension,"txt")) Then
					MsgBox "Files with extension " & UCase(strFileExtension) & " are not supported!", vbCritical
					fileloaderform.reset()
				End If
				
			Case 1
				fileloaderform.reset()
				
		End Select
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Uncheck all actions
	Sub clearSelectedAction()
		For i = 0 to selectedAction.Length - 1
			selectedAction(i).checked = False
			i = i + 1
		Next
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Manage visibility of actions that can only be run against specific number of remote computers
	Sub updateHiddenActions()
		' If there are less than 6 computers in the list, enable opening log folders
		arrListContents = Split(textlist.value, vbCrLf)
		If (UBound(arrListContents) < 5) AND (Len(Trim(textlist.value)) > 0) Then
			clientLogFolderContainer.style.display = ""
		Else
			clientLogFolderContainer.style.display = "none"
			clearSelectedAction()
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Remove empty array elements and return trimmed array	
	Function removeEmptyElements(inArray)
		Dim j: j=0
		Dim tmpArray
		ReDim tmpArray(0)
		For i = 0 to UBound(inArray)
			If Len(inArray(i)) > 0 Then
				ReDim Preserve tmpArray(j)
				tmpArray(j) = inArray(i)
				j = j + 1
			End If
		Next
		
		removeEmptyElements = tmpArray
	End Function
	
	' ~~~~~~~~~~~~~~
	' Show credential manager dialog
	Sub specifyCredentials()
		credentialManager.style.display = ""
	End Sub

	' ~~~~~~~~~~~~~~
	' Close credential manager dialog if clicked anywhere
	Sub backgroundClick()
		If credentialManager.style.display = "" Then
			credentialManager.style.display = "none"
		End If
	End Sub

	' ~~~~~~~~~~~~~~
	' Enumerate selectedAction radio buttons and identify the checked value	
	Sub checkRadioButtons()
		For i = 0 To actionsContainer.getElementsByTagName("input").length - 1
			If selectedAction(i).Checked Then
				selectedActionID = selectedAction(i).getAttribute("itemAction")
				selectedActionText = Trim(selectedAction(i).parentNode.innerText)
				selectedActionValue = selectedAction(i).value
			End If
		Next
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Enumerate selectedAuthentication radio buttons and identify the checked value	
	Sub checkAuthRadioButtons()
		If selectedAuthentication(0).Checked Then
			integratedAuth = True
			userinfoContainer.style.display = "none"
			credentialsContainer.style.display = "none"
		Else
			integratedAuth = False
			userinfoContainer.style.display = ""
			credentialsContainer.style.display = ""
			fUsername.focus()
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Check the radio button when text is clicked
	Sub checkThisItem(clickerObject)
		Set objRadioList = clickerObject.getElementsByTagName("input")
		For Each objElement In objRadioList
			objElement.checked = true
			selectedActionID = objElement.getAttribute("itemAction")
			If promptUserCheck Then
				If objElement.getAttribute("checkUser") = "1" Then
					checkUser = True
				Else
					checkUser = False
				End If
			End If
			selectedActionText = Trim(objElement.parentNode.innerText)
			selectedActionValue = objElement.value
		Next
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Switch between integrated authentication and alternate credentials
	Sub changeAuthentication()
		If Not integratedAuth Then
			If dicCredentials.Count = 0 Then
				MsgBox "Please specify at least one account!", vbExclamation
				fUsername.focus()
				Exit Sub
			Else
				credentialLink.innerText = "Using alternate credentials"
			End If
			arrCredentialKeys = dicCredentials.Keys
			usernameText.innerText = arrCredentialKeys(0)
		Else
			strUsername = ""
			strPassword = ""
			usernameText.innerText = myUserName
			credentialLink.innerText = "Using integrated authentication"
		End If
		credentialManager.style.display = "none"
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Stores alternate credentials to dictionary object	
	Sub addCredentials()
		If fUsername.value <> "" Then
			If Not dicCredentials.Exists(LCase(fUsername.value)) Then
				dicCredentials.Add LCase(fUsername.value), fPassword.value
				remButtonHTML = "<input type=""button"" value=""X"" onclick=""remCredentials(this.parentNode)"" />"
				newLineHTML = "<span id="""&fUsername.value&""">" & remButtonHTML & "&nbsp;" & fUsername.value & "<br/></span>"
				credentialsContainer.style.display = ""
				credentialsContainer.innerHTML = credentialsContainer.innerHTML & newLineHTML
				
				fUsername.value = ""
				fPassword.value = ""
			Else
				MsgBox "This user account is already in the list! To correct its password, remove the previous record from the list.", vbExclamation
			End If
		Else
			MsgBox "Please specify username!", vbExclamation
			fUsername.focus()
			Exit Sub
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Removes alternate credentials from dictionary object
	Sub remCredentials(credentialItem)
		strKey = Trim(credentialItem.innerText)
		dicCredentials.Remove(LCase(strKey))
		credentialItem.parentNode.removeChild(credentialItem)
		fUsername.focus()
	End Sub

	' ~~~~~~~~~~~~~~
	' Submits client installation configuration
	Sub ccmConfigurationReady()
	
		ccmUpdateParameters()
		
		strInstallUNC = clientInstallPathForm.ccmsetupPathValue.value
		If Len(strInstallUNC) = 0 Then
			clientInstallPathForm.ccmsetupPathValue.focus()
			MsgBox "You must specify path to ccmsetup.exe!", vbCritical
			Exit Sub
		End If
		
		ccmsetupCustomParameters = clientInstallForm.ccmParameters.value
		If Len(ccmsetupCustomParameters) = 0 Then
			ccmsetupCustomParameters = defaultCCMParameters
		End If

		If ccmValidate() Then
			clientInstallManager.style.display = "none"
			clientConfigurationReady = True
		Else
			clientConfigurationReady = False
		End If
		
		initiateAction()
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Validate specified ccmsetup.exe path
	Function ccmParseCCMSETUPPath(inputPath)
		ccmStatusMsg.innerHTML = ""
		If Not CBool(Instr(inputPath,"\\")) Then
			MsgBox "Current ccmsetup.exe path is not a correct UNC path!" & vbCrLf & inputPath, vbCritical
			Exit Function
		End If
		If Not CBool(Instr(inputPath,"ccmsetup.exe")) Then
			lastCharacter = Right(inputPath,1)
			If lastCharacter <> "\" Then
				outputPath = inputPath & "\ccmsetup.exe"
			Else
				outputPath = inputPath & "ccmsetup.exe"
			End If
		Else
			outputPath = inputPath
		End If
		ccmParseCCMSETUPPath = outputPath
	End Function
	
	Function ccmValidate()
		
		strInstallUNC = clientInstallPathForm.ccmsetupPathValue.value
		If strInstallUNC <> "" Then
			If Not CBool(Instr(strInstallUNC,"\\")) Then
				MsgBox "This is not a correct UNC path!" & vbCrLf & strInstallUNC, vbCritical
				Exit Function
			End If
			If Not CBool(Instr(strInstallUNC,"ccmsetup.exe")) Then
				lastCharacter = Right(strInstallUNC,1)
				If lastCharacter <> "\" Then
					ccmsetupPath = strInstallUNC & "\ccmsetup.exe"
				Else
					ccmsetupPath = strInstallUNC & "ccmsetup.exe"
				End If
			Else
				ccmsetupPath = strInstallUNC
			End If
			' Check if ccmsetup.exe actually exists in specified path
			If Not objFSO.FileExists(ccmsetupPath) Then
				result = MsgBox(ccmsetupPath & " was not found!" & vbCrLf & vbCrLf & "Do you want to ignore this and use the path anyway?", vbYesNo + vbQuestion + vbDefaultButton2)
				If result = vbNo Then
					Exit Function
				End If
			End If
			
'			strCCMSetupPathFolder = Left(ccmsetupPath,InstrRev(ccmsetupPath,"\")-1)
'			If Not objFSO.FolderExists(strCCMSetupPathFolder & "\i386") OR Not objFSO.FolderExists(strCCMSetupPathFolder & "\x64") Then
'				MsgBox "Did not find architecture folder (i386 or x64) in " & strCCMSetupPathFolder & "!", vbCritical
'				Exit Function
'			End If

		Else
			MsgBox "Install files path must be specified in order to install a client!", vbExclamation
			Exit Function
		End If
		
		ccmValidate = True
		
	End Function
	
	' ~~~~~~~~~~~~~~
	' Set "ccmsetupPathValue" textbox value to browsed path
	Sub ccmGetCCMSETUPPath()
		ccmsetupPathValue = ccmParseCCMSETUPPath(clientInstallPathForm.ccmsetupPath.value)
		clientInstallPathForm.reset()
		clientInstallPathForm.ccmsetupPathValue.value = ccmsetupPathValue
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Shows client install configuration form
	Sub ccmSetConfiguration()
		clientInstallManager.style.display = ""
		ccmStatusMsg.innerHTML = ""
		clientInstallPathForm.ccmsetupPathValue.focus()
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Parses setup parameters string and evaluates all HTML controls in client install configuration form	
	Sub ccmParseParameters(params)
		ccmStatusMsg.innerHTML = ""
		Dim ccmSetupParams
		Dim clientmsiParams
		Dim CCMSETUPItemCounter: CCMSETUPItemCounter = 0
		Dim CLIENTMSIItemCounter: CLIENTMSIItemCounter = 0
		Dim p1, p2

		Dim arrCCMSETUPProperties()
		Dim arrCLIENTMSIProperties()
		ReDim arrCCMSETUPProperties(0)
		ReDim arrCLIENTMSIProperties(0)
		
		Dim ccmParams
		'ccmParams = clientInstallForm.ccmParameters.value
		arrParams = Split(Trim(params), " ")
		For i = 0 To UBound(arrParams)
			If arrParams(i) <> "" Then
				If Left(arrParams(i),1) = "/" Then
					ReDim Preserve arrCCMSETUPProperties(CCMSETUPItemCounter)
					arrCCMSETUPProperties(CCMSETUPItemCounter) = arrParams(i)
					CCMSETUPItemCounter = CCMSETUPItemCounter + 1
				Else
					ReDim Preserve arrCLIENTMSIProperties(CLIENTMSIItemCounter)
					arrCLIENTMSIProperties(CLIENTMSIItemCounter) = arrParams(i)
					CLIENTMSIItemCounter = CLIENTMSIItemCounter + 1
				End If
			End If
		Next
		
		' Process CCMSETUP properties
		clientInstallForm.ccmRunAsService.checked = False
		For i = 0 To UBound(arrCCMSETUPProperties)
			If Len(arrCCMSETUPProperties(i)) = 0 Then
				Exit For
			End If
			
			arrThisParam = Split(arrCCMSETUPProperties(i), ":")
			thisParam = LCase(arrThisParam(0))
			If UBound(arrThisParam) > 0 Then
				thisValue = UCase(arrThisParam(1))
			End If

			Select Case thisParam
				Case "/service"
					clientInstallForm.ccmRunAsService.checked = True
					p1 = p1 & arrCCMSETUPProperties(i) & " "					
				Case "/logon"
					clientInstallForm.ccmForceInstall.checked = False
					p1 = p1 & arrCCMSETUPProperties(i) & " "
				Case "/forcereboot"
					clientInstallForm.ccmForceReboot.checked = True
					p1 = p1 & arrCCMSETUPProperties(i) & " "
				Case "/native"
					clientInstallForm.ccmNativeMode.checked = True
					clientInstallForm.ccmNativeModeOption.disabled = false
					If Len(thisValue) > 0 Then
						clientInstallForm.ccmNativeModeOption.value = thisValue
					End If
					p1 = p1 & arrCCMSETUPProperties(i) & " "
				Case "/retry"
					If Len(thisValue) > 0 Then
						clientInstallForm.ccmRetryInterval.value = thisValue
					End If
					p1 = p1 & arrCCMSETUPProperties(i) & " "
				Case "/bitspriority"
					If Len(thisValue) > 0 Then
						clientInstallForm.ccmBITSPriority.disabled = False
						clientInstallForm.ccmBITSPriority.value = thisValue
						clientInstallForm.ccmBITSPriority.disabled = True
					End If
					p1 = p1 & arrCCMSETUPProperties(i) & " "
				Case "/source"
					If Len(thisValue) > 0 Then
						thisValue = Replace(thisValue, """", "")
						ccmAddSource "SMB", LCase(thisValue)
					End If
					p1 = p1 & arrCCMSETUPProperties(i) & " "
				Case "/mp"
					If Len(thisValue) > 0 Then
						thisValue = Replace(thisValue, """", "")
						ccmAddSource "BITS", thisValue
					End If
					p1 = p1 & arrCCMSETUPProperties(i) & " "
			End Select
		Next
		
		' Process CLIENT.MSI properties
		For i = 0 To UBound(arrCLIENTMSIProperties)
			If CBool(Instr(arrCLIENTMSIProperties(i), "=")) Then
				arrThisParam = Split(arrCLIENTMSIProperties(i), "=")
				thisParam = UCase(arrThisParam(0))
				If UBound(arrThisParam) > 0 Then
					thisValue = UCase(arrThisParam(1))
					
					Select Case thisParam
						Case "SMSSITECODE"
							If Len(thisValue) = 3 Then
								clientInstallForm.ccmSiteCode.value = thisValue
							End If
							p2 = p2 & arrCLIENTMSIProperties(i) & " "
						Case "SMSMP"
							clientInstallForm.ccmMP.value = thisValue
							p2 = p2 & arrCLIENTMSIProperties(i) & " "
						Case "SMSSLP"
							clientInstallForm.ccmSLP.value = thisValue
							p2 = p2 & arrCLIENTMSIProperties(i) & " "
						Case "FSP"
							clientInstallForm.ccmFSP.value = thisValue
							p2 = p2 & arrCLIENTMSIProperties(i) & " "
						Case "SMSCACHESIZE"
							clientInstallForm.ccmCacheSize.value = thisValue
							p2 = p2 & arrCLIENTMSIProperties(i) & " "
						Case "CCMENABLELOGGING"
							If LCase(thisValue) = "true" Then
								clientInstallForm.ccmLogging.checked = True
								clientInstallForm.ccmLogLevel.disabled = False
							End If
						Case "CCMLOGLEVEL"
							clientInstallForm.ccmLogging.checked = True
							clientInstallForm.ccmLogLevel.disabled = False
							clientInstallForm.ccmLogLevel.value = thisValue
							p2 = p2 & arrCLIENTMSIProperties(i) & " "
					End Select
				End If

			End If
		Next
		
		' Separate CCMSETUP and CLIENT.MSI parameters
		ccmSetupParams = Trim(p1)
		clientmsiParams = Trim(p2)
		ccmParamsLeftOver = Trim(Replace(ccmParamsLeftOver, "  ", " "))
		ccmSetupLeftoverParams = ccmGetCCMSETUPLeftOverParameters(params)
		clientmsiLeftoverParams = ccmGetCLIENTMSILeftOverParameters(params)
		
		ccmParams = Trim(ccmSetupParams & " " & ccmSetupLeftoverParams & " " & clientmsiParams & " " & clientmsiLeftoverParams)

		' Finalize
		If CBool(Instr(LCase(ccmParams), "/mp:")) Then
			clientInstallForm.ccmBITSPriority.disabled = False
		End If
		
		clientInstallForm.ccmParameters.value = ccmParams
		
		ccmUpdateParameters()
		
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Returns ccmsetup.exe properties in parameters string that are not known to SCCM CAT	
	Function ccmGetCCMSETUPLeftOverParameters(inParams)
		Dim outParams
		Dim arrCCMSETUPProperties()
		ReDim arrCCMSETUPProperties(0)
		
		arrParams = Split(Trim(inParams), " ")
		For i = 0 To UBound(arrParams)
			If arrParams(i) <> "" Then
				If Left(arrParams(i),1) = "/" Then
					ReDim Preserve arrCCMSETUPProperties(CCMSETUPItemCounter)
					arrCCMSETUPProperties(CCMSETUPItemCounter) = arrParams(i)
					CCMSETUPItemCounter = CCMSETUPItemCounter + 1
				End If
			End If
		Next
		
		' Process are CCMSETUP properties
		For i = 0 To UBound(arrCCMSETUPProperties)
			thisParameter = arrCCMSETUPProperties(i)
			If Len(thisParameter) > 0 Then
				arrThisParam = Split(thisParameter, ":")
				thisParam = LCase(arrThisParam(0))
				Select Case thisParam
					Case "/service"
					Case "/logon"
					Case "/forcereboot"
					Case "/native"
					Case "/retry"
					Case "/bitspriority"
					Case "/source"
					Case "/mp"
					Case Else
						If CBool(Instr(thisParameter, " ")) Then
							thisParameter = """" & thisParameter & """"
						End If
						outParams = outParams & thisParameter & " "
				End Select
			End If
		Next
		
		ccmGetCCMSETUPLeftOverParameters = Trim(outParams)
	End Function
	
	' ~~~~~~~~~~~~~~
	' Returns client.msi properties in parameters string that are not known to SCCM CAT
	Function ccmGetCLIENTMSILeftOverParameters(inParams)
		Dim outParams
		Dim arrCLIENTMSIProperties()
		ReDim arrCLIENTMSIProperties(0)	
		
		arrParams = Split(Trim(inParams), " ")
		For i = 0 To UBound(arrParams)
			If arrParams(i) <> "" Then
				If Left(arrParams(i),1) <> "/" Then
					ReDim Preserve arrCLIENTMSIProperties(CLIENTMSIItemCounter)
					arrCLIENTMSIProperties(CLIENTMSIItemCounter) = arrParams(i)
					CLIENTMSIItemCounter = CLIENTMSIItemCounter + 1
				End If
			End If
		Next

		' Process CLIENT.MSI properties
		For i = 0 To UBound(arrCLIENTMSIProperties)
			thisParameter = arrCLIENTMSIProperties(i)
			If CBool(Instr(thisParameter, "=")) Then
				arrThisParam = Split(thisParameter, "=")
				thisParam = UCase(arrThisParam(0))
				If UBound(arrThisParam) > 0 Then
					thisValue = UCase(arrThisParam(1))
					
					Select Case thisParam
						Case "SMSSITECODE"
						Case "SMSMP"
						Case "SMSSLP"
						Case "FSP"
						Case "SMSCACHESIZE"
						Case "CCMLOGLEVEL"
						Case "CCMENABLELOGGING"
						Case Else
							If CBool(Instr(thisParameter, " ")) Then
								thisParameter = """" & thisParameter & """"
							End If
							outParams = outParams & thisParameter & " "
					End Select
				End If
				
			End If
		Next
		
		ccmGetCLIENTMSILeftOverParameters = Trim(outParams)
	End Function		
	
	' ~~~~~~~~~~~~~~
	' Generates client installation parameters string based on install configuration form values
	Sub ccmUpdateParameters()
		ccmStatusMsg.innerHTML = ""
		If Not clientInstallForm.ccmEnableControls.checked Then
			' If GUI has been disabled, don't update parameters string automatically
			Exit Sub
		End If
		
		ccmsetupCustomParameters = clientInstallForm.ccmParameters.value
		If Len(ccmsetupCustomParameters) = 0 Then
			ccmsetupCustomParameters = defaultCCMParameters
		End If
				
		ccmSetupLeftoverParams = ccmGetCCMSETUPLeftOverParameters(ccmsetupCustomParameters)
		clientmsiLeftoverParams = ccmGetCLIENTMSILeftOverParameters(ccmsetupCustomParameters)
		
		Dim p: p = ""
		
		If clientInstallForm.ccmRunAsService.checked Then
			p = p & "/service "
		End If
		If Not clientInstallForm.ccmForceInstall.checked Then
			p = p & "/logon "
		End If
		If clientInstallForm.ccmForceReboot.checked Then
			p = p & "/forcereboot "
		End If
		If clientInstallForm.ccmNativeMode.checked Then
			p = p & "/native"
			If clientInstallForm.ccmNativeModeOption.value <> "" Then
				p = p & ":" & clientInstallForm.ccmNativeModeOption.value & " "
			Else
				p = p & " "
			End If
		End If
		If IsNumeric(clientInstallForm.ccmRetryInterval.value) Then
			If clientInstallForm.ccmRetryInterval.value <> 10 Then
				p = p & "/retry:" & clientInstallForm.ccmRetryInterval.value & " "
			End If
		Else
			If Len(clientInstallForm.ccmRetryInterval.value) = 0 AND (document.activeElement.id <> "ccmRetryInterval") Then
				' Reset default value
				clientInstallForm.ccmRetryInterval.value = 10
			End If
		End If
		If dicBITSSources.Count > 0 Then
			' Build /MP:<computer> strings if BITS sources are available
			arrBITSSources = dicBITSSources.Keys
			For i = 0 To dicBITSSources.Count - 1
				p = p & "/MP:" & arrBITSSources(i) & " "
			Next
			If clientInstallForm.ccmBITSPriority.value <> "NORMAL" Then
				p = p & "/BITSPriority:" & clientInstallForm.ccmBITSPriority.value & " "
			End If
		End If
		If dicSMBSources.Count > 0 Then
			' Build /Source:<path> strings if SMB sources are available
			arrSMBSources = dicSMBSources.Keys
			For i = 0 To dicSMBSources.Count - 1
				p = p & "/Source:""" & arrSMBSources(i) & """ "
			Next
		End If

		If Len(ccmSetupLeftoverParams) > 0 Then
			' Add leftovers to CCMSETUP properties
			p = Trim(p) & " " & ccmSetupLeftoverParams & " "
		End If
		
		' Set Client.msi properties
		If clientInstallForm.ccmSiteCode.value <> "AUTO" Then
			clientInstallForm.ccmSiteCode.value = UCase(clientInstallForm.ccmSiteCode.value)
			If Len(clientInstallForm.ccmSiteCode.value) = 3 Then
				p = p & "SMSSITECODE=" & UCase(clientInstallForm.ccmSiteCode.value) & " "
			Else
				If document.activeElement.id <> "ccmSiteCode" Then
					If Len(clientInstallForm.ccmSiteCode.value) = 0 Then
						p = p & "SMSSITECODE=AUTO "
						clientInstallForm.ccmSiteCode.value = "AUTO"
					Else
						MsgBox "Site code must be 3 characters long!", vbExclamation
						clientInstallForm.ccmSiteCode.focus()
					End If
				End If
			End If
		Else
			p = p & "SMSSITECODE=AUTO "
		End If
		If Len(clientInstallForm.ccmMP.value) > 0 Then
			p = p & "SMSMP=" & clientInstallForm.ccmMP.value & " "
		End If
		If Len(clientInstallForm.ccmSLP.value) > 0 Then
			p = p & "SMSSLP=" & clientInstallForm.ccmSLP.value & " "
		End If
		If Len(clientInstallForm.ccmFSP.value) > 0 Then
			p = p & "FSP=" & clientInstallForm.ccmFSP.value & " "
		End If
		If IsNumeric(clientInstallForm.ccmCacheSize.value) Then
			If clientInstallForm.ccmCacheSize.value <> 5120 Then
				p = p & "SMSCACHESIZE=" & clientInstallForm.ccmCacheSize.value & " "
			End If
		Else
			If Len(clientInstallForm.ccmCacheSize.value) = 0 AND (document.activeElement.id <> "ccmCacheSize") Then
				' Reset default value
				clientInstallForm.ccmCacheSize.value = 5120
			End If
		End If
		If clientInstallForm.ccmLogging.checked Then
			p = p & "CCMENABLELOGGING=TRUE "
			If clientInstallForm.ccmLogLevel.value <> 1 Then
				p = p & "CCMLOGLEVEL=" & clientInstallForm.ccmLogLevel.value & " "
			End If
		End If

		If Len(clientmsiLeftoverParams) > 0 Then
			' Add leftovers to client.msi properties
			p = Trim(p) & " " & clientmsiLeftoverParams
		End If
		
		clientInstallForm.ccmParameters.value = Trim(p)
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Set config.ini parameter "ccmsetupParameters" value to current parameter string in GUI
	Sub ccmSaveConfiguration()
		If (writeConfig("ccmsetupParameters", clientInstallForm.ccmParameters.value)) AND (writeConfig("ccmsetupPath", clientInstallPathForm.ccmSetupPathValue.value)) Then
			ccmStatusMsg.innerHTML = "<font color=green>Successfully saved configuration in config.ini</font>"
		Else
			ccmStatusMsg.innerHTML = "<font color=red>Failed to save configuration in config.ini</font>"
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Enable/Disable dropdown with available native mode properties	
	Sub ccmEnableNativeMode()
		If clientInstallForm.ccmNativeMode.checked Then
			clientInstallForm.ccmNativeModeOption.disabled = false
		Else
			clientInstallForm.ccmNativeModeOption.value = ""
			clientInstallForm.ccmNativeModeOption.disabled = true
		End If
		ccmUpdateParameters()
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Enable/Disable dropdown with available native mode properties	
	Sub ccmEnableLogging()
		If clientInstallForm.ccmLogging.checked Then
			clientInstallForm.ccmLogLevel.disabled = false
		Else
			clientInstallForm.ccmLogLevel.value = 1
			clientInstallForm.ccmLogLevel.disabled = true
		End If
		ccmUpdateParameters()
	End Sub	
	
	' ~~~~~~~~~~~~~~
	' Adds either SMB or BITS type of source in client install configuration
	Sub ccmAddSource(strType, CurrentSourceServer)
'		Dim CurrentSourceServer
		Select Case strType
			Case "SMB"
				'CurrentSourceServer = clientInstallForm.ccmSMBSource.value
				If Len(CurrentSourceServer) = 0 Then
					Exit Sub
				End If
				If Not CBool(Instr(CurrentSourceServer, "\")) Then
					MsgBox "This is not correct path!", vbExclamation
					Exit Sub
				End If
			Case "BITS"
				'CurrentSourceServer = clientInstallForm.ccmBITSSource.value
				If Len(CurrentSourceServer) = 0 Then
					Exit Sub
				End If
				' Allow changing BITS priority
				clientInstallForm.ccmBITSPriority.disabled = false
		End Select
		
		If CurrentSourceServer <> "" Then
			remButtonHTML = "<input type=""button"" value=""X"" onclick=""ccmRemSource(this.parentNode, '"&strType&"')"" />"
			newLineHTML = "<span id="""&UCase(CurrentSourceServer)&""">" & remButtonHTML & "&nbsp;" & UCase(CurrentSourceServer) & "<br/></span>"			
			Select Case strType
				Case "SMB"
					If Not dicSMBSources.Exists(UCase(CurrentSourceServer)) Then
						dicSMBSources.Add UCase(CurrentSourceServer), UCase(CurrentSourceServer)
					Else
						If clientInstallManager.style.display <> "none" Then
							MsgBox "This path is already in the list!", vbExclamation
						End If
						Exit Sub
					End If
					SMBSourcesContainer.innerHTML = SMBSourcesContainer.innerHTML & newLineHTML
					clientInstallForm.ccmSMBSource.value = ""
					If clientInstallManager.style.display <> "none" Then
						clientInstallForm.ccmSMBSource.focus()
					End If
				Case "BITS"
					If Not dicBITSSources.Exists(UCase(CurrentSourceServer)) Then
						dicBITSSources.Add UCase(CurrentSourceServer), UCase(CurrentSourceServer)
						BITSSourcesContainer.innerHTML = BITSSourcesContainer.innerHTML & newLineHTML						
						clientInstallForm.ccmBITSSource.value = ""
						If clientInstallManager.style.display <> "none" Then
							clientInstallForm.ccmBITSSource.focus()
						End If
					Else
						If clientInstallManager.style.display <> "none" Then
							MsgBox "This server is already in the list!", vbExclamation
						End If
						Exit Sub
					End If
			End Select
			ccmUpdateParameters()
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Removes either SMB or BITS type of source in client install configuration	
	Sub ccmRemSource(ThisItem, strType)
		strKey = Trim(ThisItem.innerText)
		Select Case strType
			Case "SMB"
				dicSMBSources.Remove(UCase(strKey))
			Case "BITS"
				dicBITSSources.Remove(UCase(strKey))
		End Select
		ThisItem.parentNode.removeChild(ThisItem)
		' Disallow changing BITS priority if there are no more BITS sources
		If dicBITSSources.Count = 0 Then
			clientInstallForm.ccmBITSPriority.value = "NORMAL"
			clientInstallForm.ccmBITSPriority.disabled = True
		End If
		ccmUpdateParameters()
	End Sub

	' ~~~~~~~~~~~~~~
	' Check for ENTER key presses and submit the credential manager dialog if it's open
	Sub checkEnter()
		If credentialManager.style.display = "" Then
			With document.parentWindow.event 
				If .keycode = 13 then
					If document.activeElement.id = "fUsername" OR document.activeElement.id = "fPassword" Then
						addCredentials()
					Else					
						changeAuthentication()
					End If
				End If
			End With
		End If
		If clientInstallManager.style.display = "" Then
			With document.parentWindow.event
				If .keycode = 13 then
					Select Case document.activeElement.id
						Case "ccmSMBSource"
							ccmAddSource "SMB", clientInstallForm.ccmSMBSource.value
						Case "ccmBITSSource"
							ccmAddSource "BITS", clientInstallForm.ccmBITSSource.value
					End Select
				End If
			End With
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Connect to RSS feed of SCCM CAT releases and determine the latest available version	
	Sub checkReleasesRSS()
		On Error Resume Next
		URLToRSS = "http://sccmcat.codeplex.com/project/feeds/rss?ProjectRSSFeed=codeplex%3a%2f%2frelease%2fsccmcat"
		Set xmlHttp = CreateObject("MSXML2.ServerXMLHTTP")
		xmlHttp.setTimeouts 1500, 1500, 1500, 1500
		xmlHttp.Open "GET", URLToRSS, false
		xmlHttp.Send()
		If err.number <> 0 Then
			' Connection problems
			' Firewall might be blocking the connection to port 80 on sccmcat.codeplex.com, or proxy server is used
			Exit Sub
		End If
			
		Set re = New RegExp
		re.IgnoreCase = True
		
		RSSXML = xmlHttp.ResponseText
		
		Set objXMLDoc = CreateObject("MSXML2.DOMDocument")
		objXMLDoc.async = False 
		objXMLDoc.setProperty "SelectionLanguage", "XPath"
		Call objXMLDoc.loadXML(RSSXML)
		If (objXMLDoc.parseError.errorcode <> 0) Then
			MsgBox "Failed to get update information from Codeplex! " & vbCrLf & objXMLDoc.parseError.reason
			Exit Sub
		Else
			Set objRoot = objXMLDoc.documentElement 
			Set objReleaseData = objRoot.getElementsByTagName("item")
			For Each element in objReleaseData
				strTitle = element.childNodes(0).text
				strLink = element.childNodes(1).text
				strReleaseDate = element.childNodes(4).text
				arrTitle = Split(strTitle,":")
				' Find fresh release
				If Trim(LCase(arrTitle(0))) = "created release" Then
					re.Pattern = "\d.\d*"
					Set objMatch = re.Execute(strTitle)
					If objMatch.count > 0 Then
						strVersion = objMatch.Item(0).value
					End If
					dblVersion = CDbl(Replace(strVersion,".",","))
					dblCurrentVersion = CDbl(Replace(Replace(CurrentVersion,"a",""),".",","))
					If dblCurrentVersion < dblVersion Then
						' Current version number is less than latest available
						getNewVersion strVersion, strReleaseDate, strLink
					Else
						If (dblCurrentVersion = dblVersion) AND CBool(Instr(CStr(CurrentVersion),"a")) Then
							' Current version newest but in alpha. Newer release available.
							getNewVersion strVersion, strReleaseDate, strLink
						End If
					End If
					' Exit loop when latest release is found
					Exit For
				End If
			Next
		End If

	End Sub
	
	' ~~~~~~~~~~~~~~
	' Inform about available newer version
	Sub getNewVersion(version, releasedate, URL)
		result = MsgBox("Newer version of SCCM CAT is available!" & vbCrLf & "Version " & version & " was released on " & releasedate & "." & vbCrLf & vbCrLf & "Do you want to browse to download page now?", vbYesNo + vbDefaultButton1 + vbSystemModal + vbExclamation, "Update available")
		If result = vbYes Then
			objShellApp.Open(URL)
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Open last log file
	Sub openLastLog()
		objShellApp.ShellExecute(lastLogFile)
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Determine current time zone bias
	Function getTimezoneBias()
		Set objLocalWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2")
		Set colTimeZone = objLocalWMIService.ExecQuery ("Select * from Win32_TimeZone")
		For Each objTimeZone in colTimeZone
				currentDaylightBias = Cint(objTimeZone.DaylightBias)
		    getTimezoneBias = CInt(objTimeZone.Bias)
		Next
		Set objLocalWMIService = Nothing
	End Function
	
	' ~~~~~~~~~~~~~~
	' Check whether or not DST is in effect
	Function getDSTState()
		Set objLocalWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2")
		
		
		Set colPC = objLocalWMIService.ExecQuery ("Select * from Win32_ComputerSystem")
		For Each objItem in colPC
			If Not isNull(objItem.DaylightInEffect) Then
		    getDSTState = CBool(objItem.DaylightInEffect)
		  Else
		  	getDSTState = False
		  End If
		Next
		Set objLocalWMIService = Nothing
	End function
	
	' ~~~~~~~~~~~~~~
	' Request site server name
	Function getSiteServerName()
		If configFileIncluded Then
			strSiteServerC = readConfig("siteServer")
			If Len(strSiteServerC) > 0 Then
				strSiteServer = strSiteServerC
			End If
		End If
		
		While Not getOut
			strSiteServer = InputBox("Enter the name of the SCCM site server:", "", strSiteServer)
			If isEmpty(strSiteServer) OR (Len(strSiteServer) > 0) Then
				' User cancelled the input form
				getOut = True
			End If
		Wend
		
		getSiteServerName = strSiteServer

	End Function
	
	' ~~~~~~~~~~~~~~
	' Format a line in Trace32 log file
	Function formatTrace32Line(txt, component, highlight)
		' Highlight values:
		' 1 - Info (normal)
		' 2 - Warning (yellow)
		' 3 - Error (red)
		
		Dim t
		strTimestamp = getTrace32TimeStamp()
		arrTimestamp = Split(strTimestamp, " ")
		t = "<![LOG[" & txt & "]LOG]!>"
		t = t & "<"
		t = t & "time=" & Chr(34) & arrTimestamp(1) & Chr(34) & " "
		t = t & "date=" & Chr(34) & arrTimestamp(0) & Chr(34) & " "
		t = t & "component=" & Chr(34) & component & Chr(34) & " "
		t = t & "context=" & Chr(34) & Chr(34) & " "
		t = t & "type=" & Chr(34) & highlight & Chr(34) & " "
		t = t & "thread=" & Chr(34) & Chr(34) & " "
		t = t & "file=" & Chr(34) & Chr(34)
		t = t & ">"
		
		formatTrace32Line = t
	End Function
	
	' ~~~~~~~~~~~~~~
	' Generate timestamp according Trace32 standards	
	Function getTrace32TimeStamp() 
	  intMilliseconds = Timer() - ((Hour(Now) * 3600) + (Minute(Now) * 60) + Second(Now))
	  intMilliseconds = Fix(intMilliseconds * 1000)
	  
	  strMonth = Month(Now)
	  If Len(strMonth) < 2 Then
	  	strMonth = "0" & strMonth
	  End If
	  
	  strDay = Day(Now)
	  If Len(strDay) < 2 Then
	  	strDay = "0" & strDay
	  End If
	   
	  intDatePart = strMonth & "-" & strDay & "-" & (Year(Now))
	  intTimePart = (Hour(Now)) & ":" & (Minute(Now)) & ":" & (Second(Now)) & "." & intMilliseconds & "+" & currentTimezoneBias
	   
	  getTrace32TimeStamp = intDatePart & " " & intTimePart
	End Function
	
	' ~~~~~~~~~~~~~~
	' Format a line in TXT log file
	Function formatNormalLine(txt, component, highlight)
		' Highlight values:
		' 1 - Info
		' 2 - Warning
		' 3 - Error	
		Dim t
		t = t & txt & "    ("
		Select Case highlight
			Case "1"
				t = t & "INFO"
			Case "2"
				t = t & "WARN"
			Case "3"
				t = t & "ERROR"
		End Select
		t = t & ")"	
		t = t & " [" & getTrace32TimeStamp & "] "
		t = t & " [" & component & "] "

		formatNormalLine = t
	End Function
	
	' ~~~~~~~~~~~~~~
	' Adds computer name string to array of unhealthy computers
	Sub addElementToUnhealthyArray(item)
		arraySize = UBound(arrUnhealthyComputers)
		ReDim Preserve arrUnhealthyComputers(arraySize+1)
		arrUnhealthyComputers(UBound(arrUnhealthyComputers)) = item
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Adds computer name string to array of offline computers
	Sub addElementToOfflineArray(item)
		If Len(item) > 0 Then
			arraySize = UBound(arrOfflineComputers)
			ReDim Preserve arrOfflineComputers(arraySize+1)
			arrOfflineComputers(UBound(arrOfflineComputers)) = item
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Adds computer name string to array of online computers
	Sub addElementToOnlineArray(item)
		If Len(item) > 0 Then
			arraySize = UBound(arrOnlineComputers)
			ReDim Preserve arrOnlineComputers(arraySize+1)
			arrOnlineComputers(UBound(arrOnlineComputers)) = item
		End If
	End Sub	
	
	' ~~~~~~~~~~~~~~
	' Replaces target list with collected unhealthy computers only (from last health check scan)
	Sub initUnhealthyList()
		result = MsgBox("Do you want to update the target list with unhealthy computers only (total: "&statUnhealthy&")?", vbYesNo+vbQuestion+vbDefaultButton2)
		If result = vbYes Then
			fileloaderform.reset()
			textlist.value = ""
			
			For i = 0 To UBound(arrUnhealthyComputers)
				If Len(arrUnhealthyComputers(i)) > 0 Then
					If textlist.value <> "" Then
						textlist.value = textlist.value & vbcrlf & arrUnhealthyComputers(i)
					Else
						textlist.value = arrUnhealthyComputers(i)
					End If
					textlist.doScroll("scrollbarPageDown")
				End If
			Next
			
			MsgBox "Now using target list of "&UBound(arrUnhealthyComputers)&" unhealthy computers!", vbInformation
			
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Wraps up the process and runs some cleanup tasks
	Sub doFinalize()
		On Error Resume Next
		If Len(strLocalScriptFilePath) > 0 Then
			If objFSO.FileExists(strLocalScriptFilePath) Then
				objFSO.DeleteFile strLocalScriptFilePath
			End If
		End If
		If Len(strLocalBatchFilePath) > 0 Then
			If objFSO.FileExists(strLocalBatchFilePath) Then
				objFSO.DeleteFile strLocalBatchFilePath
			End If
		End If
		If Len(temporaryFilePath) > 0 Then
			If objFSO.FileExists(temporaryFilePath) Then
				objFSO.DeleteFile temporaryFilePath
			End If
		End If
		
		' If the action was "Create and send CCR files" open the folder containing CCR files when done
		If selectedActionID = "createCCR" Then
			If Not sendCCRToSite Then
				objShellApp.Open(localTempPath & "\SCCM_CCR\")
			End If
		End If
	End Sub

	' ~~~~~~~~~~~~~~
	' Save offline computer names to a text file
	Sub saveOfflineComputersInFile()
		On Error Resume Next
		If UBound(arrOfflineComputers) > 0 Then
			OfflineFile = ScriptPath & "\offline_computers.txt"
			Set objOfflineFile = objFSO.OpenTextFile(OfflineFile, ForWriting, True)
			For i = 0 To UBound(arrOfflineComputers)
				If Len(arrOfflineComputers(i)) > 0 Then
					objOfflineFile.WriteLine arrOfflineComputers(i)
				End If
			Next
			objOfflineFile.Close
			Set objOfflineFile = Nothing
		End If
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Save online computer names to a text file	
	Sub saveOnlineComputersInFile()
		On Error Resume Next
		If UBound(arrOnlineComputers) > 0 Then
			OnlineFile = ScriptPath & "\online_computers.txt"
			Set objOnlineFile = objFSO.OpenTextFile(OnlineFile, ForWriting, True)
			For i = 0 To UBound(arrOnlineComputers)
				If Len(arrOnlineComputers(i)) > 0 Then
					objOnlineFile.WriteLine arrOnlineComputers(i)
				End If
			Next
			objOnlineFile.Close
			Set objOnlineFile = Nothing
		End If
	End Sub	
	
	' ~~~~~~~~~~~~~~
	' Convert distinguishedName to canonical name	
	Function convertDNtoCanonicalPath(strDN, remoteComputer)
		Dim t
		Dim OUpart, DomPart
		strDN = LCase(strDN)
		domSplitLoc = Instr(strDN, ",dc=")
		DomPart = Mid(strDN, domSplitLoc + 1, Len(strDN))
		DomPart = Replace(DomPart, "dc=", "")
		DomPart = Replace(DomPart, ",", ".")
		OUpart = Mid(strDN, 1, domSplitLoc - 1)
				
		arrOU = Split(OUpart, ",ou=")
		arrOUReverse = ReverseArray(arrOU)
		For i = 0 To UBound(arrOUReverse)
			strOU = strOU & "\" & arrOUReverse(i)
		Next
		strOU = Replace(strOU, "cn=" & LCase(remoteComputer), "")
		strOU = Left(strOU, Len(strOU) - 1)
		t = DomPart & strOU

		convertDNtoCanonicalPath = t
	End Function
	
	' ~~~~~~~~~~~~~~
	' Reverse the order of items in an array	
	Function ReverseArray(ByRef inArray)
	    idxLast = UBound(inArray)
	    idxHalf = Int(idxLast / 2)
	
	    For i = 0 To idxHalf
	        strHolder = inArray(i)
	        inArray(i) = inArray(idxLast - i)
	        inArray(idxLast - i) = strHolder
	    Next
	    ReverseArray = inArray
	End Function	
	
	' ~~~~~~~~~~~~~~
	' Ping specified host	
	Function ping (host)
		If enablePingTest Then
		  Set objPing = GetObject("winmgmts:{impersonationLevel=impersonate}")._
		    ExecQuery("select * from Win32_PingStatus where address = '"_
		        & host & "'")
		  For Each objStatus in objPing
		    If IsNull(objStatus.StatusCode) or objStatus.StatusCode<>0 Then
		    	ping = FALSE
		    Else
		    	ping = TRUE
		    End If
		  Next
		Else
			ping = TRUE
		End If
	End Function
	
	' ~~~~~~~~~~~~~~
	' Check if a string is a valid MAC address
	Function isMACAddress(strMAC)
		If CBool(Instr(strMAC, ":")) OR CBool(Instr(strMAC, "-")) Then
			If LEN(strMAC) = 17 Then
				isMACAddress = True
			End If
		End If
	End Function
	
	' ~~~~~~~~~~~~~~
	' Remove dashes and colons from MAC address string for use with WOL.EXE
	Function convertMACforWOL(strMAC)
		Dim t
		t = Replace(strMAC, "-", "")
		t = Replace(t, ":", "")
		convertMACforWOL = LCase(t)
	End Function
	
	' ~~~~~~~~~~~~~~
	' Read setting from configuration file
	Function readConfig(param)
		On Error Resume Next
		Set objConfigFile = objFSO.OpenTextFile(ScriptPath & "\" & configFileName, ForReading, True)
		Do Until objConfigFile.AtEndOfStream
			i = i + 1
			currLine = objConfigFile.Readline
			If Not CBool(InStr(currLine,"#")) And CBool(InStr(currLine,"=")) Then
				eqLoc = Instr(currLine, "=")
				currParam = Trim(Left(currLine, eqLoc - 1))
				currValue = Mid(currLine, eqLoc + 1, Len(currLine) - eqLoc)
				currValue = Trim(Replace(currValue, """", ""))
				If currParam = param Then
					Select Case LCase(currValue)
						Case "true"
							readConfig = True
						Case "false"
							readConfig = False
						Case "yes"
							readConfig = True
						Case "no"
							readConfig = False
						Case Else
							readConfig = currValue
					End Select
				End If
			End If
		Loop
		objConfigFile.Close
	End Function
	
	' ~~~~~~~~~~~~~~
	' Write a setting to configuration file	
	Function writeConfig(param, value)
		On Error Resume Next
		Dim currentParamLine
		Dim strValue
		Set objConfigFile = objFSO.OpenTextFile(ScriptPath & "\" & configFileName, ForReading, True)
		Do Until objConfigFile.AtEndOfStream
			currLine = objConfigFile.Readline
			If Not CBool(Instr(currLine,"#")) And CBool(InStr(currLine,"=")) Then
				eqLoc = Instr(currLine, "=")
				currParam = Trim(Left(currLine, eqLoc - 1))
				If LCase(currParam) = LCase(param) Then
					currentParamLine = currLine
				End If
			End If
		Loop
		objConfigFile.Close
		
		Set objConfigFile = objFSO.OpenTextFile(ScriptPath & "\" & configFileName, ForReading, True)
		strText = objConfigFile.ReadAll
		objConfigFile.Close

		strNewText = Replace(strText, currentParamLine, param & " = """ & value & """")
		Set objConfigFile = objFSO.OpenTextFile(ScriptPath & "\" & configFileName, ForWriting, True)
		objConfigFile.Write strNewText
		If err.Number = 0 Then
			writeConfig = True
		End If
		objConfigFile.Close
	End Function

	' ~~~~~~~~~~~~~~
	' Evaluate specific variables from configuration file
	Sub parseConfig(param)
		Select Case param
			Case "Health_services"
				If configFileIncluded Then
					checkserviceslistC = readConfig("checkserviceslist")
					If Len(checkserviceslistC) > 0 Then
						checkserviceslist = checkserviceslistC
					End If
				End If			
			Case "Health_inventory"
				If configFileIncluded Then
					daysFromLastHWScanC = readConfig("daysFromLastHWScan")
					daysFromLastSWScanC = readConfig("daysFromLastSWScan")
					If isNumeric(daysFromLastHWScanC) Then
						daysFromLastHWScan = daysFromLastHWScanC
					End If
					If isNumeric(daysFromLastSWScanC) Then
						daysFromLastSWScan = daysFromLastSWScanC
					End If
				End If			
			Case "Health_registry"
	    	If configFileIncluded Then
	    		checkEnableDCOMC = readConfig("checkEnableDCOM")
	    		checkEnableRemoteConnectC = readConfig("checkEnableRemoteConnect")
	    		checkLegacyImpersonationLevelC = readConfig("checkLegacyImpersonationLevel")
	    		checkLegacyAuthenticationLevelC = readConfig("checkLegacyAuthenticationLevel")
	    		If checkEnableDCOMC <> "" Then
	    			checkEnableDCOM = checkEnableDCOMC
	    		End If
	    		If checkEnableRemoteConnectC <> "" Then
	    			checkEnableRemoteConnect = checkEnableRemoteConnectC
	    		End If
	    		If checkLegacyImpersonationLevelC <> "" Then
	    			checkLegacyImpersonationLevel = checkLegacyImpersonationLevelC
	    		End If
	    		If checkLegacyAuthenticationLevelC <> "" Then
	    			checkLegacyAuthenticationLevel = checkLegacyAuthenticationLevelC
	    		End If
	    	End If
	    Case "uninstall"
	    		If configFileIncluded Then
	    			enableFullUninstall = readConfig("enableFullUninstall")
	    		End If
		End Select
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Calculate time difference between start and finish
	Function timeDifference(s, f)
		SecondsSF = DateDiff("s", s, f)
		secs = SecondsSF Mod 60
		mins = (SecondsSF - secs) / 60
		timeDifference = mins&" minute(s) and "&secs&" second(s)."
	End Function

	' ~~~~~~~~~~~~~~
	' Format the duration time	
	Function timeFormat(s, showFull)
'		days = s / 86400
'		hours = (s / 3600) - (days * 24)
'		mins = (s / 60) - (days * 1440) - (hours * 60)
	  days = int(pNumSec/86400)
	  h1 = pNumSec - (d * 86400)
	  hours = int(h1/3600)
	  m1 = h1 - (h * 3600)
	  mins = int(m1/60)
	  secs = m1 - (m * 60)
'		secs = DatePart("s", dt)
'		mins = DatePart("n", dt)
'		hours = DatePart("h", dt)
'		days = DatePart("y", dt)
		If showFull Then
			timeFormat = days & " days, " & hours & " hours and " & mins & " minute(s) " & secs & " second(s)."
		Else
			timeFormat = mins&" minute(s) and "&secs&" second(s)."
		End If
	End Function
	
  Function datediffToWords(d1, d2) 
    minutes = abs(datediff("n", d1, d2))
    If minutes <= 0 then 
			word = "0 minutes." 
    Else
      word = ""
      If minutes >= 24*60 then 
        word = word & _ 
        minutes\(24*60) & " day(s), " 
      End If
      minutes = minutes mod (24*60) 
      If minutes >= 60 then 
          word = word & minutes\(60) & " hours(s), " 
      End If 
      minutes = minutes mod 60 
      word = word & minutes & " minute(s)." 
    End If 
    datediffToWords = word 
  End Function 
	
	
	' ~~~~~~~~~~~~~~
	' Log specified string in logTextArea field and to lastLog.log file
	Function Log(logEntry, addToLogFile, component, level)
		Dim lineOfLog, consolidatedLog, logFileName
		lineOfLog = logEntry
		If addToLogFile Then
			If enableTrace32Formatting Then
				objOutputLOG.WriteLine formatTrace32Line(logEntry, component, level)
			Else
				objOutputLOG.WriteLine formatNormalLine(logEntry, component, level)
			End If
		End If
		If logTextArea.value <> "" Then
			lineOfLog = logTextArea.value & vbcrlf & lineOfLog
		End If
		logTextArea.value = lineOfLog
		logTextArea.doScroll("scrollbarPageDown")
		Log = lineOfLog
	End Function
	
	' ~~~~~~~~~~~~~~
	' Apply disabledomaincreds registry setting
	Sub doDisableDomainCredsWorkaround()
		strRegFileName = "disableDomainCreds.reg"
		strLocalRegFilePath = localTempPath & "\" & strRegFileName
			
		objShell.Run "REGEDIT.EXE /S """ & strLocalRegFilePath & """", True, 0
	End Sub
	
	' ~~~~~~~~~~~~~~
	' Hides specified HTML container
	Sub closeGUIWindow(iD)
		document.getElementById(iD).style.display = "none"
		' Make sure correct authentication method is used when credential dialog is closed
		If iD = "credentialManager" Then
			If Not selectedAuthentication(0).Checked Then
				If dicCredentials.Count = 0 Then
					integratedAuth = True
					changeAuthentication()
					selectedAuthentication(0).Checked = True
					userinfoContainer.style.display = "none"
					credentialsContainer.style.display = "none"
				Else
					integratedAuth = False
					changeAuthentication()
				End If
			Else
				integratedAuth = True
				changeAuthentication()
			End If
		End If
	End Sub
	
	'-----------------------------------------------------------
	' Prepare for log file autonaming
	' * Credits go to Brimm3r
	Function FmtDigits(ByVal intValue, ByVal intDigits)
		FmtDigits = Right(String(intDigits - 1, "0") & CStr(intValue), intDigits)
	End Function
	
	Function FmtDate(ByVal dtValue)
		FmtDate = FmtDigits(Year(dtValue), 4) _
						& FmtDigits(Month(dtValue), 2) _
						& FmtDigits(Day(dtValue), 2) _
						& FmtDigits(Hour(dtValue), 2) _
						& FmtDigits(Minute(dtValue), 2)
	End Function
	'-----------------------------------------------------------
		
	</script>	
	
	<body onkeydown="checkEnter()">
		<table width="100%" height="100%" >
			<tr>
				<td>
					<table width="100%" height="100%">
						<tr>
							<th width="30%" height="30px" class="topRow">List of computers:</th>
							<th width="70%" height="30px" class="topRow" colspan="2">Client actions:
								<div id="credentialContainer">
									<a href="#" id="credentialLink" onclick="specifyCredentials()">Using integrated authentication</a>
									<br/>
									<span id="usernameText"></span>
								</div>
							</th>
						</tr>
						
						<!--<tr onclick="backgroundClick">-->
						<tr onclick="backgroundclick()">
							<td valign="top" style="border-right:1px dotted #000000" colspan="2">
								<form id="fileloaderform" style="margin-bottom:0px">
									<label for="fileloader">Select a source file (TXT, CSV, XLS, XLSX)...</label>
									<input type="file" id="fileloader" onchange="updateSourceFields(0)" onblur="updateHiddenActions()" />
								</form><hr/>
								<label for="loadFromCollectionID">... or load computers from collection...</label>
								<input type="text" id="loadFromCollectionID" /><input type="button" value="Load..." onclick="loadFromCollection()" />
								<hr/>
								<label for="textlist">... or paste list of computers here:</label>
								<textarea id="textlist" rows="20" style="width:100%" onchange="updateSourceFields(1);" onkeyup="updateHiddenActions()" onmouseout="updateHiddenActions()"></textarea>
							</td>
							
							<td valign="top">
								<table width="100%">
									<tr>
										<td colspan="2">
											<div id="actionsContainer">
												<div onclick="doAccordion(1, 'actions');">
													<div id="actionsTitle" onselectstart="return false;">
														<a href="#" class="3dbutton"><span>Client schedule actions</span></a>
													</div>
												</div>
											  <div id="actionsContent1" class="actionsContent">
											        <a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act1"><input type="radio" id="act1" name="selectedAction" value="act1" itemAction="{00000000-0000-0000-0000-000000000121}">&nbsp;Application Deployment Evaluation Cycle</span></a><br/>
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act1"><input type="radio" id="act1" name="selectedAction" value="act1" itemAction="{00000000-0000-0000-0000-000000000001}">&nbsp;Hardware Inventory Cycle</span></a><br/>
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act2"><input type="radio" name="selectedAction" value="act2" itemAction="{00000000-0000-0000-0000-000000000002}" checkUser="1">&nbsp;Software Inventory Cycle</span></a><br/>
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act3"><input type="radio" name="selectedAction" value="act3" itemAction="{00000000-0000-0000-0000-000000000003}">&nbsp;Discovery Data Collection Cycle (Send DDR)</span></a><br/>
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act4"><input type="radio" name="selectedAction" value="act4" itemAction="{00000000-0000-0000-0000-000000000021}">&nbsp;Machine Policy Retrieval & Evaluation Cycle</span></a><br/>
<!--													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act5"><input type="radio" name="selectedAction" value="act5" itemAction="{00000000-0000-0000-0000-000000000026}">&nbsp;User Policy Retrieval & Evaluation Cycle</span></a><br/> -->
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act6"><input type="radio" name="selectedAction" value="act6" itemAction="{00000000-0000-0000-0000-000000000108}">&nbsp;Software Updates Deployment Evaluation Cycle</span></a><br/>
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act7"><input type="radio" name="selectedAction" value="act7" itemAction="{00000000-0000-0000-0000-000000000113}">&nbsp;Software Updates Scan Cycle</span></a><br/>
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act8"><input type="radio" name="selectedAction" value="act8" itemAction="{00000000-0000-0000-0000-000000000010}">&nbsp;File Collection Cycle</span></a><br/>
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act9"><input type="radio" name="selectedAction" value="act9" itemAction="{00000000-0000-0000-0000-000000000032}">&nbsp;Windows Installer Source List Update Cycle</span></a><br/>
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act10"><input type="radio" name="selectedAction" value="act10" itemAction="{00000000-0000-0000-0000-000000000031}">&nbsp;Software Metering Usage Report Cycle</span></a><br/>
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act11"><input type="radio" name="selectedAction" value="act11" itemAction="{00000000-0000-0000-0000-000000000061}">&nbsp;Branch Distribution Point Maintenance Task</span></a><br/>
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act12"><input type="radio" name="selectedAction" value="act12" itemAction="{00000000-0000-0000-0000-000000000051}">&nbsp;Certificate Maintenance Task</span></a>
											  </div>
												
												<div onclick="doAccordion(2, 'actions');">
													<div id="actionsTitle" onselectstart="return false;">
													<a href="#" class="3dbutton"><span>Client agent actions</span></a>
													</div>
												</div>
											  <div id="actionsContent2" class="actionsContent">
													<span id="clientLogFolderContainer" style="display:none">
														<!-- Only visible when a single computer is in a list -->
														<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act130"><input type="radio" name="selectedAction" value="act130" itemAction="clientLogFolder">&nbsp;Open SCCM client log folder</span></a><br/> <!-- Added in 0.5 -->
														<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act131"><input type="radio" name="selectedAction" value="act131" itemAction="clientSetupFolder">&nbsp;Open SCCM client setup folder</span></a><br/> <!-- Added in 0.5 -->
											  	</span>
											  	<table width="100%">
											  	<tr>
											  		<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act132"><input type="radio" name="selectedAction" value="act132" itemAction="getMP">&nbsp;Get management point</span></a><br/> <!-- Added in 1.0 -->
														</td>
													</tr>											  	
											  	<tr>
											  		<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act13"><input type="radio" name="selectedAction" value="act13" itemAction="restartService">&nbsp;Restart SMS Agent Host service</span></a><br/>
														</td>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act14"><input type="radio" name="selectedAction" value="act14" itemAction="repairClient" checkUser="1">&nbsp;Repair SCCM client</span></a><br/> <!-- Added in 0.2 -->
														</td>
													</tr>
													<tr>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act15"><input type="radio" name="selectedAction" value="act15" itemAction="resetPolicies">&nbsp;Reset SCCM client policies</span></a><br/> <!-- Added in 0.2 -->
														</td>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act16"><input type="radio" name="selectedAction" value="act16" itemAction="reassignSitecode">&nbsp;Reassign site code</span></a><br/> <!-- Added in 0.2 -->
														</td>
													</tr>
													<tr>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act151"><input type="radio" name="selectedAction" value="act151" itemAction="changeFSP">&nbsp;Change FSP server</span></a><br/> <!-- Added in 1.0 -->
														</td>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act161"><input type="radio" name="selectedAction" value="act161" itemAction="changeSLP">&nbsp;Change SLP server</span></a><br/> <!-- Added in 1.0 -->
														</td>
													</tr>													
													<tr>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act17"><input type="radio" name="selectedAction" value="act17" itemAction="newGUID">&nbsp;Generate new SMS GUID</span></a><br/> <!-- Updated in 0.4 -->
														</td>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act181"><input type="radio" name="selectedAction" value="act181" itemAction="createCCR">&nbsp;Create and send CCR files</span></a><br/> <!-- Added in 1.0 -->													
														</td>
													</tr>
													<tr>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act171"><input type="radio" name="selectedAction" value="act171" itemAction="deleteRootKey">&nbsp;Delete trusted root key</span></a><br/> <!-- Added in 0.4 -->
														</td>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act172"><input type="radio" name="selectedAction" value="act172" itemAction="deleteCert">&nbsp;Delete certificates<br/>(re-register client)</span></a><br/> <!-- Added in 0.4 -->
														</td>
													</tr>
													<tr>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act18"><input type="radio" name="selectedAction" value="act18" itemAction="changeCache">&nbsp;Change client cache size</span></a><br/> <!-- Added in 0.2 -->
														</td>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act173"><input type="radio" name="selectedAction" value="act173" itemAction="registerATL">&nbsp;Re-register ATL.DLL</span></a><br/> <!-- Added in 0.6 -->
														</td>
													</tr>
													<tr>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act19"><input type="radio" name="selectedAction" value="act19" itemAction="uninstallClient" checkUser="1">&nbsp;Uninstall SCCM client</span></a><br/>
														</td>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act20"><input type="radio" name="selectedAction" value="act20" itemAction="installClient" checkUser="1">&nbsp;Install SCCM client</span></a> <!-- Added in 0.2 -->
														</td>
													</tr>
													</table>
											  </div>
											  
												<div onclick="doAccordion(3, 'actions');">
													<div id="actionsTitle" onselectstart="return false;">
													<a href="#" class="3dbutton"><span>Client health actions</span></a>
													</div>
												</div>		
											  <div id="actionsContent3" class="actionsContent">
											  	<table width="100%">
											  	<tr>
											  		<td class="healthcheckCell">
											  	<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act21"><input type="radio" name="selectedAction" value="act21" itemAction="checkWMI">&nbsp;Check WMI</span></a> <!-- Added in 0.3 -->
														</td>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act22"><input type="radio" name="selectedAction" value="act22" itemAction="fixWMI" checkUser="1">&nbsp;Fix WMI</span></a> <!-- Added in 0.3 -->
														</td>
													</tr>
													<tr>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act23"><input type="radio" name="selectedAction" value="act23" itemAction="checkServices">&nbsp;Check services</span></a> <!-- Added in 0.3 -->
														</td>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act24"><input type="radio" name="selectedAction" value="act24" itemAction="fixServices">&nbsp;Check & Fix services</span></a> <!-- Added in 0.3 -->
														</td>
													</tr>
													<tr>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act25"><input type="radio" name="selectedAction" value="act25" itemAction="checkAdminShare">&nbsp;Check admin$ share</span></a> <!-- Added in 0.3 -->
														</td>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act26"><input type="radio" name="selectedAction" value="act26" itemAction="fixAdminShare">&nbsp;Check & Fix admin$ share</span></a> <!-- Added in 0.3 -->
														</td>
													</tr>
													<tr>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act27"><input type="radio" name="selectedAction" value="act27" itemAction="checkAssignedSite">&nbsp;Check assigned site</span></a> <!-- Added in 0.3 -->
														</td>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act28"><input type="radio" name="selectedAction" value="act28" itemAction="fixAssignedSite">&nbsp;Check & Fix assigned site</span></a> <!-- Added in 0.3 -->
														</td>
													</tr>
													<tr>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act29"><input type="radio" name="selectedAction" value="act29" itemAction="checkRegistry">&nbsp;Check registry</span></a> <!-- Added in 0.3 -->
														</td>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act30"><input type="radio" name="selectedAction" value="act30" itemAction="fixRegistry">&nbsp;Check & Fix registry</span></a> <!-- Added in 0.3 -->
														</td>
													</tr>
													<tr>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act31"><input type="radio" name="selectedAction" value="act31" itemAction="checkInventory">&nbsp;Check inventory</span></a> <!-- Added in 0.3 -->
														</td>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act32"><input type="radio" name="selectedAction" value="act32" itemAction="fixInventory">&nbsp;Check & Fix inventory</span></a> <!-- Added in 0.3 -->
														</td>
													</tr>													
													<tr>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act33"><input type="radio" name="selectedAction" value="act33" itemAction="checkClientVersion">&nbsp;Check client version</span></a> <!-- Added in 0.3 -->
														</td>
														<td class="healthcheckCell">
															<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act331"><input type="radio" name="selectedAction" value="act331" itemAction="fixClientVersion" checkUser="1">&nbsp;Check & Fix client version</span></a> <!-- Added in 1.0 -->
														</td>														
													</tr>
													<tr style="padding-top:10px;">
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act34"><input type="radio" name="selectedAction" value="act34" itemAction="checkHealth">&nbsp;Full health check</span></a> <!-- Added in 0.3 -->
														</td>
														<td class="healthcheckCell">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act35"><input type="radio" name="selectedAction" value="act35" itemAction="fixHealth" checkUser="1">&nbsp;Full health check with fixes</span></a> <!-- Added in 0.3 -->
														</td>
													</tr>													
													</table>
											  </div> 
											  
												<div onclick="doAccordion(4, 'actions');">
													<div id="actionsTitle" onselectstart="return false;">
													<a href="#" class="3dbutton"><span>Advertisement actions</span></a>
													</div>
												</div>
												<div id="actionsContent4" class="actionsContent">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act22"><input type="radio" name="selectedAction" value="act22" itemAction="queryAdvertisement">&nbsp;Query advertisement status</span></a><br/> <!-- Added in 0.2 -->
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act221"><input type="radio" name="selectedAction" value="act221" itemAction="queryAllAdvertisements">&nbsp;Get all active advertisements</span></a><br/> <!-- Added in 0.8 -->
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act222"><input type="radio" name="selectedAction" value="act222" itemAction="queryAllUserAdvertisements">&nbsp;Get all active user advertisements</span></a><br/> <!-- Added in 0.8 -->
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act23"><input type="radio" name="selectedAction" value="act23" itemAction="rerunAdvertisement" checkUser="1">&nbsp;Rerun advertisement</span></a><br/> <!-- Added in 0.2 -->
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act24"><input type="radio" name="selectedAction" value="act24" itemAction="rerunUserAdvertisement">&nbsp;Rerun user based advertisement</span></a> <!-- Added in 0.2 -->
												</div>

<!--	Will be added in future version...													
												<div onclick="doAccordion(5, 'actions');">
													<div id="actionsTitle" onselectstart="return false;">
													<a href="#" class="3dbutton"><span>Collection actions</span></a>
													</div>
												</div>
										
												<div id="actionsContent5" class="actionsContent">
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act25"><input type="radio" name="selectedAction" value="act25" itemAction="addToCollection">&nbsp;Add to collection</span></a><br/>
													<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act26"><input type="radio" name="selectedAction" value="act26" itemAction="remFromCollection">&nbsp;Remove from collection</span></a>
												</div>
-->												
												
												<div onclick="doAccordion(6, 'actions');">
													<div id="actionsTitle" onselectstart="return false;">
													<a href="#" class="3dbutton"><span>Other actions</span></a>
													</div>
												</div>
												<div id="actionsContent6" class="actionsContent">
											  	<table width="100%">
												  	<tr>
												  		<td class="healthcheckCell">
												  			<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act28"><input type="radio" name="selectedAction" value="act28" itemAction="pingClient">&nbsp;Ping workstations</span></a><br/> <!-- Added in 0.2 -->
															</td>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act291"><input type="radio" name="selectedAction" value="act291" itemAction="wakeOnLAN">&nbsp;Wake On LAN</span></a><br/> <!-- Added in 0.8 -->
															</td>
														</tr>
														<tr>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act27"><input type="radio" name="selectedAction" value="act27" itemAction="refreshGPO">&nbsp;Refresh group policies</span></a><br/> <!-- Added in 0.3.3 -->
															</td>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act271"><input type="radio" name="selectedAction" value="act271" itemAction="resetSecurity">&nbsp;Reset security settings</span></a><br/> <!-- Added in 0.1 -->
															</td>															
														</tr>
														<tr>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act29"><input type="radio" name="selectedAction" value="act29" itemAction="runCommand">&nbsp;Execute remotely (as SYSTEM)</span></a><br/> <!-- Added in 0.2 -->
															</td>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act292"><input type="radio" name="selectedAction" value="act292" itemAction="copyFile">&nbsp;Copy a file</span></a><br/> <!-- Added in 0.6.1 -->
															</td>
														</tr>
														<tr>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act30"><input type="radio" name="selectedAction" value="act30" itemAction="loggedOnUser">&nbsp;Get logged-on user</span></a><br/> <!-- Added in 0.2 -->
															</td>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act301"><input type="radio" name="selectedAction" value="act301" itemAction="computerOU">&nbsp;Get computer OU</span></a><br/> <!-- Added in 0.7.1 -->
															</td>
														</tr>
														<tr>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act302"><input type="radio" name="selectedAction" value="act302" itemAction="WSUSServer">&nbsp;Get WSUS Content location</span></a><br/> <!-- Added in 1.0 -->
															</td>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act303"><input type="radio" name="selectedAction" value="act303" itemAction="WUAVersion">&nbsp;Get WUA version</span></a><br/> <!-- Added in 1.0 -->
															</td>
														</tr>
														<tr>
															<td class="healthcheckCell" colspan="2">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act304"><input type="radio" name="selectedAction" value="act304" itemAction="patchStatus">&nbsp;Query update status</span></a><br/> <!-- Added in 1.1 -->
															</td>

														</tr>																	
														<tr>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act331"><input type="radio" name="selectedAction" value="act331" itemAction="getRebootState">&nbsp;Get reboot pending state</span></a><br/> <!-- Added in 1.0 -->
															</td>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act332"><input type="radio" name="selectedAction" value="act332" itemAction="getUptime">&nbsp;Get system uptime</span></a><br/> <!-- Added in 1.0 -->
															</td>
														</tr>														
														<tr>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act31"><input type="radio" name="selectedAction" value="act31" itemAction="logoffUser">&nbsp;Log off current user</span></a><br/> <!-- Added in 0.3 -->
															</td>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act32"><input type="radio" name="selectedAction" value="act32" itemAction="restartComputer" checkUser="1">&nbsp;Reboot workstations</span></a><br/> <!-- Added in 0.2 -->
															</td>
														</tr>
														<tr>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act33"><input type="radio" name="selectedAction" value="act33" itemAction="shutdownComputer" checkUser="1">&nbsp;Shut down workstations</span></a><br/> <!-- Added in 0.2 -->
															</td>
															<td class="healthcheckCell">
																<a href="#" class="actionItem" onclick="checkThisItem(this)"><span id="s_act34"><input type="radio" name="selectedAction" value="act34" itemAction="poweroffComputer" checkUser="1">&nbsp;Power off workstations</span></a><br/> <!-- Added in 0.3 -->
															</td>
														</tr>
													</table>
												</div>												
											</div>
										</td>
									</tr>
									<tr>
										<td style="border-top:1px solid #000000;text-align:left;vertical-align:top">
											<span id="logButton"><input type="Button" onclick="openLastLog()" value="Log" title="Open last log file..." /></span>
										</td>
										<td style="border-top:1px solid #000000;text-align:right;vertical-align:bottom">
											<span id="startButton" style="display:"><input type="Button" onclick="initiateAction()" value="START" /></span>
											<span id="stopButton" style="display:none"><input type="Button" onclick="updateStatus(0)" value="STOP" /></span>
											<br />
											<span id="progressText" style="display:none;font-size:11px"></span>
										</td>
									</tr>
								</table>
							</td>
						</tr>
					</table>
				</td>
			</tr>
			
			<tr onclick="backgroundClick()">
				<td valign="top" height="24%" style="spacing-bottom:0px;spacing-top:0px; margin-bottom:0px; margin-top:0px;">
					<textarea id="logTextArea" style="width:100%; height:100%" readonly></textarea>
				</td>
			</tr>
		</table>
		
		<div id="credentialManager" style="display:none;">
			<span class="closeLink"><a href="#" onclick="closeGUIWindow('credentialManager');">Close</a></span>
			<input type="radio" name="selectedAuthentication" onclick="checkAuthRadioButtons()" checked>&nbsp;Integrated authentication<br/>
			<input type="radio" name="selectedAuthentication" onclick="checkAuthRadioButtons()">&nbsp;Alternate credentials<br/>
			<div id="userinfoContainer" style="display:none">
				<label for="fUsername">Username:</label>
				<input id="fUsername" type="text" />
				<label for="fPassword">Password:</label>
				<input id="fPassword" type="password" />
				<input type="button" value="Add" onclick="addCredentials()" />
			</div>
			<div id="credentialsContainer" style="display:none"></div>
			<hr />
			<input type="button" value="Set" onclick="changeAuthentication()" />
		</div>
		
		<!-- About Configuration Manager Client Installation Properties: http://technet.microsoft.com/en-us/library/bb680980.aspx -->
		<div id="clientInstallManager" style="display:none;width:650px">
			<span class="closeLink"><a href="#" onclick="closeGUIWindow('clientInstallManager');">Close / Cancel</a></span>		
			<form id="clientInstallPathForm" style="margin-bottom:0px;width:100%">
				<table width="100%">
					<tr>
						<th align="center" colspan="2"><h3>Client Install Configuration<hr/></h3></th>
					</tr>
					<tr><td align="left" colspan="2"><span id="ccmsetupComment" style="font-style:italic;font-size:11px;color:red;margin-top:0px;spacing-top:0px;"></span></td></tr>
					<tr>
						<th class="leftCell">CCMSETUP.EXE path:</th>
						<td>
							<input id="ccmsetupPathValue" size="70" title="Specify UNC path to CCMSETUP.EXE" /><br /><input type="file" id="ccmsetupPath" style="width:0px;" onchange="ccmGetCCMSETUPPath();" />
						</td>
					</tr>
				</table>
			</form>
			<form id="clientInstallForm" style="margin-top:0px;width:100%">
				<table width="100%">
					<tr>
						<td colspan="2">
							<label for="ccmParameters">Specify CCMSETUP.EXE command-line properties manually or use controls below.<br/>CCMSetup.exe [Ccmsetup properties] [client.msi setup properties]</label>
							<input id="ccmParameters" size="90" value="/service SMSSITECODE=AUTO" /><input id="ccmEnableControls" type="checkbox" onclick="ccmUpdateParameters()" checked title="Uncheck this to specify parameters manually" /><span style="margin-left:4px">GUI</span>
						</td>
					</tr>
					
					<tr>
						<td colspan="2">
					<!-- Installation properties -->
									<table width="100%">
										<tr>
											<!-- CCMSETUP Properties -->
											<td style="vertical-align:top">
												<table width="100%" border="1">
													<tr>
														<th colspan="2"><u>Ccmsetup Properties</u></th>
													</tr>
													
													<tr>
														<th class="leftCell">Run as service:</th>
														<td><input id="ccmRunAsService" type="checkbox" onclick="ccmUpdateParameters()" checked title="Specifies that CCMSetup should run as a service using the local system account. Strongly recommended." /><span style="margin-left:8px"><i>/service</i></span></td>
													</tr>
													<tr>
														<th class="leftCell">Force install:</th>
														<td><input id="ccmForceInstall" type="checkbox" onclick="ccmUpdateParameters()" title="Specifies that the client installation should continue even if any version of the Configuration Manager 2007 or SMS client is already installed." checked /><span style="margin-left:8px"><i>/logon</i></span></td>
													</tr>
													<tr>
														<th class="leftCell">Force reboot:</th>
														<td><input id="ccmForceReboot" type="checkbox" onclick="ccmUpdateParameters()" title="Specifies that CCMSetup should force the client computer to restart if this is necessary to complete the client installation. If this option is not specified, CCMSetup exits when a restart is necessary and then continues after the next manual restart." /><span style="margin-left:8px"><i>/forcereboot</i></span></td>
													</tr>
													<tr>
														<th class="leftCell">Native mode:</th>
														<td>
															<input id="ccmNativeMode" type="checkbox" title="Specifies native mode client communication." onclick="ccmEnableNativeMode();" /><span style="margin-left:8px"><i>/native</i></span><br />
															<select id="ccmNativeModeOption" onchange="ccmUpdateParameters()" disabled>
																<option value="">Specify options &gt;&gt;</option>
																<option value="CRL">CRL</option>
																<option value="FALLBACK">FALLBACK</option>
																<option value="CRLANDFALLBACK">CRLANDFALLBACK</option>
															</select>
														</td>
													</tr>
													<tr>
														<th class="leftCell">Retry interval:</th>
														<td><input id="ccmRetryInterval" OnKeyUp="ccmUpdateParameters()" OnBlur="ccmUpdateParameters()" title="Specifies the retry interval if CCMSetup.exe fails to download installation files. The default value is 10 minutes. CCMSetup continues to retry until it reaches the limit specified in the downloadtimeout installation property." value="10" size="4" />&nbsp;min</td>
													</tr>
													<tr>
														<th class="leftCell">BITS priority:</th>
														<td>
														<select id="ccmBITSPriority" onchange="ccmUpdateParameters()" title="Specifies the download priority when client installation files are downloaded over an http connection. Specify at least one MP to control this." disabled>
															<option value="FOREGROUND">FOREGROUND</option>
															<option value="HIGH">HIGH</option>
															<option value="NORMAL" selected>NORMAL</option>
															<option value="LOW">LOW</option>
														</select>
														</td>
													</tr>
												</table>
											</td>
											<!-- Client.msi Properties -->
											<td style="vertical-align:top">
												<table width="100%" border="1">
													<tr>
														<th colspan="2"><u>Client.msi Properties</u></th>
													</tr>
													
													<tr>
														<th class="leftCell">SMSSITECODE:</th>
														<td><input id="ccmSiteCode" size="3" maxlength="3" value="AUTO" onKeyUp="ccmUpdateParameters()" OnBlur="ccmUpdateParameters()" title="Specifies the Configuration Manager 2007 site to assign the Configuration Manager Client to. This can either be a three-character Configuration Manager 2007 site code or the word AUTO. If AUTO is specified, the Configuration Manager Client attempts to determine its Configuration Manager 2007 site assignment by using Active Directory Domain Services or a server locator point." /></td>
													</tr>
													<tr>
														<th class="leftCell">SMSMP:</th>
														<td><input id="ccmMP" size="20" OnKeyUp="ccmUpdateParameters()" title="Assigns the Configuration Manager 2007 client to the specified management point. You can specify a fully qualified domain name as this property." /></td>
													</tr>
													<tr>
														<th class="leftCell">SMSSLP:</th>
														<td><input id="ccmSLP" size="20" OnKeyUp="ccmUpdateParameters()" title="Specifies the server locator point for site assignment and locating management points for clients that cannot locate this information from Active Directory Domain Services, DNS, or WINS." /></td>
													</tr>
													<tr>
														<th class="leftCell">FSP:</th>
														<td><input id="ccmFSP" size="20" OnKeyUp="ccmUpdateParameters()" title="Specifies the fallback status point that receives and processes state messages sent by Configuration Manager 2007 client computers." /></td>
													</tr>
													<tr>
														<th class="leftCell">SMSCACHESIZE:</th>
														<td><input id="ccmCacheSize" size="10" value="5120" OnKeyUp="ccmUpdateParameters()" OnBlur="ccmUpdateParameters()" title="Specifies the size of the temporary program download folder in MB or as a percentage when used with the PERCENTDISKSPACE or PERCENTFREEDISKSPACE property. If this property is not set, the folder defaults to a maximum size of 5120 MB." />&nbsp;MB</td>
													</tr>
													<tr>
														<th class="leftCell">Enable logging:</th>
														<td>
															<input id="ccmLogging" type="checkbox" onclick="ccmEnableLogging();" title="Enables logging if this property is set to TRUE. By default, logging is enabled. The log files are stored in the Logs folder in the Configuration Manager Client installation folder. By default, this folder is %Windir%\System32\CCM\Logs." />&nbsp;&nbsp;
															<span>Level:</span>
															<select id="ccmLogLevel" onchange="ccmUpdateParameters()" title="Specifies the amount of detail to write to Configuration Manager 2007 log files. Specify an integer ranging from 0 to 3, where 0 is the most verbose logging and 3 logs only errors. The default is 1." disabled>
																<option value="0">0</option>
																<option value="1" selected>1</option>
																<option value="2">2</option>
																<option value="3">3</option>
															</select>
														</td>
													</tr>											
												</table>
											</td>
										</tr>
									</table>

					
							<!-- Sources -->
							<table width="100%">
							<tr>
								<td colspan="2" style="text-align:center;border-top:1px solid #000000;"><b>SPECIFY MULTIPLE SOURCES:</b>
									<table width="100%" border="1">
										<tr>
											<th><u>SMB (path)</u></th>
											<th><u>BITS (MP server)</u></th>
										</tr>
										
										<tr>
											<!-- SMB sources -->
											<td style="vertical-align:top;">
												<div id="ccmSMBSourcesContainer">
													<input id="ccmSMBSource" type="text" size="35" title="Specify location from which to download installation files. You can use a local or UNC installation path. Files are downloaded by using the server message block (SMB) protocol." />
													<input type="button" value="Add" onclick="ccmAddSource('SMB', clientInstallForm.ccmSMBSource.value)" />
												</div>
												<div id="SMBSourcesContainer" class="listWithScrollbars"></div>
											</td>
											
											<!-- BITS sources -->
											<td style="vertical-align:top;">
												<div id="ccmBITSSourcesContainer">
													<input id="ccmBITSSource" type="text" size="35" title="Specify source management point for downloading installation files. Files are downloaded over an http or https connection, which uses BITS throttling if this is configured." />
													<input type="button" value="Add" onclick="ccmAddSource('BITS', clientInstallForm.ccmBITSSource.value)" />
												</div>
												<div id="BITSSourcesContainer" class="listWithScrollbars"></div>													
											</td>
											
										</tr>
									</table>
								</td>
							</tr>
							</table>
					</td></tr>
					
					<tr>
						<td colspan="2" style="border-bottom:1px solid #000000;" nowrap></td>
					</tr>
				</table>
				<hr width="100%" />
				<table width="100%">
					<tr>
						<td style="text-align:left"><input type="button" value="Save this configuration as default..." onclick="ccmSaveConfiguration()" /></td>
						<td style="text-align:right"><input type="button" value="Proceed..." onclick="ccmConfigurationReady()" /></td>
					</tr>
					<tr>
					<td colspan="2"><span id="ccmStatusMsg"></span></td>
					</tr>
				</table>
			</form>
		</div>
		
		<div id="TestDiv">
			<h1>Hello</h1>
			<h3>Helloo Robert</h3>
			<asp:Button ID="Button2" runat="server" Text="Button" />
			<asp:TextBox ID="TextBox1" runat="server"></asp:TextBox>
		</div>		
		
	</body>
</html>